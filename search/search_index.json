{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programming Note Summary for new programming language or APIs learning rust javascript Python go","title":"Programming Note"},{"location":"#programming-note","text":"Summary for new programming language or APIs learning rust javascript Python go","title":"Programming Note"},{"location":"algorithm/","text":"Algorithm note Basic Data Structure Stack Queue Tree Prefix Tree (Trie) PQ (Priority Queue), Max Heap, Min Heap DFS (Depth First Search) BFS (Breadth First Search) DFS with stack BFS with queue Shortest Path Algorithm (\ucd5c\ub2e8 \uacbd\ub85c \uc54c\uace0\ub9ac\uc998) Dijkstra Algorithm: \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9; O((V+E)lgV) priority queue (heap)\ub85c \uc131\ub2a5\ud5a5\uc0c1 \uac00\ub2a5 Bellman-Ford-Moore Algorithm: \uac00\uc911 \uc720\ud5a5 \uadf8\ub798\ud504(Weighted-Directed Graph)\uc5d0\uc11c \ub178\ub4dc \uc0ac\uc774\uc758 \ucd5c\ub2e8 \uacbd\ub85c \ud0d0\uc0c9; O(VE) \uc74c\uc218 \uac00\uc911\uce58 \uc0ac\uc6a9\uac00\ub2a5, negative-weight cycles \uc720\ubb34 \ud310\ub2e8 (\ubb34\ud55c \ubc1c\uc0b0\ud558\ubbc0\ub85c ...) \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 https://victorydntmd.tistory.com/104 Floyd Warshall Algorithm: \uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 (O(V * V * V)) \uc784\uc758\uc758 \ub178\ub4dc s\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud558\uae30 \uc704\ud574, s\uc640 e \uc0ac\uc774\uc758 \ub178\ub4dc\uc778 m\uc5d0 \ub300\ud574 s\uc5d0\uc11c m\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\uc640 m\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uc774\uc6a9, \uac00\ub2a5\ud55c \ubaa8\ub4e0 m\uc744 \uacc4\uc0b0 Dynamic programming (\ub3d9\uc801\uacc4\ud68d\ubc95) \ubb38\uc81c \uc720\ud615\uc774 \ub2e4\uc74c\uacfc \uac19\uc744 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. - \ubd80\ubd84 \ubc18\ubcf5 \ubb38\uc81c(Overlapping Subproblem) - \ucd5c\uc801 \ubd80\ubd84 \uad6c\uc870(Optimal Substructure) Memoization: \uacc4\uc0b0\ub41c \uac12\uc744 memo (caching) Top-down \ubc29\uc2dd : \uc7ac\uadc0\ud568\uc218 + memoization\uc73c\ub85c caching\ub41c \ubd80\ubd84 \uacb0\uacfc\ub97c \uc77d\uc5b4\uc640 \ud574\uacb0 Bottom-up \ubc29\uc2dd : \uc791\uc740 \ubb38\uc81c\ubd80\ud130 \ud574\uacb0\ud558\uc5ec \ud070 \ubb38\uc81c\ub85c \ubc18\ubcf5\uc9c4\ud589 // Top-down int memo[101]; memo[1] = 1; memo[2] = 1; int fib(int n) { if (memo[n] != 0) return memo[n]; memo[n] = fib(n-1) + fib(n-2); return memo[n]; } // Bottom-up int memo[101]; memo[1] = 1; memo[2] = 1; int fib(int n) { for(int i = 3; i <=n; i++){ memo[i] = memo[i-1] + memo[i-2]; } return memo[n]; } \uacbd\uc6b0\uc758 \uc218 & \uc870\ud569 & \uc21c\uc5f4 https://coding-factory.tistory.com/606 \ucd5c\ub2e8\uacbd\ub85c http://pds.joongang.co.kr/news/component/htmlphoto_mmdata/201107/25/htm_20110725003419l000l800-002.JPG","title":"Algorithm note"},{"location":"algorithm/#algorithm-note","text":"","title":"Algorithm note"},{"location":"algorithm/#basic-data-structure","text":"Stack Queue Tree Prefix Tree (Trie) PQ (Priority Queue), Max Heap, Min Heap DFS (Depth First Search) BFS (Breadth First Search) DFS with stack BFS with queue","title":"Basic Data Structure"},{"location":"algorithm/#shortest-path-algorithm","text":"Dijkstra Algorithm: \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9; O((V+E)lgV) priority queue (heap)\ub85c \uc131\ub2a5\ud5a5\uc0c1 \uac00\ub2a5 Bellman-Ford-Moore Algorithm: \uac00\uc911 \uc720\ud5a5 \uadf8\ub798\ud504(Weighted-Directed Graph)\uc5d0\uc11c \ub178\ub4dc \uc0ac\uc774\uc758 \ucd5c\ub2e8 \uacbd\ub85c \ud0d0\uc0c9; O(VE) \uc74c\uc218 \uac00\uc911\uce58 \uc0ac\uc6a9\uac00\ub2a5, negative-weight cycles \uc720\ubb34 \ud310\ub2e8 (\ubb34\ud55c \ubc1c\uc0b0\ud558\ubbc0\ub85c ...) \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 https://victorydntmd.tistory.com/104 Floyd Warshall Algorithm: \uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 (O(V * V * V)) \uc784\uc758\uc758 \ub178\ub4dc s\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud558\uae30 \uc704\ud574, s\uc640 e \uc0ac\uc774\uc758 \ub178\ub4dc\uc778 m\uc5d0 \ub300\ud574 s\uc5d0\uc11c m\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\uc640 m\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uc774\uc6a9, \uac00\ub2a5\ud55c \ubaa8\ub4e0 m\uc744 \uacc4\uc0b0","title":"Shortest Path Algorithm (\ucd5c\ub2e8 \uacbd\ub85c \uc54c\uace0\ub9ac\uc998)"},{"location":"algorithm/#dynamic-programming","text":"\ubb38\uc81c \uc720\ud615\uc774 \ub2e4\uc74c\uacfc \uac19\uc744 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. - \ubd80\ubd84 \ubc18\ubcf5 \ubb38\uc81c(Overlapping Subproblem) - \ucd5c\uc801 \ubd80\ubd84 \uad6c\uc870(Optimal Substructure) Memoization: \uacc4\uc0b0\ub41c \uac12\uc744 memo (caching) Top-down \ubc29\uc2dd : \uc7ac\uadc0\ud568\uc218 + memoization\uc73c\ub85c caching\ub41c \ubd80\ubd84 \uacb0\uacfc\ub97c \uc77d\uc5b4\uc640 \ud574\uacb0 Bottom-up \ubc29\uc2dd : \uc791\uc740 \ubb38\uc81c\ubd80\ud130 \ud574\uacb0\ud558\uc5ec \ud070 \ubb38\uc81c\ub85c \ubc18\ubcf5\uc9c4\ud589 // Top-down int memo[101]; memo[1] = 1; memo[2] = 1; int fib(int n) { if (memo[n] != 0) return memo[n]; memo[n] = fib(n-1) + fib(n-2); return memo[n]; } // Bottom-up int memo[101]; memo[1] = 1; memo[2] = 1; int fib(int n) { for(int i = 3; i <=n; i++){ memo[i] = memo[i-1] + memo[i-2]; } return memo[n]; }","title":"Dynamic programming (\ub3d9\uc801\uacc4\ud68d\ubc95)"},{"location":"algorithm/#_1","text":"https://coding-factory.tistory.com/606","title":"\uacbd\uc6b0\uc758 \uc218 &amp; \uc870\ud569 &amp; \uc21c\uc5f4"},{"location":"algorithm/#_2","text":"http://pds.joongang.co.kr/news/component/htmlphoto_mmdata/201107/25/htm_20110725003419l000l800-002.JPG","title":"\ucd5c\ub2e8\uacbd\ub85c"},{"location":"cpp/","text":"C++ study Fundamental case sensitive keywords alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, class, compl, const, constexpr, const_cast, continue, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq variables and types character types : char , char16_t , char32_t , wchar_t integer types (signed) : signed char , signed short int, signed int , signed long int, signed long long int integer types (unsigned) : unsigned char , unsigned short int, unsigned int, unsigned long int, unsigned long long int floating-point types : float , double , long double bolean types : bool void type : void (no storage) null pointer : decltype(nullptr) Type size definition for fixed-size type: <cstdint> or <limits> Declaration of variables int a, b; float c; // Variable initialization with declaration int x = 0; int x (0); // type identifier (initial_value); int x {0}; // type identifier {initial_value}; Type deduction: auto and decltype int foo = 0; auto bar = foo; // the same as: int bar = foo; decltype(foo) bar; // the same as: int bar; String Strings and null-terminated character sequences In any case, null-terminated character sequences and strings are easily transformed from one another: Null-terminated character sequences can be transformed into strings implicitly, and strings can be transformed into null-terminated character sequences by using either of string's member functions c_str or data : char myntcs[] = \"some text\"; string mystring = myntcs; // convert c-string to string cout << mystring; // printed as a library string cout << mystring.c_str(); // printed as a c-string Constants Constants are expressions with a fixed value. 75 // decimal 0113 // octal 0x4b // hexadecimal 75 // int 75u // unsigned int 75l // long 75ul // unsigned long 75lu // unsigned long 3.14159 // 3.14159 6.02e23 // 6.02 x 10^23 1.6e-19 // 1.6 x 10^-19 3.0 // 3.0 3.14159L // long double 6.02e23f // float // character and string literals 'z' 'p' \"Hello world\" \"How do you do?\" // escape code \"\\n\" // newline \"\\r\" // carriage return \"\\t\" // tab \"\\v\" // vertical tab \"\\b\" // backspace \"\\f\" // form feed (page feed) \"\\a\" // alert (beep) \"\\'\" // single quote (') \"\\\"\" // double quote (\") \"\\?\" // question mark (?) \"\\\\\" // backslash (\\) \"\\x20\" // hexadecimal digits character \"\\x4A\" \"this forms\" \"a single\" \" string \" \"of characters\" // equivalent to \"this formsa single string of characters\" // long string literals using backslash (\\) x = \"string expressed in \\ two lines\" // x = \"string expressed in two lines\" // different character type literals using prefix (not suffixes above) // u char16_t // U char32_t // L wchar_t // u8 // UTF-8 R\"(string with \\backslash)\" // raw string, literal format: R(VALUE) R\"&%$(string with \\backslash)&%$\" // = \"string with \\\\backslash\" // other literals bool foo = true; bool bar = false; int* p = nullptr; // naming to a constant value const double pi = 3.1415926; const char tab = '\\t'; // Preprocessor definitions (#define) - another mechanism for name constant #define PI 3.14159 #define NEWLINE '\\n' Casting int i; float f = 3.14; i = (int) f; i = int (f); sizeof x = sizeof (char); Table of operation precedence Basic input/output cin : standard input stream cout : standard output stream cerr : standard error (output) stream clog : standard logging (output) stream stringstream : string stream (make a string as a stream) Read a line with string stream // stringstreams #include <iostream> #include <string> #include <sstream> using namespace std; int main () { string mystr; float price=0; int quantity=0; cout << \"Enter price: \"; getline (cin,mystr); stringstream(mystr) >> price; cout << \"Enter quantity: \"; getline (cin,mystr); stringstream(mystr) >> quantity; cout << \"Total price: \" << price*quantity << endl; return 0; } Range-based loop The for-loop has another syntax, which is used exclusively with ranges: for ( declaration : range ) statement; // range-based for loop #include <iostream> #include <string> using namespace std; int main () { string str {\"Hello!\"}; for (char c : str) { cout << \"[\" << c << \"]\"; } cout << '\\n'; } // output: [H][e][l][l][o][!] Range based loops usually also make use of type deduction for the type of the elements with auto . Typically, the range-based loop above can also be written as: for (auto c : str) cout << \"[\" << c << \"]\"; Here, the type of c is automatically deduced as the type of the elements in str. The return value of main() 0 or EXIT_SUCCESS : The program was successful (same as above). This value is defined in header <cstdlib> . EXIT_FAILURE : The program failed. This value is defined in header <cstdlib> . Argument pass by value and by reference // passing parameters by reference #include <iostream> using namespace std; void duplicate (int& a, int& b, int& c) { a*=2; b*=2; c*=2; } int main () { int x=1, y=3, z=7; duplicate (x, y, z); cout << \"x=\" << x << \", y=\" << y << \", z=\" << z; return 0; } Efficiency considerations and const references string concatenate (const string& a, const string& b) { return a+b; } By qualifying them as const, the function is forbidden to modify the values of neither a nor b, but can actually access their values as references (aliases of the arguments), without having to make actual copies of the strings. Therefore, const references provide functionality similar to passing arguments by value, but with an increased efficiency for parameters of large types. That is why they are extremely popular in C++ for arguments of compound types. Note though, that for most fundamental types, there is no noticeable difference in efficiency, and in some cases, const references may even be less efficient! inline function Preceding a function declaration with the inline specifier informs the compiler that inline expansion is preferred over the usual function call mechanism for a specific function. For example, the concatenate function above may be declared inline as: inline string concatenate (const string& a, const string& b) { return a+b; } function default value int divide (int a, int b=2) { int r; r=a/b; return (r); } int main () { cout << divide (12) << '\\n'; cout << divide (20,4) << '\\n'; return 0; } C++ Generalization (Overloads and templates) overload The same function definition with different parameter types. // overloading functions #include <iostream> using namespace std; int operate (int a, int b) { return (a*b); } double operate (double a, double b) { return (a/b); } int main () { int x=5,y=2; double n=5.0,m=2.0; cout << operate (x,y) << '\\n'; cout << operate (n,m) << '\\n'; return 0; } template <template-parameters> function-declaration The template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the class or typename keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic sum function could be defined as: // function template #include <iostream> using namespace std; template <class T> T sum (T a, T b) { T result; result = a + b; return result; } int main () { int i=5, j=6, k; double f=2.0, g=0.5, h; k=sum<int>(i,j); h=sum<double>(f,g); // possible to skip angle brackets // k = sum (i,j); // h = sum (f,g); cout << k << '\\n'; cout << h << '\\n'; return 0; } Non-type template arguments (just support the constant expressions) // template arguments #include <iostream> using namespace std; template <class T, int N> T fixed_multiply (T val) { return val * N; } int main() { std::cout << fixed_multiply<int,2>(10) << '\\n'; std::cout << fixed_multiply<int,3>(10) << '\\n'; } nampespace (Name visibility) // namespaces #include <iostream> using namespace std; namespace foo { int value() { return 5; } } namespace bar { const double pi = 3.1416; double value() { return 2*pi; } } int main () { cout << foo::value() << '\\n'; cout << bar::value() << '\\n'; cout << bar::pi << '\\n'; return 0; } // Namespaces can be split: // Two segments of a code can be declared in the same namespace: namespace foo { int a; } namespace bar { int b; } namespace foo { int c; } Compound data types Pointer http://www.cplusplus.com/doc/tutorial/pointers/ Address-of operator ( & ) Dereference operator ( * ) Pointers and const Pointers can be used to access a variable by its address, and this access may include modifying the value pointed. But it is also possible to declare pointers that can access the pointed value to read it, but not to modify it. For this, it is enough with qualifying the type pointed to by the pointer as const . For example: int x; int y = 10; const int * p = &y; x = *p; // ok: reading p *p = x; // error: modifying p, which is const-qualified int x; int * p1 = &x; // non-const pointer to non-const int const int * p2 = &x; // non-const pointer to const int int * const p3 = &x; // const pointer to non-const int const int * const p4 = &x; // const pointer to const int // To add a little bit more confusion to the syntax of const with pointers, // the const qualifier can either precede or follow the pointed type, // with the exact same meaning: const int * p2a = &x; // non-const pointer to const int int const * p2b = &x; // also non-const pointer to const int NULL pointer int * p = 0; int * q = nullptr; int * r = NULL; Pointers to functions int (* func_name)(type,type,...); Dynamic memory int * foo; foo = new int [5]; // Access: foo[1] or *(foo+1) // allocation foo = new int [5]; // if allocation fails, an exception is thrown foo = new (nothrow) int [5]; // return null without bad_alloc exception or terminating the program if (foo == nullptr) { // error assigning memory. Take measures. } // deletion delete pointer; delete[] pointer; Data Structures Skip... Type aliases typedef char C; typedef unsigned int WORD; typedef char * pChar; typedef char field [50]; C mychar, anotherchar, *ptc1; WORD myword; pChar ptc2; field name; // More recently, a second syntax to define type aliases was introduced in the C++ language: // using new_type_name = existing_type ; // For example, the same type aliases as above could be defined as: using C = char; using WORD = unsigned int; using pChar = char *; using field = char [50]; Union type Skip! Enumerated types (enum) // ## Enumerated types mapping to convertible int. enum colors_t {black=1, blue, green, cyan, red, purple, yellow, white}; colors_t mycolor; mycolor = blue; if (mycolor == green) mycolor = red; // ## Enumerated types with enum class enum class Colors {black, blue, green, cyan, red, purple, yellow, white}; Colors mycolor; mycolor = Colors::blue; if (mycolor == Colors::green) mycolor = Colors::red; class access_specifier: private , public or protected private members of a class are accessible only from within other members of the same class (or from their \" friends \"). protected members are accessible from other members of the same class (or from their \" friends \"), but also from members of their derived classes. Finally, public members are accessible from anywhere where the object is visible. // classes example #include <iostream> using namespace std; class Rectangle { int width, height; public: void set_values (int,int); int area() {return width*height;} }; void Rectangle::set_values (int x, int y) { width = x; height = y; } int main () { Rectangle rect; rect.set_values (3,4); cout << \"area: \" << rect.area(); return 0; } Member initialization in constructors class Rectangle { int width,height; public: Rectangle (); Rectangle(int,int); int area() {return width*height;} }; Rectangle::Rectangle () { width = 5; height = 5; } Rectangle::Rectangle (int x, int y) { width=x; height=y; } Rectangle::Rectangle (int x, int y) : width(x) { height=y; } Rectangle::Rectangle (int x, int y) : width(x), height(y) { } Uniform initialization class_name object_name = initialization_value; class_name object_name { value, value, value, ... } class_name object_name(value, value, value, ... ) // classes and uniform initialization #include <iostream> using namespace std; class Circle { double radius; public: Circle(double r) { radius = r; } double circum() {return 2*radius*3.14159265;} }; int main () { Circle foo (10.0); // functional form Circle bar = 20.0; // assignment init. Circle baz {30.0}; // uniform init. Circle qux = {40.0}; // POD-like cout << \"foo's circumference: \" << foo.circum() << '\\n'; return 0; } Overloading operators Overloadable operators + - * / = < > += -= *= /= << >> <<= >>= == != <= >= ++ -- % & ^ ! | ~ &= ^= |= && || %= [] () , ->* -> new delete new[] delete[] async and future Calls fn (with args as arguments) at some point, returning without waiting for the execution of fn to complete. http://www.cplusplus.com/reference/future/async/?kw=async #include <cstdio> #include <future> // std::async, std::future using namespace std; int fun() { for (int i = 1; i <= 10; i++) { printf(\"fun[%d]\\n\", i); } return 200; } int main() { //auto fut = async(fun); auto fut = async(launch::async, fun); // deferred until .get() or .wait() //auto fut = async(launch::deferred, fun); for (int i = 1; i <= 30; i++) { printf(\"main[%d]\\t\", i); } printf(\"\\n\"); int result = fut.get(); printf(\"result : %d\\n\", result); return 0; }","title":"C++ study"},{"location":"cpp/#c-study","text":"","title":"C++ study"},{"location":"cpp/#fundamental","text":"case sensitive","title":"Fundamental"},{"location":"cpp/#keywords","text":"alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, class, compl, const, constexpr, const_cast, continue, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq","title":"keywords"},{"location":"cpp/#variables-and-types","text":"character types : char , char16_t , char32_t , wchar_t integer types (signed) : signed char , signed short int, signed int , signed long int, signed long long int integer types (unsigned) : unsigned char , unsigned short int, unsigned int, unsigned long int, unsigned long long int floating-point types : float , double , long double bolean types : bool void type : void (no storage) null pointer : decltype(nullptr)","title":"variables and types"},{"location":"cpp/#type-size","text":"definition for fixed-size type: <cstdint> or <limits>","title":"Type size"},{"location":"cpp/#declaration-of-variables","text":"int a, b; float c; // Variable initialization with declaration int x = 0; int x (0); // type identifier (initial_value); int x {0}; // type identifier {initial_value};","title":"Declaration of variables"},{"location":"cpp/#type-deduction-auto-and-decltype","text":"int foo = 0; auto bar = foo; // the same as: int bar = foo; decltype(foo) bar; // the same as: int bar;","title":"Type deduction: auto and decltype"},{"location":"cpp/#string","text":"","title":"String"},{"location":"cpp/#strings-and-null-terminated-character-sequences","text":"In any case, null-terminated character sequences and strings are easily transformed from one another: Null-terminated character sequences can be transformed into strings implicitly, and strings can be transformed into null-terminated character sequences by using either of string's member functions c_str or data : char myntcs[] = \"some text\"; string mystring = myntcs; // convert c-string to string cout << mystring; // printed as a library string cout << mystring.c_str(); // printed as a c-string","title":"Strings and null-terminated character sequences"},{"location":"cpp/#constants","text":"Constants are expressions with a fixed value. 75 // decimal 0113 // octal 0x4b // hexadecimal 75 // int 75u // unsigned int 75l // long 75ul // unsigned long 75lu // unsigned long 3.14159 // 3.14159 6.02e23 // 6.02 x 10^23 1.6e-19 // 1.6 x 10^-19 3.0 // 3.0 3.14159L // long double 6.02e23f // float // character and string literals 'z' 'p' \"Hello world\" \"How do you do?\" // escape code \"\\n\" // newline \"\\r\" // carriage return \"\\t\" // tab \"\\v\" // vertical tab \"\\b\" // backspace \"\\f\" // form feed (page feed) \"\\a\" // alert (beep) \"\\'\" // single quote (') \"\\\"\" // double quote (\") \"\\?\" // question mark (?) \"\\\\\" // backslash (\\) \"\\x20\" // hexadecimal digits character \"\\x4A\" \"this forms\" \"a single\" \" string \" \"of characters\" // equivalent to \"this formsa single string of characters\" // long string literals using backslash (\\) x = \"string expressed in \\ two lines\" // x = \"string expressed in two lines\" // different character type literals using prefix (not suffixes above) // u char16_t // U char32_t // L wchar_t // u8 // UTF-8 R\"(string with \\backslash)\" // raw string, literal format: R(VALUE) R\"&%$(string with \\backslash)&%$\" // = \"string with \\\\backslash\" // other literals bool foo = true; bool bar = false; int* p = nullptr; // naming to a constant value const double pi = 3.1415926; const char tab = '\\t'; // Preprocessor definitions (#define) - another mechanism for name constant #define PI 3.14159 #define NEWLINE '\\n'","title":"Constants"},{"location":"cpp/#casting","text":"int i; float f = 3.14; i = (int) f; i = int (f);","title":"Casting"},{"location":"cpp/#sizeof","text":"x = sizeof (char);","title":"sizeof"},{"location":"cpp/#table-of-operation-precedence","text":"","title":"Table of operation precedence"},{"location":"cpp/#basic-inputoutput","text":"cin : standard input stream cout : standard output stream cerr : standard error (output) stream clog : standard logging (output) stream stringstream : string stream (make a string as a stream)","title":"Basic input/output"},{"location":"cpp/#read-a-line-with-string-stream","text":"// stringstreams #include <iostream> #include <string> #include <sstream> using namespace std; int main () { string mystr; float price=0; int quantity=0; cout << \"Enter price: \"; getline (cin,mystr); stringstream(mystr) >> price; cout << \"Enter quantity: \"; getline (cin,mystr); stringstream(mystr) >> quantity; cout << \"Total price: \" << price*quantity << endl; return 0; }","title":"Read a line with string stream"},{"location":"cpp/#range-based-loop","text":"The for-loop has another syntax, which is used exclusively with ranges: for ( declaration : range ) statement; // range-based for loop #include <iostream> #include <string> using namespace std; int main () { string str {\"Hello!\"}; for (char c : str) { cout << \"[\" << c << \"]\"; } cout << '\\n'; } // output: [H][e][l][l][o][!] Range based loops usually also make use of type deduction for the type of the elements with auto . Typically, the range-based loop above can also be written as: for (auto c : str) cout << \"[\" << c << \"]\"; Here, the type of c is automatically deduced as the type of the elements in str.","title":"Range-based loop"},{"location":"cpp/#the-return-value-of-main","text":"0 or EXIT_SUCCESS : The program was successful (same as above). This value is defined in header <cstdlib> . EXIT_FAILURE : The program failed. This value is defined in header <cstdlib> .","title":"The return value of main()"},{"location":"cpp/#argument-pass-by-value-and-by-reference","text":"// passing parameters by reference #include <iostream> using namespace std; void duplicate (int& a, int& b, int& c) { a*=2; b*=2; c*=2; } int main () { int x=1, y=3, z=7; duplicate (x, y, z); cout << \"x=\" << x << \", y=\" << y << \", z=\" << z; return 0; }","title":"Argument pass by value and by reference"},{"location":"cpp/#efficiency-considerations-and-const-references","text":"string concatenate (const string& a, const string& b) { return a+b; } By qualifying them as const, the function is forbidden to modify the values of neither a nor b, but can actually access their values as references (aliases of the arguments), without having to make actual copies of the strings. Therefore, const references provide functionality similar to passing arguments by value, but with an increased efficiency for parameters of large types. That is why they are extremely popular in C++ for arguments of compound types. Note though, that for most fundamental types, there is no noticeable difference in efficiency, and in some cases, const references may even be less efficient!","title":"Efficiency considerations and const references"},{"location":"cpp/#inline-function","text":"Preceding a function declaration with the inline specifier informs the compiler that inline expansion is preferred over the usual function call mechanism for a specific function. For example, the concatenate function above may be declared inline as: inline string concatenate (const string& a, const string& b) { return a+b; }","title":"inline function"},{"location":"cpp/#function-default-value","text":"int divide (int a, int b=2) { int r; r=a/b; return (r); } int main () { cout << divide (12) << '\\n'; cout << divide (20,4) << '\\n'; return 0; }","title":"function default value"},{"location":"cpp/#c-generalization-overloads-and-templates","text":"overload The same function definition with different parameter types. // overloading functions #include <iostream> using namespace std; int operate (int a, int b) { return (a*b); } double operate (double a, double b) { return (a/b); } int main () { int x=5,y=2; double n=5.0,m=2.0; cout << operate (x,y) << '\\n'; cout << operate (n,m) << '\\n'; return 0; } template <template-parameters> function-declaration The template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the class or typename keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic sum function could be defined as: // function template #include <iostream> using namespace std; template <class T> T sum (T a, T b) { T result; result = a + b; return result; } int main () { int i=5, j=6, k; double f=2.0, g=0.5, h; k=sum<int>(i,j); h=sum<double>(f,g); // possible to skip angle brackets // k = sum (i,j); // h = sum (f,g); cout << k << '\\n'; cout << h << '\\n'; return 0; } Non-type template arguments (just support the constant expressions) // template arguments #include <iostream> using namespace std; template <class T, int N> T fixed_multiply (T val) { return val * N; } int main() { std::cout << fixed_multiply<int,2>(10) << '\\n'; std::cout << fixed_multiply<int,3>(10) << '\\n'; }","title":"C++ Generalization (Overloads and templates)"},{"location":"cpp/#nampespace-name-visibility","text":"// namespaces #include <iostream> using namespace std; namespace foo { int value() { return 5; } } namespace bar { const double pi = 3.1416; double value() { return 2*pi; } } int main () { cout << foo::value() << '\\n'; cout << bar::value() << '\\n'; cout << bar::pi << '\\n'; return 0; } // Namespaces can be split: // Two segments of a code can be declared in the same namespace: namespace foo { int a; } namespace bar { int b; } namespace foo { int c; }","title":"nampespace (Name visibility)"},{"location":"cpp/#compound-data-types","text":"","title":"Compound data types"},{"location":"cpp/#pointer","text":"http://www.cplusplus.com/doc/tutorial/pointers/ Address-of operator ( & ) Dereference operator ( * )","title":"Pointer"},{"location":"cpp/#pointers-and-const","text":"Pointers can be used to access a variable by its address, and this access may include modifying the value pointed. But it is also possible to declare pointers that can access the pointed value to read it, but not to modify it. For this, it is enough with qualifying the type pointed to by the pointer as const . For example: int x; int y = 10; const int * p = &y; x = *p; // ok: reading p *p = x; // error: modifying p, which is const-qualified int x; int * p1 = &x; // non-const pointer to non-const int const int * p2 = &x; // non-const pointer to const int int * const p3 = &x; // const pointer to non-const int const int * const p4 = &x; // const pointer to const int // To add a little bit more confusion to the syntax of const with pointers, // the const qualifier can either precede or follow the pointed type, // with the exact same meaning: const int * p2a = &x; // non-const pointer to const int int const * p2b = &x; // also non-const pointer to const int","title":"Pointers and const"},{"location":"cpp/#null-pointer","text":"int * p = 0; int * q = nullptr; int * r = NULL;","title":"NULL pointer"},{"location":"cpp/#pointers-to-functions","text":"int (* func_name)(type,type,...);","title":"Pointers to functions"},{"location":"cpp/#dynamic-memory","text":"int * foo; foo = new int [5]; // Access: foo[1] or *(foo+1) // allocation foo = new int [5]; // if allocation fails, an exception is thrown foo = new (nothrow) int [5]; // return null without bad_alloc exception or terminating the program if (foo == nullptr) { // error assigning memory. Take measures. } // deletion delete pointer; delete[] pointer;","title":"Dynamic memory"},{"location":"cpp/#data-structures","text":"Skip...","title":"Data Structures"},{"location":"cpp/#type-aliases","text":"typedef char C; typedef unsigned int WORD; typedef char * pChar; typedef char field [50]; C mychar, anotherchar, *ptc1; WORD myword; pChar ptc2; field name; // More recently, a second syntax to define type aliases was introduced in the C++ language: // using new_type_name = existing_type ; // For example, the same type aliases as above could be defined as: using C = char; using WORD = unsigned int; using pChar = char *; using field = char [50];","title":"Type aliases"},{"location":"cpp/#union-type","text":"Skip!","title":"Union type"},{"location":"cpp/#enumerated-types-enum","text":"// ## Enumerated types mapping to convertible int. enum colors_t {black=1, blue, green, cyan, red, purple, yellow, white}; colors_t mycolor; mycolor = blue; if (mycolor == green) mycolor = red; // ## Enumerated types with enum class enum class Colors {black, blue, green, cyan, red, purple, yellow, white}; Colors mycolor; mycolor = Colors::blue; if (mycolor == Colors::green) mycolor = Colors::red;","title":"Enumerated types (enum)"},{"location":"cpp/#class","text":"access_specifier: private , public or protected private members of a class are accessible only from within other members of the same class (or from their \" friends \"). protected members are accessible from other members of the same class (or from their \" friends \"), but also from members of their derived classes. Finally, public members are accessible from anywhere where the object is visible. // classes example #include <iostream> using namespace std; class Rectangle { int width, height; public: void set_values (int,int); int area() {return width*height;} }; void Rectangle::set_values (int x, int y) { width = x; height = y; } int main () { Rectangle rect; rect.set_values (3,4); cout << \"area: \" << rect.area(); return 0; }","title":"class"},{"location":"cpp/#member-initialization-in-constructors","text":"class Rectangle { int width,height; public: Rectangle (); Rectangle(int,int); int area() {return width*height;} }; Rectangle::Rectangle () { width = 5; height = 5; } Rectangle::Rectangle (int x, int y) { width=x; height=y; } Rectangle::Rectangle (int x, int y) : width(x) { height=y; } Rectangle::Rectangle (int x, int y) : width(x), height(y) { }","title":"Member initialization in constructors"},{"location":"cpp/#uniform-initialization","text":"class_name object_name = initialization_value; class_name object_name { value, value, value, ... } class_name object_name(value, value, value, ... ) // classes and uniform initialization #include <iostream> using namespace std; class Circle { double radius; public: Circle(double r) { radius = r; } double circum() {return 2*radius*3.14159265;} }; int main () { Circle foo (10.0); // functional form Circle bar = 20.0; // assignment init. Circle baz {30.0}; // uniform init. Circle qux = {40.0}; // POD-like cout << \"foo's circumference: \" << foo.circum() << '\\n'; return 0; }","title":"Uniform initialization"},{"location":"cpp/#overloading-operators","text":"","title":"Overloading operators"},{"location":"cpp/#overloadable-operators","text":"+ - * / = < > += -= *= /= << >> <<= >>= == != <= >= ++ -- % & ^ ! | ~ &= ^= |= && || %= [] () , ->* -> new delete new[] delete[]","title":"Overloadable operators"},{"location":"cpp/#async-and-future","text":"Calls fn (with args as arguments) at some point, returning without waiting for the execution of fn to complete. http://www.cplusplus.com/reference/future/async/?kw=async #include <cstdio> #include <future> // std::async, std::future using namespace std; int fun() { for (int i = 1; i <= 10; i++) { printf(\"fun[%d]\\n\", i); } return 200; } int main() { //auto fut = async(fun); auto fut = async(launch::async, fun); // deferred until .get() or .wait() //auto fut = async(launch::deferred, fun); for (int i = 1; i <= 30; i++) { printf(\"main[%d]\\t\", i); } printf(\"\\n\"); int result = fut.get(); printf(\"result : %d\\n\", result); return 0; }","title":"async and future"},{"location":"go/","text":"Go handbook Go handbook commands environment Build, install and execute a Go executable binary Building Go Executables for Multiple Platforms Package import other packages Go Syntax type syntax variables constant Comment control type conversion array, slice, map make() and new() function Pointers Structure (field and method) Anonymous fields in Go Structure Interface (collections of methods) empty interface Errors Concurrency (goroutine) Channel Channel Buffering Channel Synchronization (Waitgroup) Select (for Channel) context cgo Command-Line empty structure structTag reflection Type assertions Type switches cgo (golang with C) go with gRPC Useful commands Useful functions panic() and recover() os.Exit() Useful documents gRPC with simple password authentication vscode with golang Go Fuzzing commands Commands of golang to use go env : show environment variables for golang. go build : <SOURCE> : Compile <SOURCE> and place it to $PWD go install : <SOURCE> : Compile and Install <SOURCE> to $GOBIN . environment $GOROOT : The path of Go binary distribution (default: /usr/local/go ) $GOPATH : The path to Go packages to install and build $GOBIN : The path to Go executable binaries built #!/bin/bash export GO111MODULE=off export GOPATH=$HOME/go export GOBIN=$GOPATH/bin Build, install and execute a Go executable binary cd go-project source env.sh go install src/hello/hello.go hello Building Go Executables for Multiple Platforms CFLAGS=\"-I$INCLUDE\" CPPFLAGS=\"-I$INCLUDE\" CC=$TARGET_ARCHITECTURE-gcc GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build Package Every Go program is made up of packages. Programs start running in package main. import other packages import { \"fmt\" \"math/rand\" } Go Syntax type syntax \ud0c0\uc785 \ud6c4\uc704 \uc815\uc758: \ubcc0\uc218 \uc120\uc5b8\uc2dc type\uc740 \ub4a4\uc5d0 \uba85\uc2dc Go\ub294 \uc815\uc801 \ud0c0\uc785 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4 // integer types uint8, uint16, uint32, uint64, int8, int16, int32, int64 // floating point number // 0/0 = NaN\uc73c\ub85c \ud45c\ud604 float32, float64 // complex number complex64, complex128 x int p *int // pointer a [3]int // array // function declaration func main(argc int, argv []string) int // function variable f func(func(int,int) int, int) int // function variable (return a function) f func(func(int,int) int, int) func(int, int) int // \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uad6c\ud604/ \ud560\ub2f9 sum := func(a, b int) int { return a+b } (3, 4) variables var keyword \uc0ac\uc6a9 := \ucd95\uc57d\ud615 \uc874\uc7ac ( var \uc0dd\ub7b5) namespace: global vs local var x string x = \"hello world\" var y float32 = 10.0 // implicit variable declaration and value assignment z := \"goodbye world\" var ( a = 1 b = 2 c = 10 ) constant const keyword \uc0ac\uc6a9 code \ub0b4\uc5d0\uc11c \uac12 \ubcc0\uacbd \ubd88\uac00 const x string = \"Hello World\" x = \"Some other string\" // error // e.g. math.Pi // const variable Comment // line comment /* block comment */ control func control() { // loop statement i := 1 for i <= 10 { i = i + 1 } for i := 1; i <= 10; i++ { } // array loop using range keyword x := [5]float64{ 98, 93, 77, 82, 83 } for i, value := range x { } // array loop without index for _, value := range x { } // if else statement if i % 2 == 0 { // even } else { // odd } // if statement with initialization if num := 9; num < 0 { } else if num < 10 { } else { } // if statement with map (dict or hash) elements := make(map[string]string) elements[\"H\"] = \"Hydrogen\" if name, ok := elements[\"Un\"]; ok { fmt.Println(name, ok) } // switch statement switch i { case 0: fmt.Println(\"zero\") case 1: fmt.Println(\"one\") case 2: fmt.Println(\"two\") case 3: fmt.Println(\"three\") default: fmt.Println(\"unknown\") } } type conversion var x int = 10 float64(x) array, slice, map // array var x [5]int x[0] = 10 x[1] = 20 x[2] = 30 x[3] = 40 x[4] = 50 // [10 20 30 40 50] x := [5]float64{ 98, 93, 77, 82, 83 } // slice (max length\uc774\uc0c1 \uc99d\uac00 x) var x []float64 x := make([]float64, 5) // create a slice with 5 length using make() x := make([]float64, 5, 10) // create a slice with 5 length. 10 is the length of base array. // arr: array, x: slice for arr slicing arr := []float64{1,2,3,4,5} x := arr[0:5] arr[:] == arr[0:len(arr)] // true arr[:5] == arr[0:5] // true // slice append slice1 := []int{1,2,3} // [1,2,3] slice2 := append(slice1, 4, 5) // [1,2,3,4,5] fmt.Println(slice1, slice2) // slice copy slice1 := []int{1,2,3} slice2 := make([]int, 2) copy(slice2, slice1) // [1,2,3] fmt.Println(slice1, slice2) // [1,2] // map (key value pair) func main() { // var x string // x = \"hello world\" // y := \"goodbye world\" // fmt.Println(x) // fmt.Println(y) // fmt.Println(x == \"hello\") // fmt.Println(x == (\"hello \" + \"world\")) // map variable declaration & initialization var x map[string]int x = map[string]int{ \"a\": 1, } x[\"key\"] = 10 fmt.Println(x) elements := map[string]string{ \"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\", } elements[\"key10\"] = \"value10\" delete(elements, \"key1\") fmt.Println(elements) name, ok := elements[\"key2\"] fmt.Println(name, ok) if name, ok := elements[\"key1\"]; ok { fmt.Println(name, ok) } y := make(map[string]string) y[\"key1000\"] = \"1000\" fmt.Println(y) } make() and new() make() is used for follows. Create a channel Create a map with space preallocated Create a slice with space preallocated or with len != cap It's a little harder to justify new() . The main thing it makes easier is creating pointers to non-composite types. The two functions below are equivalent. One's just a little more concise: func newInt1() *int { return new(int) } func newInt2() *int { var i int return &i } function func add(x int, y int) int { return x + y } // named return variables func f2() (r int) { r = 1 return } // multiple return variables func f() (int, int) { return 5, 6 } func main() { x, y := f() } // \uac00\ubcc0\ud568\uc218 Variadic Functions (print\ud568\uc218\ub3c4 \uac00\ubcc0\ud568\uc218) // func Println(a ...interface{}) (n int, err error) func add(args ...int) int { total := 0 for _, v := range args { total += v } return total } func main() { fmt.Println(add(1,2,3)) } // ...\ub97c \uc774\uc6a9\ud574 slice\ub97c argument\ub85c \uc804\ub2ec func main() { xs := []int{1,2,3} fmt.Println(add(xs...)) } // Closures (a function in a function) func intSeq() func() int { i := 0 return func() int { i++ return i } } func main() { nextInt := intSeq() fmt.Println(nextInt()) fmt.Println(nextInt()) fmt.Println(nextInt()) newInts := intSeq() fmt.Println(newInts()) } // Recursive function func factorial(x uint) uint { if x == 0 { return 1 } return x * factorial(x-1) } // defer (invoked at the end of the block) function func first() { fmt.Println(\"1st\") } func second() { fmt.Println(\"2nd\") } func main() { defer second() first() } // \uc77c\ubc18\uc801\uc73c\ub85c \ud568\uc218 \uc885\ub8cc\uc2dc \uc790\uc6d0\uc744 \ud574\uc81c\ud560 \ub54c \uc0ac\uc6a9 // runtime panic\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 \uc2e4\ud589 f, _ := os.Open(filename) defer f.Close() // panic and recover functions // recover\ub294 defer\uc640 \uc0ac\uc6a9\ud574\uc57c \ud568. func main() { defer func() { // recover function str := recover() fmt.Println(\"recovery: \", str) }() panic(\"Panic !! string\") } Pointers go\ub294 garbage collection\uc744 \uc9c0\uc6d0\ud558\ubbc0\ub85c point \ud574\uc81c (free)\uac00 \ud544\uc694\uc5c6\uc74c. func zero(xPtr *int) { *xPtr = 0 } func main() { x := 5 zero(&x) fmt.Println(x) // x\ub294 0 } // point using new() func one(xPtr *int) { *xPtr = 1 } func main() { xPtr := new(int) one(xPtr) fmt.Println(*xPtr) // x\ub294 1 } Structure (field and method) Field\uac00 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 public\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5) Field\uac00 \uc18c\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 private\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \ubd88\uac00\ub2a5) \uc544\ub798 \uc608\uc81c\uc5d0\uc11c X, Y, Z\ub294 \uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5 // Clircle blarara o type Circle struct { x float64 y float64 r float64 X float64 Y float64 R float64 } // call by value function func circleArea(c Circle) float64 { return math.Pi * (c.r * c.r) } // call by reference function func circleArea2(c *Circle) float64 { return math.Pi * (c.r * c.r) } // method (define a pointer receiver in parenthesis) func (c *Circle) area() float64 { return math.Pi * c.r * c.r } // method (define a value receiver in parenthesis) func (c Circle) area2() float64 { return math.Pi * c.r * c.r } func main() { var a Circle fmt.Println(a) var b Circle = Circle{x: 1, y: 2, r: 3} fmt.Println(b) c := Circle{10, 20, 30} fmt.Println(c) // Circle pointer d := new(Circle) d.x = 20 d.y = 30 d.r = 10 fmt.Println(d) // call by value (copy Circle argument) fmt.Println(circleArea(c)) fmt.Println(circleArea(*d)) // call by reference fmt.Println(circleArea2(d)) // method fmt.Println(\"method:\", b.area()) } Anonymous fields in Go Structure Type\uc774\ub984\uc73c\ub85c field\uac00 \uc0dd\uc131\ub428 Anonymous field\ub85c \uc815\uc758\ub41c structure\uc758 field \ubc0f method\ub97c \uc120\uc5b8\ub41c structure\uac00 \uc0c1\uc18d\ud568. type Kitchen struct { numOfPlates int } type House struct { Kitchen // anonymous field numOfRooms int } func main() { //to initialize you have to use composed type name. h := House{Kitchen{10}, 3} //numOfRooms is a field of House fmt.Println(\"House h has this many rooms:\", h.numOfRooms) //numOfPlates is a field of anonymous field Kitchen, so it can be referred to like a field of House fmt.Println(\"House h has this many plates:\", h.numOfPlates) //we can refer to the embedded struct in its entirety by referring to the name of the struct type fmt.Println(\"The Kitchen contents of this house are:\", h.Kitchen) } Interface (collections of methods) Interfaces are named collections of method signatures. \uad6c\uc870\uccb4(struct)\uac00 \ud544\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4\ub77c\uba74, interface\ub294 \uba54\uc11c\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4 interface\ub294 \ud0c0\uc785(type)\uc774 \uad6c\ud604\ud574\uc57c \ud558\ub294 \uba54\uc11c\ub4dc \uc6d0\ud615(prototype)\ub4e4\uc744 \uc815\uc758\ud568. type\uc758 interface\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \ub2e8\uc21c\ud788 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uac16\ub294 \ubaa8\ub4e0 \uba54\uc11c\ub4dc\ub4e4\uc744 \uad6c\ud604\ud558\uba74 \ub428. Interface \ubcc0\uc218\ub294 1) interface type\uacfc 2) \uc2e4\uc81c \uac00\ub9ac\ud0a4\ub294 data \uc8fc\uc18c\ub85c \uc774\ub8e8\uc5b4\uc9d0 // Shape interface type definition type Shape interface { area() float64 perimeter() float64 } //Rect \uc815\uc758 type Rect struct { width, height float64 } //Circle \uc815\uc758 type Circle struct { radius float64 } //Rect \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604 func (r Rect) area() float64 { return r.width * r.height } func (r Rect) perimeter() float64 { return 2 * (r.width + r.height) } //Circle \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604 func (c Circle) area() float64 { return math.Pi * c.radius * c.radius } func (c Circle) perimeter() float64 { return 2 * math.Pi * c.radius } func main() { r := Rect{10., 20.} c := Circle{10} showArea(r, c) } func showArea(shapes ...Shape) { for _, s := range shapes { a := s.area() //\uc778\ud130\ud398\uc774\uc2a4 \uba54\uc11c\ub4dc \ud638\ucd9c println(a) } } // interface field in structure // [FIXME] how to ? // example 2. type Abser interface { Abs() float64 } func main() { var a Abser f := MyFloat(-math.Sqrt2) v := Vertex{3, 4} a = f // a MyFloat implements Abser fmt.Println(a.Abs()) a = &v // a *Vertex implements Abser fmt.Println(a.Abs()) } type MyFloat float64 func (f MyFloat) Abs() float64 { if f < 0 { return float64(-f) } return float64(f) } type Vertex struct { X, Y float64 } func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } empty interface \uc5b4\ub5a0\ud55c Type\ub3c4 \ub2f4\uc744 \uc218 interface func Marshal(v interface{}) ([]byte, error); func Println(a ...interface{}) (n int, err error); func main() { var i interface{} describe(i) i = 42 describe(i) i = \"hello\" describe(i) } func describe(i interface{}) { fmt.Printf(\"(%v, %T)\\n\", i, i) } // (<nil>, <nil>) // (42, int) // (hello, string) Errors By convention, errors are the last return value and have type error, a built-in interface. errors.New constructs a basic error value with the given error message. A nil value in the error position indicates that there was no error . func f1(arg int) (int, error) { if arg == 42 { return -1, errors.New(\"can't work with 42\") } return arg + 3, nil } func main() { for _, i := range []int{7, 42} { if r, e := f1(i); e != nil { fmt.Println(\"f1 failed:\", e) } else { fmt.Println(\"f1 worked:\", r) } } } Concurrency (goroutine) // goroutine to support concurrency package main import ( \"fmt\" \"time\" ) func f(from string) { for i := 0; i < 3; i++ { fmt.Println(from, \":\", i) } } func main() { f(\"direct\") go f(\"goroutine\") go func(msg string) { fmt.Println(msg) }(\"going\") time.Sleep(time.Second) fmt.Println(\"done\") } Channel Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine. package main import \"fmt\" func main() { messages := make(chan string) go func() { messages <- \"ping\" }() msg := <-messages fmt.Println(msg) } # Channel direction # channel\uc758 \ubc29\ud5a5\uc744 \uc9c0\uc815\uac00\ub2a5\ud568. func pinger(c chan<- string) func printer(c <-chan string) Channel Buffering By default channels are unbuffered, meaning that they will only accept sends (chan <-) if there is a corresponding receive (<- chan) ready to receive the sent value. package main import \"fmt\" func main() { messages := make(chan string, 2) messages <- \"buffered\" messages <- \"channel\" fmt.Println(<-messages) fmt.Println(<-messages) } Channel Synchronization (Waitgroup) package main import ( \"fmt\" \"time\" ) func worker(done chan bool) { fmt.Print(\"working...\") time.Sleep(time.Second) fmt.Println(\"done\") done <- true } func main() { done := make(chan bool, 1) go worker(done) <-done } // goroutine with WaitGroup package main import \"sync\" import \"fmt\" import \"time\" type Object struct { //data } func (obj *Object) Update(wg *sync.WaitGroup) { //update data time.Sleep(time.Second) fmt.Println(\"Update done\") wg.Done() return } func main() { var wg sync.WaitGroup list := make([]Object, 5) for { for _, object := range list { wg.Add(1) go object.Update(&wg) } //now everything has been updated. start again wg.Wait() fmt.Println(\"Group done\") } } Select (for Channel) Go\u2019s select lets you wait on multiple channel operations. Combining goroutines and channels with select is a powerful feature of Go. package main import ( \"fmt\" \"time\" ) func main() { c1 := make(chan string) c2 := make(chan string) go func() { for { c1 <- \"from 1\" time.Sleep(time.Second * 2) } }() go func() { for { c2 <- \"from 2\" time.Sleep(time.Second * 3) } }() go func() { for { select { case msg1 := <-c1: fmt.Println(msg1) case msg2 := <-c2: fmt.Println(msg2) case current := <-time.After(time.Second): fmt.Println(current) } } }() var input string fmt.Scanln(&input) } context A way to think about context package in go is that it allows you to pass in a \u201ccontext\u201d to your program. Context like a timeout or deadline or a channel to indicate stop working and return. https://jaehue.github.io/post/how-to-use-golang-context/ http://p.agnihotry.com/post/understanding_the_context_package_in_golang/ func longFunc() string { <-time.After(time.Second * 3) // long running job return \"Success\" } func longFuncWithCtx(ctx context.Context) (string, error) { done := make(chan string) go func() { done <- longFunc() }() select { case result := <-done: return result, nil case <-ctx.Done(): return \"Fail\", ctx.Err() } } cgo package main /* #include <stdio.h> extern int sum(int a, int b); // Go \uc5b8\uc5b4\uc758 \ud568\uc218\ub294 extern\uc73c\ub85c \uc120\uc5b8 static inline void CExample() { int r = sum(1, 2); // Go \uc5b8\uc5b4\uc758 sum \ud568\uc218 \ud638\ucd9c printf(\"%d\\n\", r); } */ import \"C\" //export sum func sum(a, b C.int) C.int { // C \uc5b8\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub9e4\uac1c\ubcc0\uc218\uc640 \ub9ac\ud134\uac12 \uc790\ub8cc\ud615\uc744 // C \uc5b8\uc5b4\uc6a9\uc73c\ub85c \ub9de\ucdb0\uc90c return a + b } func main() { C.CExample() } package test /* #include <stdio.h> int sum(int a, int b) // \ub367\uc148 \ud568\uc218 \uc791\uc131 { return a + b; } void hello() // Hello, world! \ucd9c\ub825 \ud568\uc218 \uc791\uc131 { printf(\"Hello, world!\\n\"); } */ import \"C\" import \"fmt\" func main() { var a, b int = 1, 2 r := C.sum(C.int(a), C.int(b)) // C \uc5b8\uc5b4 \ud568\uc218 sum \ud638\ucd9c fmt.Println(r) // 3 C.hello() // Hello, world! } Command-Line The way to get program start argument and options. // Command-Line Arguments and Flags package main import ( \"fmt\" \"os\" ) func main() { argWithName := os.Args argWithoutName := os.Args[1:] arg := os.Args[3] fmt.Println(argWithName) fmt.Println(argWithoutName) fmt.Println(arg) wordPtr := flag.String(\"word\", \"default\", \"a string option\") numbPtr := flag.Int(\"num\", 1, \"integer option\") boolPtr := flag.Bool(\"bool\", false, \"boolean option\") var sval string flag.StringVar(&sval, \"str-var\", \"default\", \"string variable option\") flag.Parse() fmt.Println(\"word:\", *wordPtr) fmt.Println(\"num:\", *numbPtr) fmt.Println(\"bool:\", *boolPtr) fmt.Println(\"str-var:\", sval) fmt.Println(\"tail:\", flag.Args()) } // Command-Line subcommands package main import ( \"flag\" \"fmt\" \"os\" ) func main() { fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError) fooEnable := fooCmd.Bool(\"enable\", false, \"enable\") fooName := fooCmd.String(\"name\", \"\", \"name\") barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError) barLevel := barCmd.Int(\"level\", 0, \"level\") if len(os.Args) < 2 { fmt.Println(\"expected 'foo' or 'bar' subcommands\") os.Exit(1) } switch os.Args[1] { case \"foo\": fooCmd.Parse(os.Args[2:]) fmt.Println(\"subcommand 'foo'\") fmt.Println(\" enable:\", *fooEnable) fmt.Println(\" name:\", *fooName) fmt.Println(\" tail:\", fooCmd.Args()) case \"bar\": barCmd.Parse(os.Args[2:]) fmt.Println(\"subcommand 'bar'\") fmt.Println(\" level:\", *barLevel) fmt.Println(\" tail:\", barCmd.Args()) default: fmt.Println(\"expected 'foo' or 'bar' subcommands\") os.Exit(1) } } // usage package main import ( \"flag\" \"fmt\" \"os\" ) func main() { flag.Usage = func() { fmt.Printf(\"Usage of %s:\\n\", os.Args[0]) fmt.Printf(\" example7 file1 file2 ...\\n\") flag.PrintDefaults() } flag.Parse() } https://www.digitalocean.com/community/tutorials/how-to-use-the-flag-package-in-go empty structure package main import \"fmt\" type Duck struct { } func (d Duck) quack() { fmt.Println(\"Quack~\") } func (d Duck) feathers() { fmt.Println(\"White and gray feathers\") } type Person struct { } func (p Person) quack() { fmt.Println(\"No Quack~\") } func (p Person) feathers() { fmt.Println(\"no feathers\") } type Quacker interface { quack() feathers() } func inTheForest(q ...Quacker) { for _, entry := range q { fmt.Printf(\"%T\\n\", entry) entry.feathers() entry.quack() } } func main() { var donald Duck var john Person inTheForest(donald, john) } structTag A StructTag is the tag string in a struct field. By convention, tag strings are a concatenation of optionally space-separated key:\"value\" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '\"'), and colon (U+003A ':'). Each value is quoted using U+0022 '\"' characters and Go string literal syntax. https://golang.org/pkg/reflect/#StructTag https://golangbot.com/reflection/ Format: type StructTag string package main import ( \"fmt\" \"reflect\" ) func main() { type S struct { F string `species:\"gopher\" color:\"blue\"` } s := S{} st := reflect.TypeOf(s) field := st.Field(0) fmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\")) } reflection type Person struct { name string `tag1:\"1\" tag2:\"2\"` age int `tag1:\"\ub098\uc774\" tag2:\"Age\"` } func main() { var i int = 1 var s string = \"hello world\" var f float32 = 1.3 fmt.Println(reflect.TypeOf(i)) fmt.Println(reflect.TypeOf(s)) fmt.Println(reflect.TypeOf(f)) t := reflect.TypeOf(f) v := reflect.ValueOf(f) fmt.Println(\"\") fmt.Println(\"float32 reflection\") fmt.Println(\"==================\") fmt.Println(t.Name()) fmt.Println(t.Size()) fmt.Println(t.Kind() == reflect.Float32) fmt.Println(t.Kind() == reflect.Float64) fmt.Println(v.Type()) fmt.Println(v.Kind() == reflect.Float32) fmt.Println(v.Kind() == reflect.Float64) fmt.Println(v.Float()) fmt.Println(v) fmt.Println(\"\") fmt.Println(\"struct reflection\") fmt.Println(\"==================\") var d Person = Person{\"myname\", 3} var p *Person = &d fmt.Println(reflect.TypeOf(d)) name, ok := reflect.TypeOf(d).FieldByName(\"name\") fmt.Println(\"num of fields\", reflect.TypeOf(d).NumField()) fmt.Println(ok, name.Tag.Get(\"tag1\"), name.Tag.Get(\"tag2\")) age, ok := reflect.TypeOf(d).FieldByName(\"age\") fmt.Println(ok, age.Tag.Get(\"tag1\"), age.Tag.Get(\"tag2\")) fmt.Println(reflect.TypeOf(p)) fmt.Println(reflect.ValueOf(p)) fmt.Println(reflect.ValueOf(p).Elem()) // reflection of pointer fmt.Println(reflect.ValueOf(p).Elem().FieldByName(\"name\"), reflect.ValueOf(p).Elem().FieldByName(\"age\")) fmt.Println(\"\") fmt.Println(\"interface reflection\") fmt.Println(\"==================\") var b interface{} b = 1 fmt.Println(reflect.TypeOf(b)) fmt.Println(reflect.ValueOf(b)) fmt.Println(reflect.ValueOf(b).Int()) // fmt.Println(reflect.ValueOf(b).Elem()) // Runtime error } Type assertions A type assertion doesn\u2019t really convert an interface to another data type, but it provides access to an interface\u2019s concrete value, which is typically what you want. The type assertion x.(T) asserts that the concrete value stored in x is of type T, and that x is not nil. If T is not an interface, it asserts that the dynamic type of x is identical to T. If T is an interface, it asserts that the dynamic type of x implements T. var x interface{} = \"foo\" var s string = x.(string) fmt.Println(s) // \"foo\" s, ok := x.(string) fmt.Println(s, ok) // \"foo true\" n, ok := x.(int) fmt.Println(n, ok) // \"0 false\" n = x.(int) // ILLEGAL Type switches type switch performs several type assertions in series and runs the first case with a matching type. var x interface{} = \"foo\" switch v := x.(type) { case nil: fmt.Println(\"x is nil\") // here v has type interface{} case int: fmt.Println(\"x is\", v) // here v has type int case bool, string: fmt.Println(\"x is bool or string\") // here v has type interface{} default: fmt.Println(\"type unknown\") // here v has type interface{} } cgo (golang with C) package main // typedef int (*intFunc) (); // // int // bridge_int_func(intFunc f) // { // return f(); // } // // int fortytwo() // { // return 42; // } import \"C\" import \"fmt\" func main() { f := C.intFunc(C.fortytwo) fmt.Println(int(C.bridge_int_func(f))) // Output: 42 } https://eli.thegreenplace.net/2019/passing-callbacks-and-pointers-to-cgo/ go with gRPC go get google.golang.org/grpc go get -u github.com/golang/protobuf/protoc-gen-go <!-- plugins: grpc interface \uc0dd\uc131\ud568. --> protoc -I <PATH_TO_INCLUDE> --go_out=plugins=grpc:<PATH_TO_GENERATE> <PATH_TO_PROTO_FILE> protoc -I <PATH_TO_INCLUDE> --go_out=noti <PATH_TO_PROTO_FILE> Useful commands # show go doc on web go get -v golang.org/x/tools/cmd/godoc godoc fmt.Println # build package cd $GOPATH/src go build <TARGET_DIR=PACKAGE> # test build go install <TARGET_DIR=PACKAGE> # copy *.so to $GOPATH/pkg Useful functions panic() and recover() They Generate an runtime error and recover (receive) the runtime error. os.Exit() Use os.Exit to immediately exit with a given status. defer s will not be run when using os.Exit, so this fmt.Println will never be called. Useful documents https://github.com/golang-kr/golang-doc/wiki/Go-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95 https://golang.org/doc/effective_go.html gRPC with simple password authentication // client grpc.Dial(target, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&loginCreds{ Username: \"admin\", Password: \"admin123\", })) type loginCreds struct { Username, Password string } func (c *loginCreds) GetRequestMetadata(context.Context, ...string) (map[string]string, error) { return map[string]string{ \"username\": c.Username, \"password\": c.Password, }, nil } func (c *loginCreds) RequireTransportSecurity() bool { return true } // server grpc.NewServer( grpc.StreamInterceptor(streamInterceptor), grpc.UnaryInterceptor(unaryInterceptor) ) func streamInterceptor(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error { if err := authorize(stream.Context()); err != nil { return err } return handler(srv, stream) } func unaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) { if err := authorize(ctx); err != nil { return err } return handler(ctx, req) } func authorize(ctx context.Context) error { if md, ok := metadata.FromContext(ctx); ok { if len(md[\"username\"]) > 0 && md[\"username\"][0] == \"admin\" && len(md[\"password\"]) > 0 && md[\"password\"][0] == \"admin123\" { return nil } return AccessDeniedErr } return EmptyMetadataErr } vscode with golang https://github.com/Microsoft/vscode-go/issues/441 https://rominirani.com/setup-go-development-environment-with-visual-studio-code-7ea5d643a51a go get -u github.com/nsf/gocode Go Fuzzing Fuzzing is a type of automated testing which continuously manipulates inputs to a program to find bugs. \uc784\uc758\uc758 \uac12\uc744 \uc785\ub825\ud558\uc5ec functional test\ub97c \uc218\ud589\ud558\ub294 test framework\uc774\ub77c \ubcfc \uc218 \uc788\uc74c.","title":"Go handbook"},{"location":"go/#go-handbook","text":"Go handbook commands environment Build, install and execute a Go executable binary Building Go Executables for Multiple Platforms Package import other packages Go Syntax type syntax variables constant Comment control type conversion array, slice, map make() and new() function Pointers Structure (field and method) Anonymous fields in Go Structure Interface (collections of methods) empty interface Errors Concurrency (goroutine) Channel Channel Buffering Channel Synchronization (Waitgroup) Select (for Channel) context cgo Command-Line empty structure structTag reflection Type assertions Type switches cgo (golang with C) go with gRPC Useful commands Useful functions panic() and recover() os.Exit() Useful documents gRPC with simple password authentication vscode with golang Go Fuzzing","title":"Go handbook"},{"location":"go/#commands","text":"Commands of golang to use go env : show environment variables for golang. go build : <SOURCE> : Compile <SOURCE> and place it to $PWD go install : <SOURCE> : Compile and Install <SOURCE> to $GOBIN .","title":"commands"},{"location":"go/#environment","text":"$GOROOT : The path of Go binary distribution (default: /usr/local/go ) $GOPATH : The path to Go packages to install and build $GOBIN : The path to Go executable binaries built #!/bin/bash export GO111MODULE=off export GOPATH=$HOME/go export GOBIN=$GOPATH/bin","title":"environment"},{"location":"go/#build-install-and-execute-a-go-executable-binary","text":"cd go-project source env.sh go install src/hello/hello.go hello","title":"Build, install and execute a Go executable binary"},{"location":"go/#building-go-executables-for-multiple-platforms","text":"CFLAGS=\"-I$INCLUDE\" CPPFLAGS=\"-I$INCLUDE\" CC=$TARGET_ARCHITECTURE-gcc GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build","title":"Building Go Executables for Multiple Platforms"},{"location":"go/#package","text":"Every Go program is made up of packages. Programs start running in package main.","title":"Package"},{"location":"go/#import-other-packages","text":"import { \"fmt\" \"math/rand\" }","title":"import other packages"},{"location":"go/#go-syntax","text":"","title":"Go Syntax"},{"location":"go/#type-syntax","text":"\ud0c0\uc785 \ud6c4\uc704 \uc815\uc758: \ubcc0\uc218 \uc120\uc5b8\uc2dc type\uc740 \ub4a4\uc5d0 \uba85\uc2dc Go\ub294 \uc815\uc801 \ud0c0\uc785 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4 // integer types uint8, uint16, uint32, uint64, int8, int16, int32, int64 // floating point number // 0/0 = NaN\uc73c\ub85c \ud45c\ud604 float32, float64 // complex number complex64, complex128 x int p *int // pointer a [3]int // array // function declaration func main(argc int, argv []string) int // function variable f func(func(int,int) int, int) int // function variable (return a function) f func(func(int,int) int, int) func(int, int) int // \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uad6c\ud604/ \ud560\ub2f9 sum := func(a, b int) int { return a+b } (3, 4)","title":"type syntax"},{"location":"go/#variables","text":"var keyword \uc0ac\uc6a9 := \ucd95\uc57d\ud615 \uc874\uc7ac ( var \uc0dd\ub7b5) namespace: global vs local var x string x = \"hello world\" var y float32 = 10.0 // implicit variable declaration and value assignment z := \"goodbye world\" var ( a = 1 b = 2 c = 10 )","title":"variables"},{"location":"go/#constant","text":"const keyword \uc0ac\uc6a9 code \ub0b4\uc5d0\uc11c \uac12 \ubcc0\uacbd \ubd88\uac00 const x string = \"Hello World\" x = \"Some other string\" // error // e.g. math.Pi // const variable","title":"constant"},{"location":"go/#comment","text":"// line comment /* block comment */","title":"Comment"},{"location":"go/#control","text":"func control() { // loop statement i := 1 for i <= 10 { i = i + 1 } for i := 1; i <= 10; i++ { } // array loop using range keyword x := [5]float64{ 98, 93, 77, 82, 83 } for i, value := range x { } // array loop without index for _, value := range x { } // if else statement if i % 2 == 0 { // even } else { // odd } // if statement with initialization if num := 9; num < 0 { } else if num < 10 { } else { } // if statement with map (dict or hash) elements := make(map[string]string) elements[\"H\"] = \"Hydrogen\" if name, ok := elements[\"Un\"]; ok { fmt.Println(name, ok) } // switch statement switch i { case 0: fmt.Println(\"zero\") case 1: fmt.Println(\"one\") case 2: fmt.Println(\"two\") case 3: fmt.Println(\"three\") default: fmt.Println(\"unknown\") } }","title":"control"},{"location":"go/#type-conversion","text":"var x int = 10 float64(x)","title":"type conversion"},{"location":"go/#array-slice-map","text":"// array var x [5]int x[0] = 10 x[1] = 20 x[2] = 30 x[3] = 40 x[4] = 50 // [10 20 30 40 50] x := [5]float64{ 98, 93, 77, 82, 83 } // slice (max length\uc774\uc0c1 \uc99d\uac00 x) var x []float64 x := make([]float64, 5) // create a slice with 5 length using make() x := make([]float64, 5, 10) // create a slice with 5 length. 10 is the length of base array. // arr: array, x: slice for arr slicing arr := []float64{1,2,3,4,5} x := arr[0:5] arr[:] == arr[0:len(arr)] // true arr[:5] == arr[0:5] // true // slice append slice1 := []int{1,2,3} // [1,2,3] slice2 := append(slice1, 4, 5) // [1,2,3,4,5] fmt.Println(slice1, slice2) // slice copy slice1 := []int{1,2,3} slice2 := make([]int, 2) copy(slice2, slice1) // [1,2,3] fmt.Println(slice1, slice2) // [1,2] // map (key value pair) func main() { // var x string // x = \"hello world\" // y := \"goodbye world\" // fmt.Println(x) // fmt.Println(y) // fmt.Println(x == \"hello\") // fmt.Println(x == (\"hello \" + \"world\")) // map variable declaration & initialization var x map[string]int x = map[string]int{ \"a\": 1, } x[\"key\"] = 10 fmt.Println(x) elements := map[string]string{ \"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\", } elements[\"key10\"] = \"value10\" delete(elements, \"key1\") fmt.Println(elements) name, ok := elements[\"key2\"] fmt.Println(name, ok) if name, ok := elements[\"key1\"]; ok { fmt.Println(name, ok) } y := make(map[string]string) y[\"key1000\"] = \"1000\" fmt.Println(y) }","title":"array, slice, map"},{"location":"go/#make-and-new","text":"make() is used for follows. Create a channel Create a map with space preallocated Create a slice with space preallocated or with len != cap It's a little harder to justify new() . The main thing it makes easier is creating pointers to non-composite types. The two functions below are equivalent. One's just a little more concise: func newInt1() *int { return new(int) } func newInt2() *int { var i int return &i }","title":"make() and new()"},{"location":"go/#function","text":"func add(x int, y int) int { return x + y } // named return variables func f2() (r int) { r = 1 return } // multiple return variables func f() (int, int) { return 5, 6 } func main() { x, y := f() } // \uac00\ubcc0\ud568\uc218 Variadic Functions (print\ud568\uc218\ub3c4 \uac00\ubcc0\ud568\uc218) // func Println(a ...interface{}) (n int, err error) func add(args ...int) int { total := 0 for _, v := range args { total += v } return total } func main() { fmt.Println(add(1,2,3)) } // ...\ub97c \uc774\uc6a9\ud574 slice\ub97c argument\ub85c \uc804\ub2ec func main() { xs := []int{1,2,3} fmt.Println(add(xs...)) } // Closures (a function in a function) func intSeq() func() int { i := 0 return func() int { i++ return i } } func main() { nextInt := intSeq() fmt.Println(nextInt()) fmt.Println(nextInt()) fmt.Println(nextInt()) newInts := intSeq() fmt.Println(newInts()) } // Recursive function func factorial(x uint) uint { if x == 0 { return 1 } return x * factorial(x-1) } // defer (invoked at the end of the block) function func first() { fmt.Println(\"1st\") } func second() { fmt.Println(\"2nd\") } func main() { defer second() first() } // \uc77c\ubc18\uc801\uc73c\ub85c \ud568\uc218 \uc885\ub8cc\uc2dc \uc790\uc6d0\uc744 \ud574\uc81c\ud560 \ub54c \uc0ac\uc6a9 // runtime panic\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 \uc2e4\ud589 f, _ := os.Open(filename) defer f.Close() // panic and recover functions // recover\ub294 defer\uc640 \uc0ac\uc6a9\ud574\uc57c \ud568. func main() { defer func() { // recover function str := recover() fmt.Println(\"recovery: \", str) }() panic(\"Panic !! string\") }","title":"function"},{"location":"go/#pointers","text":"go\ub294 garbage collection\uc744 \uc9c0\uc6d0\ud558\ubbc0\ub85c point \ud574\uc81c (free)\uac00 \ud544\uc694\uc5c6\uc74c. func zero(xPtr *int) { *xPtr = 0 } func main() { x := 5 zero(&x) fmt.Println(x) // x\ub294 0 } // point using new() func one(xPtr *int) { *xPtr = 1 } func main() { xPtr := new(int) one(xPtr) fmt.Println(*xPtr) // x\ub294 1 }","title":"Pointers"},{"location":"go/#structure-field-and-method","text":"Field\uac00 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 public\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5) Field\uac00 \uc18c\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 private\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \ubd88\uac00\ub2a5) \uc544\ub798 \uc608\uc81c\uc5d0\uc11c X, Y, Z\ub294 \uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5 // Clircle blarara o type Circle struct { x float64 y float64 r float64 X float64 Y float64 R float64 } // call by value function func circleArea(c Circle) float64 { return math.Pi * (c.r * c.r) } // call by reference function func circleArea2(c *Circle) float64 { return math.Pi * (c.r * c.r) } // method (define a pointer receiver in parenthesis) func (c *Circle) area() float64 { return math.Pi * c.r * c.r } // method (define a value receiver in parenthesis) func (c Circle) area2() float64 { return math.Pi * c.r * c.r } func main() { var a Circle fmt.Println(a) var b Circle = Circle{x: 1, y: 2, r: 3} fmt.Println(b) c := Circle{10, 20, 30} fmt.Println(c) // Circle pointer d := new(Circle) d.x = 20 d.y = 30 d.r = 10 fmt.Println(d) // call by value (copy Circle argument) fmt.Println(circleArea(c)) fmt.Println(circleArea(*d)) // call by reference fmt.Println(circleArea2(d)) // method fmt.Println(\"method:\", b.area()) }","title":"Structure (field and method)"},{"location":"go/#anonymous-fields-in-go-structure","text":"Type\uc774\ub984\uc73c\ub85c field\uac00 \uc0dd\uc131\ub428 Anonymous field\ub85c \uc815\uc758\ub41c structure\uc758 field \ubc0f method\ub97c \uc120\uc5b8\ub41c structure\uac00 \uc0c1\uc18d\ud568. type Kitchen struct { numOfPlates int } type House struct { Kitchen // anonymous field numOfRooms int } func main() { //to initialize you have to use composed type name. h := House{Kitchen{10}, 3} //numOfRooms is a field of House fmt.Println(\"House h has this many rooms:\", h.numOfRooms) //numOfPlates is a field of anonymous field Kitchen, so it can be referred to like a field of House fmt.Println(\"House h has this many plates:\", h.numOfPlates) //we can refer to the embedded struct in its entirety by referring to the name of the struct type fmt.Println(\"The Kitchen contents of this house are:\", h.Kitchen) }","title":"Anonymous fields in Go Structure"},{"location":"go/#interface-collections-of-methods","text":"Interfaces are named collections of method signatures. \uad6c\uc870\uccb4(struct)\uac00 \ud544\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4\ub77c\uba74, interface\ub294 \uba54\uc11c\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4 interface\ub294 \ud0c0\uc785(type)\uc774 \uad6c\ud604\ud574\uc57c \ud558\ub294 \uba54\uc11c\ub4dc \uc6d0\ud615(prototype)\ub4e4\uc744 \uc815\uc758\ud568. type\uc758 interface\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \ub2e8\uc21c\ud788 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uac16\ub294 \ubaa8\ub4e0 \uba54\uc11c\ub4dc\ub4e4\uc744 \uad6c\ud604\ud558\uba74 \ub428. Interface \ubcc0\uc218\ub294 1) interface type\uacfc 2) \uc2e4\uc81c \uac00\ub9ac\ud0a4\ub294 data \uc8fc\uc18c\ub85c \uc774\ub8e8\uc5b4\uc9d0 // Shape interface type definition type Shape interface { area() float64 perimeter() float64 } //Rect \uc815\uc758 type Rect struct { width, height float64 } //Circle \uc815\uc758 type Circle struct { radius float64 } //Rect \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604 func (r Rect) area() float64 { return r.width * r.height } func (r Rect) perimeter() float64 { return 2 * (r.width + r.height) } //Circle \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604 func (c Circle) area() float64 { return math.Pi * c.radius * c.radius } func (c Circle) perimeter() float64 { return 2 * math.Pi * c.radius } func main() { r := Rect{10., 20.} c := Circle{10} showArea(r, c) } func showArea(shapes ...Shape) { for _, s := range shapes { a := s.area() //\uc778\ud130\ud398\uc774\uc2a4 \uba54\uc11c\ub4dc \ud638\ucd9c println(a) } } // interface field in structure // [FIXME] how to ? // example 2. type Abser interface { Abs() float64 } func main() { var a Abser f := MyFloat(-math.Sqrt2) v := Vertex{3, 4} a = f // a MyFloat implements Abser fmt.Println(a.Abs()) a = &v // a *Vertex implements Abser fmt.Println(a.Abs()) } type MyFloat float64 func (f MyFloat) Abs() float64 { if f < 0 { return float64(-f) } return float64(f) } type Vertex struct { X, Y float64 } func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) }","title":"Interface (collections of methods)"},{"location":"go/#empty-interface","text":"\uc5b4\ub5a0\ud55c Type\ub3c4 \ub2f4\uc744 \uc218 interface func Marshal(v interface{}) ([]byte, error); func Println(a ...interface{}) (n int, err error); func main() { var i interface{} describe(i) i = 42 describe(i) i = \"hello\" describe(i) } func describe(i interface{}) { fmt.Printf(\"(%v, %T)\\n\", i, i) } // (<nil>, <nil>) // (42, int) // (hello, string)","title":"empty interface"},{"location":"go/#errors","text":"By convention, errors are the last return value and have type error, a built-in interface. errors.New constructs a basic error value with the given error message. A nil value in the error position indicates that there was no error . func f1(arg int) (int, error) { if arg == 42 { return -1, errors.New(\"can't work with 42\") } return arg + 3, nil } func main() { for _, i := range []int{7, 42} { if r, e := f1(i); e != nil { fmt.Println(\"f1 failed:\", e) } else { fmt.Println(\"f1 worked:\", r) } } }","title":"Errors"},{"location":"go/#concurrency-goroutine","text":"// goroutine to support concurrency package main import ( \"fmt\" \"time\" ) func f(from string) { for i := 0; i < 3; i++ { fmt.Println(from, \":\", i) } } func main() { f(\"direct\") go f(\"goroutine\") go func(msg string) { fmt.Println(msg) }(\"going\") time.Sleep(time.Second) fmt.Println(\"done\") }","title":"Concurrency (goroutine)"},{"location":"go/#channel","text":"Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine. package main import \"fmt\" func main() { messages := make(chan string) go func() { messages <- \"ping\" }() msg := <-messages fmt.Println(msg) } # Channel direction # channel\uc758 \ubc29\ud5a5\uc744 \uc9c0\uc815\uac00\ub2a5\ud568. func pinger(c chan<- string) func printer(c <-chan string)","title":"Channel"},{"location":"go/#channel-buffering","text":"By default channels are unbuffered, meaning that they will only accept sends (chan <-) if there is a corresponding receive (<- chan) ready to receive the sent value. package main import \"fmt\" func main() { messages := make(chan string, 2) messages <- \"buffered\" messages <- \"channel\" fmt.Println(<-messages) fmt.Println(<-messages) }","title":"Channel Buffering"},{"location":"go/#channel-synchronization-waitgroup","text":"package main import ( \"fmt\" \"time\" ) func worker(done chan bool) { fmt.Print(\"working...\") time.Sleep(time.Second) fmt.Println(\"done\") done <- true } func main() { done := make(chan bool, 1) go worker(done) <-done } // goroutine with WaitGroup package main import \"sync\" import \"fmt\" import \"time\" type Object struct { //data } func (obj *Object) Update(wg *sync.WaitGroup) { //update data time.Sleep(time.Second) fmt.Println(\"Update done\") wg.Done() return } func main() { var wg sync.WaitGroup list := make([]Object, 5) for { for _, object := range list { wg.Add(1) go object.Update(&wg) } //now everything has been updated. start again wg.Wait() fmt.Println(\"Group done\") } }","title":"Channel Synchronization (Waitgroup)"},{"location":"go/#select-for-channel","text":"Go\u2019s select lets you wait on multiple channel operations. Combining goroutines and channels with select is a powerful feature of Go. package main import ( \"fmt\" \"time\" ) func main() { c1 := make(chan string) c2 := make(chan string) go func() { for { c1 <- \"from 1\" time.Sleep(time.Second * 2) } }() go func() { for { c2 <- \"from 2\" time.Sleep(time.Second * 3) } }() go func() { for { select { case msg1 := <-c1: fmt.Println(msg1) case msg2 := <-c2: fmt.Println(msg2) case current := <-time.After(time.Second): fmt.Println(current) } } }() var input string fmt.Scanln(&input) }","title":"Select (for Channel)"},{"location":"go/#context","text":"A way to think about context package in go is that it allows you to pass in a \u201ccontext\u201d to your program. Context like a timeout or deadline or a channel to indicate stop working and return. https://jaehue.github.io/post/how-to-use-golang-context/ http://p.agnihotry.com/post/understanding_the_context_package_in_golang/ func longFunc() string { <-time.After(time.Second * 3) // long running job return \"Success\" } func longFuncWithCtx(ctx context.Context) (string, error) { done := make(chan string) go func() { done <- longFunc() }() select { case result := <-done: return result, nil case <-ctx.Done(): return \"Fail\", ctx.Err() } }","title":"context"},{"location":"go/#cgo","text":"package main /* #include <stdio.h> extern int sum(int a, int b); // Go \uc5b8\uc5b4\uc758 \ud568\uc218\ub294 extern\uc73c\ub85c \uc120\uc5b8 static inline void CExample() { int r = sum(1, 2); // Go \uc5b8\uc5b4\uc758 sum \ud568\uc218 \ud638\ucd9c printf(\"%d\\n\", r); } */ import \"C\" //export sum func sum(a, b C.int) C.int { // C \uc5b8\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub9e4\uac1c\ubcc0\uc218\uc640 \ub9ac\ud134\uac12 \uc790\ub8cc\ud615\uc744 // C \uc5b8\uc5b4\uc6a9\uc73c\ub85c \ub9de\ucdb0\uc90c return a + b } func main() { C.CExample() } package test /* #include <stdio.h> int sum(int a, int b) // \ub367\uc148 \ud568\uc218 \uc791\uc131 { return a + b; } void hello() // Hello, world! \ucd9c\ub825 \ud568\uc218 \uc791\uc131 { printf(\"Hello, world!\\n\"); } */ import \"C\" import \"fmt\" func main() { var a, b int = 1, 2 r := C.sum(C.int(a), C.int(b)) // C \uc5b8\uc5b4 \ud568\uc218 sum \ud638\ucd9c fmt.Println(r) // 3 C.hello() // Hello, world! }","title":"cgo"},{"location":"go/#command-line","text":"The way to get program start argument and options. // Command-Line Arguments and Flags package main import ( \"fmt\" \"os\" ) func main() { argWithName := os.Args argWithoutName := os.Args[1:] arg := os.Args[3] fmt.Println(argWithName) fmt.Println(argWithoutName) fmt.Println(arg) wordPtr := flag.String(\"word\", \"default\", \"a string option\") numbPtr := flag.Int(\"num\", 1, \"integer option\") boolPtr := flag.Bool(\"bool\", false, \"boolean option\") var sval string flag.StringVar(&sval, \"str-var\", \"default\", \"string variable option\") flag.Parse() fmt.Println(\"word:\", *wordPtr) fmt.Println(\"num:\", *numbPtr) fmt.Println(\"bool:\", *boolPtr) fmt.Println(\"str-var:\", sval) fmt.Println(\"tail:\", flag.Args()) } // Command-Line subcommands package main import ( \"flag\" \"fmt\" \"os\" ) func main() { fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError) fooEnable := fooCmd.Bool(\"enable\", false, \"enable\") fooName := fooCmd.String(\"name\", \"\", \"name\") barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError) barLevel := barCmd.Int(\"level\", 0, \"level\") if len(os.Args) < 2 { fmt.Println(\"expected 'foo' or 'bar' subcommands\") os.Exit(1) } switch os.Args[1] { case \"foo\": fooCmd.Parse(os.Args[2:]) fmt.Println(\"subcommand 'foo'\") fmt.Println(\" enable:\", *fooEnable) fmt.Println(\" name:\", *fooName) fmt.Println(\" tail:\", fooCmd.Args()) case \"bar\": barCmd.Parse(os.Args[2:]) fmt.Println(\"subcommand 'bar'\") fmt.Println(\" level:\", *barLevel) fmt.Println(\" tail:\", barCmd.Args()) default: fmt.Println(\"expected 'foo' or 'bar' subcommands\") os.Exit(1) } } // usage package main import ( \"flag\" \"fmt\" \"os\" ) func main() { flag.Usage = func() { fmt.Printf(\"Usage of %s:\\n\", os.Args[0]) fmt.Printf(\" example7 file1 file2 ...\\n\") flag.PrintDefaults() } flag.Parse() } https://www.digitalocean.com/community/tutorials/how-to-use-the-flag-package-in-go","title":"Command-Line"},{"location":"go/#empty-structure","text":"package main import \"fmt\" type Duck struct { } func (d Duck) quack() { fmt.Println(\"Quack~\") } func (d Duck) feathers() { fmt.Println(\"White and gray feathers\") } type Person struct { } func (p Person) quack() { fmt.Println(\"No Quack~\") } func (p Person) feathers() { fmt.Println(\"no feathers\") } type Quacker interface { quack() feathers() } func inTheForest(q ...Quacker) { for _, entry := range q { fmt.Printf(\"%T\\n\", entry) entry.feathers() entry.quack() } } func main() { var donald Duck var john Person inTheForest(donald, john) }","title":"empty structure"},{"location":"go/#structtag","text":"A StructTag is the tag string in a struct field. By convention, tag strings are a concatenation of optionally space-separated key:\"value\" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '\"'), and colon (U+003A ':'). Each value is quoted using U+0022 '\"' characters and Go string literal syntax. https://golang.org/pkg/reflect/#StructTag https://golangbot.com/reflection/ Format: type StructTag string package main import ( \"fmt\" \"reflect\" ) func main() { type S struct { F string `species:\"gopher\" color:\"blue\"` } s := S{} st := reflect.TypeOf(s) field := st.Field(0) fmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\")) }","title":"structTag"},{"location":"go/#reflection","text":"type Person struct { name string `tag1:\"1\" tag2:\"2\"` age int `tag1:\"\ub098\uc774\" tag2:\"Age\"` } func main() { var i int = 1 var s string = \"hello world\" var f float32 = 1.3 fmt.Println(reflect.TypeOf(i)) fmt.Println(reflect.TypeOf(s)) fmt.Println(reflect.TypeOf(f)) t := reflect.TypeOf(f) v := reflect.ValueOf(f) fmt.Println(\"\") fmt.Println(\"float32 reflection\") fmt.Println(\"==================\") fmt.Println(t.Name()) fmt.Println(t.Size()) fmt.Println(t.Kind() == reflect.Float32) fmt.Println(t.Kind() == reflect.Float64) fmt.Println(v.Type()) fmt.Println(v.Kind() == reflect.Float32) fmt.Println(v.Kind() == reflect.Float64) fmt.Println(v.Float()) fmt.Println(v) fmt.Println(\"\") fmt.Println(\"struct reflection\") fmt.Println(\"==================\") var d Person = Person{\"myname\", 3} var p *Person = &d fmt.Println(reflect.TypeOf(d)) name, ok := reflect.TypeOf(d).FieldByName(\"name\") fmt.Println(\"num of fields\", reflect.TypeOf(d).NumField()) fmt.Println(ok, name.Tag.Get(\"tag1\"), name.Tag.Get(\"tag2\")) age, ok := reflect.TypeOf(d).FieldByName(\"age\") fmt.Println(ok, age.Tag.Get(\"tag1\"), age.Tag.Get(\"tag2\")) fmt.Println(reflect.TypeOf(p)) fmt.Println(reflect.ValueOf(p)) fmt.Println(reflect.ValueOf(p).Elem()) // reflection of pointer fmt.Println(reflect.ValueOf(p).Elem().FieldByName(\"name\"), reflect.ValueOf(p).Elem().FieldByName(\"age\")) fmt.Println(\"\") fmt.Println(\"interface reflection\") fmt.Println(\"==================\") var b interface{} b = 1 fmt.Println(reflect.TypeOf(b)) fmt.Println(reflect.ValueOf(b)) fmt.Println(reflect.ValueOf(b).Int()) // fmt.Println(reflect.ValueOf(b).Elem()) // Runtime error }","title":"reflection"},{"location":"go/#type-assertions","text":"A type assertion doesn\u2019t really convert an interface to another data type, but it provides access to an interface\u2019s concrete value, which is typically what you want. The type assertion x.(T) asserts that the concrete value stored in x is of type T, and that x is not nil. If T is not an interface, it asserts that the dynamic type of x is identical to T. If T is an interface, it asserts that the dynamic type of x implements T. var x interface{} = \"foo\" var s string = x.(string) fmt.Println(s) // \"foo\" s, ok := x.(string) fmt.Println(s, ok) // \"foo true\" n, ok := x.(int) fmt.Println(n, ok) // \"0 false\" n = x.(int) // ILLEGAL","title":"Type assertions"},{"location":"go/#type-switches","text":"type switch performs several type assertions in series and runs the first case with a matching type. var x interface{} = \"foo\" switch v := x.(type) { case nil: fmt.Println(\"x is nil\") // here v has type interface{} case int: fmt.Println(\"x is\", v) // here v has type int case bool, string: fmt.Println(\"x is bool or string\") // here v has type interface{} default: fmt.Println(\"type unknown\") // here v has type interface{} }","title":"Type switches"},{"location":"go/#cgo-golang-with-c","text":"package main // typedef int (*intFunc) (); // // int // bridge_int_func(intFunc f) // { // return f(); // } // // int fortytwo() // { // return 42; // } import \"C\" import \"fmt\" func main() { f := C.intFunc(C.fortytwo) fmt.Println(int(C.bridge_int_func(f))) // Output: 42 } https://eli.thegreenplace.net/2019/passing-callbacks-and-pointers-to-cgo/","title":"cgo (golang with C)"},{"location":"go/#go-with-grpc","text":"go get google.golang.org/grpc go get -u github.com/golang/protobuf/protoc-gen-go <!-- plugins: grpc interface \uc0dd\uc131\ud568. --> protoc -I <PATH_TO_INCLUDE> --go_out=plugins=grpc:<PATH_TO_GENERATE> <PATH_TO_PROTO_FILE> protoc -I <PATH_TO_INCLUDE> --go_out=noti <PATH_TO_PROTO_FILE>","title":"go with gRPC"},{"location":"go/#useful-commands","text":"# show go doc on web go get -v golang.org/x/tools/cmd/godoc godoc fmt.Println # build package cd $GOPATH/src go build <TARGET_DIR=PACKAGE> # test build go install <TARGET_DIR=PACKAGE> # copy *.so to $GOPATH/pkg","title":"Useful commands"},{"location":"go/#useful-functions","text":"","title":"Useful functions"},{"location":"go/#panic-and-recover","text":"They Generate an runtime error and recover (receive) the runtime error.","title":"panic() and recover()"},{"location":"go/#osexit","text":"Use os.Exit to immediately exit with a given status. defer s will not be run when using os.Exit, so this fmt.Println will never be called.","title":"os.Exit()"},{"location":"go/#useful-documents","text":"https://github.com/golang-kr/golang-doc/wiki/Go-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95 https://golang.org/doc/effective_go.html","title":"Useful documents"},{"location":"go/#grpc-with-simple-password-authentication","text":"// client grpc.Dial(target, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&loginCreds{ Username: \"admin\", Password: \"admin123\", })) type loginCreds struct { Username, Password string } func (c *loginCreds) GetRequestMetadata(context.Context, ...string) (map[string]string, error) { return map[string]string{ \"username\": c.Username, \"password\": c.Password, }, nil } func (c *loginCreds) RequireTransportSecurity() bool { return true } // server grpc.NewServer( grpc.StreamInterceptor(streamInterceptor), grpc.UnaryInterceptor(unaryInterceptor) ) func streamInterceptor(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error { if err := authorize(stream.Context()); err != nil { return err } return handler(srv, stream) } func unaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) { if err := authorize(ctx); err != nil { return err } return handler(ctx, req) } func authorize(ctx context.Context) error { if md, ok := metadata.FromContext(ctx); ok { if len(md[\"username\"]) > 0 && md[\"username\"][0] == \"admin\" && len(md[\"password\"]) > 0 && md[\"password\"][0] == \"admin123\" { return nil } return AccessDeniedErr } return EmptyMetadataErr }","title":"gRPC with simple password authentication"},{"location":"go/#vscode-with-golang","text":"https://github.com/Microsoft/vscode-go/issues/441 https://rominirani.com/setup-go-development-environment-with-visual-studio-code-7ea5d643a51a go get -u github.com/nsf/gocode","title":"vscode with golang"},{"location":"go/#go-fuzzing","text":"Fuzzing is a type of automated testing which continuously manipulates inputs to a program to find bugs. \uc784\uc758\uc758 \uac12\uc744 \uc785\ub825\ud558\uc5ec functional test\ub97c \uc218\ud589\ud558\ub294 test framework\uc774\ub77c \ubcfc \uc218 \uc788\uc74c.","title":"Go Fuzzing"},{"location":"grpc/","text":"gRPC handbook grpc reflection (gRPC service \uc815\ubcf4 \uc870\ud68c\uc6a9) gRPC Server Reflection provides information about publicly-accessible gRPC services on a server, and assists clients at runtime to construct RPC requests and responses without precompiled service information. It is used by gRPC CLI, which can be used to introspect server protos and send/receive test RPCs. import \"google.golang.org/grpc/reflection\" s := grpc.NewServer() pb.RegisterGreeterServer(s, &server{}) + // Register reflection service on gRPC server. + reflection.Register(s) if err := s.Serve(lis); err != nil { log.Fatalf(\"failed to serve: %v\", err) } Check reflection for gRPC CLI git clone https://github.com/grpc/grpc cd grpc git submodule update --init make grpc_cli cd bins/opt # grpc_cli is in directory bins/opt/ ./grpc_cli ls localhost:50051 # Result grpc.examples.echo.Echo grpc.reflection.v1alpha.ServerReflection helloworld.Greeter # List services and method ./grpc_cli ls localhost:50051 helloworld.Greeter -l # Result filename: helloworld.proto package: helloworld; service Greeter { rpc SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply) {} } # Inspect message types ./grpc_cli type localhost:50051 helloworld.HelloRequest # Result message HelloRequest { string name = 1[json_name = \"name\"]; } # Call a remote method ./grpc_cli call localhost:50051 SayHello \"name: 'gRPC CLI'\" # Result connecting to localhost:50051 message: \"Hello gRPC CLI\" Rpc succeeded with OK status gRPC Encryption (gRPC communication channel encryption) Terms CA (Certificate Authority) : \uc778\uc99d\uae30\uad00 PEM (Privacy Enhanced Mail) : certificate info + public key encoded by base64 CSR (Certificate Signing Request) : CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc694\uccad\uc744 \uc704\ud55c \ud30c\uc77c CRT (CeRTificate) : CA\uac00 \uc99d\uba85\ud558\ub294 \uc778\uc99d\uc11c $SERVER.key : server private key $SERVER.pem : PKCS#8 certificate with server public key $SERVER.csr : server CSR (Certificate Signing Request) file $SERVER.crt : server certificate file (\uc11c\ubc84 \uc778\uc99d\uc11c) $ROOTCA.key : CA private key $ROOTCA.crt : CA certificate file for $SERVER.crt ( $SERVER.pem ) Generate ceritificate (\uc778\uc99d\uc11c \uc131\uc131) openssl genrsa -out ca.key 2048 openssl req -new -x509 -days 365 -key ca.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR's Self Signed CA\" -out ca.crt openssl req -newkey rsa:2048 -nodes -keyout service.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR NE\" -out service.csr openssl x509 -req -extfile <(printf \"subjectAltName=DNS:localhost\") -days 365 -in service.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out service.crt $ openssl genrsa -out server.key 2048 # crt \ubc14\ub85c \uc0dd\uc131 $ openssl req -new -x509 -sha256 -key server.key \\ -out server.crt -days 3650 # csr -> crt \uc73c\ub85c \ubcc0\ud658 $ openssl req -new -sha256 -key server.key -out server.csr $ openssl x509 -req -sha256 -in server.csr -signkey server.key \\ -out server.crt -days 3650 $ openssl req -new -x509 -sha256 -key server.key -out server.crt -days 36500 -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=HFR NE\" # Create ROOT certificate (TSL/SSL \uc778\uc99d\uc11c \uc0dd\uc131\ud558\uae30) # The name of ROOT CA (Certificate Authority) export ROOTCA=\"HFR's Self Signed CA\" # Name of SERVER export SERVERCA=\"HFR NE\" # Generated file name export SERVER=\"server\" # Generate ROOT CA Private key (rootca.key) openssl genrsa -aes256 -out rootca.key 2048 # Create ROOT certificate (rootca.crt) of ROOT CA (\uc778\uc99d\uc11c \uc0dd\uc131) openssl req -new -x509 -days 36500 -key rootca.key -out rootca.crt -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$ROOTCA\" # check ROOT certificate (\uc778\uc99d\uc11c \ud655\uc778) openssl x509 -text -in rootca.crt # Create Server certificate # Generate server Private key ($SERVER.key) openssl genrsa -aes256 -out $SERVER.key 2048 # Create Certificate request ($SERVER.csr) openssl req -new -key $SERVER.key -out $SERVER.csr -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$SERVERCA\" # Create certificate (digital certificate file; \uc778\uc99d\uc11c) openssl x509 -req -days 36500 -in $SERVER.csr -CA rootca.crt -CAkey rootca.key -set_serial 01 -out $SERVER.crt # Create PKCS#8 certificate for gRPC # openssl pkcs8 -topk8 -nocrypt -in $SERVER.key -out $SERVER.pem Generate crt without asking subjectAltName openssl req -new -sha256 \\ -key domain.key \\ -subj \"/C=US/ST=CA/O=Acme, Inc./CN=example.com\" \\ -reqexts SAN \\ -config <(cat /etc/ssl/openssl.cnf \\ <(printf \"\\n[SAN]\\nsubjectAltName=DNS:example.com,DNS:www.example.com\")) \\ -out domain.csr another example # Generate CA key: openssl genrsa -des3 -out ca.key 4096 # Generate CA certificate: openssl req -new -x509 -days 365 -key ca.key -out ca.crt # Generate server key: openssl genrsa -des3 -out server.key 4096 # Generate server signing request: openssl req -new -key server.key -out server.csr # Self-sign server certificate: openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt # Remove passphrase from the server key: openssl rsa -in server.key -out server.key # Generate client key: openssl genrsa -des3 -out client.key 4096 # Generate client signing request: openssl req -new -key client.key -out client.csr # Self-sign client certificate: openssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt # Remove passphrase from the client key: openssl rsa -in client.key -out client.key","title":"gRPC handbook"},{"location":"grpc/#grpc-handbook","text":"","title":"gRPC handbook"},{"location":"grpc/#grpc-reflection-grpc-service","text":"gRPC Server Reflection provides information about publicly-accessible gRPC services on a server, and assists clients at runtime to construct RPC requests and responses without precompiled service information. It is used by gRPC CLI, which can be used to introspect server protos and send/receive test RPCs. import \"google.golang.org/grpc/reflection\" s := grpc.NewServer() pb.RegisterGreeterServer(s, &server{}) + // Register reflection service on gRPC server. + reflection.Register(s) if err := s.Serve(lis); err != nil { log.Fatalf(\"failed to serve: %v\", err) }","title":"grpc reflection (gRPC service \uc815\ubcf4 \uc870\ud68c\uc6a9)"},{"location":"grpc/#check-reflection-for-grpc-cli","text":"git clone https://github.com/grpc/grpc cd grpc git submodule update --init make grpc_cli cd bins/opt # grpc_cli is in directory bins/opt/ ./grpc_cli ls localhost:50051 # Result grpc.examples.echo.Echo grpc.reflection.v1alpha.ServerReflection helloworld.Greeter # List services and method ./grpc_cli ls localhost:50051 helloworld.Greeter -l # Result filename: helloworld.proto package: helloworld; service Greeter { rpc SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply) {} } # Inspect message types ./grpc_cli type localhost:50051 helloworld.HelloRequest # Result message HelloRequest { string name = 1[json_name = \"name\"]; } # Call a remote method ./grpc_cli call localhost:50051 SayHello \"name: 'gRPC CLI'\" # Result connecting to localhost:50051 message: \"Hello gRPC CLI\" Rpc succeeded with OK status","title":"Check reflection for gRPC CLI"},{"location":"grpc/#grpc-encryption-grpc-communication-channel-encryption","text":"","title":"gRPC Encryption (gRPC communication channel encryption)"},{"location":"grpc/#terms","text":"CA (Certificate Authority) : \uc778\uc99d\uae30\uad00 PEM (Privacy Enhanced Mail) : certificate info + public key encoded by base64 CSR (Certificate Signing Request) : CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc694\uccad\uc744 \uc704\ud55c \ud30c\uc77c CRT (CeRTificate) : CA\uac00 \uc99d\uba85\ud558\ub294 \uc778\uc99d\uc11c $SERVER.key : server private key $SERVER.pem : PKCS#8 certificate with server public key $SERVER.csr : server CSR (Certificate Signing Request) file $SERVER.crt : server certificate file (\uc11c\ubc84 \uc778\uc99d\uc11c) $ROOTCA.key : CA private key $ROOTCA.crt : CA certificate file for $SERVER.crt ( $SERVER.pem )","title":"Terms"},{"location":"grpc/#generate-ceritificate","text":"openssl genrsa -out ca.key 2048 openssl req -new -x509 -days 365 -key ca.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR's Self Signed CA\" -out ca.crt openssl req -newkey rsa:2048 -nodes -keyout service.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR NE\" -out service.csr openssl x509 -req -extfile <(printf \"subjectAltName=DNS:localhost\") -days 365 -in service.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out service.crt $ openssl genrsa -out server.key 2048 # crt \ubc14\ub85c \uc0dd\uc131 $ openssl req -new -x509 -sha256 -key server.key \\ -out server.crt -days 3650 # csr -> crt \uc73c\ub85c \ubcc0\ud658 $ openssl req -new -sha256 -key server.key -out server.csr $ openssl x509 -req -sha256 -in server.csr -signkey server.key \\ -out server.crt -days 3650 $ openssl req -new -x509 -sha256 -key server.key -out server.crt -days 36500 -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=HFR NE\" # Create ROOT certificate (TSL/SSL \uc778\uc99d\uc11c \uc0dd\uc131\ud558\uae30) # The name of ROOT CA (Certificate Authority) export ROOTCA=\"HFR's Self Signed CA\" # Name of SERVER export SERVERCA=\"HFR NE\" # Generated file name export SERVER=\"server\" # Generate ROOT CA Private key (rootca.key) openssl genrsa -aes256 -out rootca.key 2048 # Create ROOT certificate (rootca.crt) of ROOT CA (\uc778\uc99d\uc11c \uc0dd\uc131) openssl req -new -x509 -days 36500 -key rootca.key -out rootca.crt -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$ROOTCA\" # check ROOT certificate (\uc778\uc99d\uc11c \ud655\uc778) openssl x509 -text -in rootca.crt # Create Server certificate # Generate server Private key ($SERVER.key) openssl genrsa -aes256 -out $SERVER.key 2048 # Create Certificate request ($SERVER.csr) openssl req -new -key $SERVER.key -out $SERVER.csr -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$SERVERCA\" # Create certificate (digital certificate file; \uc778\uc99d\uc11c) openssl x509 -req -days 36500 -in $SERVER.csr -CA rootca.crt -CAkey rootca.key -set_serial 01 -out $SERVER.crt # Create PKCS#8 certificate for gRPC # openssl pkcs8 -topk8 -nocrypt -in $SERVER.key -out $SERVER.pem","title":"Generate ceritificate (\uc778\uc99d\uc11c \uc131\uc131)"},{"location":"grpc/#generate-crt-without-asking-subjectaltname","text":"openssl req -new -sha256 \\ -key domain.key \\ -subj \"/C=US/ST=CA/O=Acme, Inc./CN=example.com\" \\ -reqexts SAN \\ -config <(cat /etc/ssl/openssl.cnf \\ <(printf \"\\n[SAN]\\nsubjectAltName=DNS:example.com,DNS:www.example.com\")) \\ -out domain.csr","title":"Generate crt without asking subjectAltName"},{"location":"grpc/#another-example","text":"# Generate CA key: openssl genrsa -des3 -out ca.key 4096 # Generate CA certificate: openssl req -new -x509 -days 365 -key ca.key -out ca.crt # Generate server key: openssl genrsa -des3 -out server.key 4096 # Generate server signing request: openssl req -new -key server.key -out server.csr # Self-sign server certificate: openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt # Remove passphrase from the server key: openssl rsa -in server.key -out server.key # Generate client key: openssl genrsa -des3 -out client.key 4096 # Generate client signing request: openssl req -new -key client.key -out client.csr # Self-sign client certificate: openssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt # Remove passphrase from the client key: openssl rsa -in client.key -out client.key","title":"another example"},{"location":"javascript/","text":"Javascript \uc774 \ubb38\uc11c\ub294 \uc544\ub798 javascript tutorial\uc744 \ubcf4\uace0 \uc815\ub9ac\ud55c \uac83\uc784 \ud83d\udcc1 https://ko.javascript.info \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \uacf5\uc2dd\uc774\ub984?: ECMAScript Javascript Javascript engine Garbage Collection javascript framework Linter JS \ubb38\uc11c\ud654 Polyfill \ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654 Comment \uc8fc\uc11d use strict \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194 \uc804\uc5ed \uac1d\uccb4 Polyfill\uc758 \uad6c\ud604 \ubcc0\uc218\uc640 \uc0c1\uc218 \ubcc0\uc218 \uba85\uba85 \uaddc\uce59 \ud568\uc218\ud615 \uc5b8\uc5b4 \uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd \uc790\ub8cc\ud615 \uc22b\uc790\ud615 isNaN, isFinite parseInt, parseFloat Math \ubb38\uc790\ud615 boolean \ud615 null \uac12 undefined \uac12 object const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5 \uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok \ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658 object \ube44\uad50 \uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign Methods and this \uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function \uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) ?. , ?.() , ?.[] object \uc21c\ud68c \ud568\uc218 symbol \uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator Array mapping function for array sort \ubb38\uc790\uc5f4 <==> \ubc30\uc5f4 reduce\uc640 reduceRight (\ub204\uc0b0\uae30) \ubc30\uc5f4\uc778\uc9c0 \ud655\uc778 map \uc81c\uacf5 \ud568\uc218 set WeakMap and WeakSet Date Autocorrection Benchmarking Test Date.parse JSON (JavaScript Object Notation) Serialization toJSON() for customized serialization typeof Browser functions \ud615\ubcc0\ud658 (type conversion) \uc5f0\uc0b0\uc790 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table \ud560\ub2f9 \uc5f0\uc0b0\uc790 \uc27c\ud45c \uc5f0\uc0b0\uc790 \ube44\uad50 \uc5f0\uc0b0\uc790 error \ube44\uad50 \ubb38\uc790\uc5f4 \ube44\uad50 \ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50 \uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) === null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30 \ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) ?? \uc870\uac74\ubb38 \ubc18\ubcf5\ubb38 switch/case\ubb38 Function Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd) Arrow function (\ud654\uc0b4\ud45c \ud568\uc218) debugger console.log Function property variable arguments Input argument spreading Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815 new Function Time scheduling - setTimeout , setInterval Testing - Mocha chai (assertion logic) \uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment) \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9 \uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring) function argument with destructuring assignment Promise .then .catch .finally Promise chaining thenable fetch Throw an error in promise Mutilple promises promisify Microtask queue Async and Await async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc async & await error handling File Read/Write Decorator (wrapping function) \uac1d\uccb4\uc758 call \ud568\uc218 \uc0ac\uc6a9\ud558\uae30 \ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218 object property \uc18d\uc131 \uc124\uc815 getter, setter properties nodejs import package nodejs getting start Javascript engine V8 Firefox ? Garbage Collection reachability \ub3c4\ub2ec \uac00\ub2a5\uc131\uc774 \uc5c6\ub294 \ubcc0\uc218\ub294 \uc0ad\uc81c mark-and-sweep generational collection: \uc624\ub79c\uc2dc\uac04 \ub0a8\uc740 \uac1c\uccb4 \ub35c \uac10\uc2dc incremental collection: \ud655\uc778 \uac1c\uccb4 grouping\ud558\uace0 \ubd84\uc0b0 \ucc98\ub9ac idle-time collection: \uc720\ud734 \uc2dc\uac04 \uc2e4\ud589 javascript framework jQuery Lodash Linter JSLint \u2013 \uc5ed\uc0ac\uac00 \uc624\ub798\ub41c linter JSHint \u2013 JSLint\ubcf4\ub2e4 \uc138\ud305\uc774 \uc880 \ub354 \uc720\uc5f0\ud55c linter ESLint \u2013 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ub098\uc628 linter, npm install -g eslint JS \ubb38\uc11c\ud654 JSDoc : http://usejsdoc.org/ /** * x\ub97c n\ubc88 \uacf1\ud55c \uc218\ub97c \ubc18\ud658\ud568 * * @param {number} x \uac70\ub4ed\uc81c\uacf1\ud560 \uc22b\uc790 * @param {number} n \uacf1\ud560 \ud69f\uc218, \ubc18\ub4dc\uc2dc \uc790\uc5f0\uc218\uc5ec\uc57c \ud568 * @return {number} x\uc758 n \uac70\ub4ed\uc81c\uacf1\uc744 \ubc18\ud658\ud568 */ function pow(x, n) { ... } Polyfill \ud3f4\ub9ac\ud544(Polyfill)\uc774\ub780 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc9c0\uc6d0 \uac00\ub2a5\ud558\ub3c4\ub85d \ubcc0\ud658\ud55c \ucf54\ub4dc \ud558\uc704 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \ucd5c\uc2e0 \uae30\ub2a5\uc744 \ub611\uac19\uc774 \uad6c\ud604\ud55c library? \ud2b8\ub79c\uc2a4\ud30c\uc77c\ub7ec: \ubc14\ubca8\uc740 \uac1c\ubc1c\uc790\uc758 \ucef4\ud4e8\ud130\uc5d0\uc11c \ub3cc\uc544\uac00\ub294\ub370, \uc774\ub97c \uc2e4\ud589\ud558\uba74 \uae30\uc874 \ucf54\ub4dc\uac00 \uad6c \ud45c\uc900\uc744 \uc900\uc218\ud558\ub294 \ucf54\ub4dc\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc6f9\uc744 \ud1b5\ud574 load\ub428, \uc6f9\ud329(webpack) \ud3f4\ub9ac\ud544: \uc0dd\ub7b5 \uc8fc\ubaa9\ud560 \ub9cc\ud55c \ud3f4\ub9ac\ud544 \ub450 \uac00\uc9c0\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. core js \u2013 \ub2e4\uc591\ud55c \ud3f4\ub9ac\ud544\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uae30\ub2a5\uc758 \ud3f4\ub9ac\ud544\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. polyfill.io \u2013 \uae30\ub2a5\uc774\ub098 \uc0ac\uc6a9\uc790\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0 \ub530\ub77c \ud3f4\ub9ac\ud544 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud574\uc8fc\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Babel \ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654 Mocha : describe, it\uacfc \uac19\uc740 \ud14c\uc2a4\ud305 \ud568\uc218\uc640 \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uad00\ub828 \uc8fc\uc694 \ud568\uc218\ub97c \uc81c\uacf5, https://mochajs.org/ Chai \u2013 \ub2e4\uc591\ud55c assertion\uc744 \uc81c\uacf5\ud574 \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac Sinon \u2013 \ud568\uc218\uc758 \uc815\ubcf4\ub97c \uce90\ub0b4\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c, \ub0b4\uc7a5 \ud568\uc218 \ub4f1\uc744 \ubaa8\ubc29 FIXME: https://ko.javascript.info/testing-mocha Comment \uc8fc\uc11d // , /* */ use strict ECMAScript5(ES5) \uae30\ubcf8 \ubb38\ubc95 \uc77c\ubd80 \"use strict\" // ES5 \ubaa8\ub4dc\ub85c \ub3d9\uc791 \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194 \uac1c\ubc1c\ud55c \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud574 \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \uae30\ubcf8\uc801\uc73c\ub85c use strict\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c \uc804\uc5ed \uac1d\uccb4 \ube0c\ub77c\uc6b0\uc800 \ud658\uacbd\uc5d0\uc120 \uc804\uc5ed \uac1d\uccb4\ub97c window , Node.js \ud658\uacbd\uc5d0\uc120 global ( globalThis ) var gVar = 5; // var\ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub294 \uc804\uc5ed \uac1d\uccb4 property) alert(window.gVar); // 5 Polyfill\uc758 \uad6c\ud604 if (!window.Promise) { alert(\"\uad6c\uc2dd \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9 \uc911\uc774\uc2dc\uad70\uc694!\"); } if (!window.Promise) { window.Promise = ... // \ubaa8\ub358 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uad6c\ud604\ud568 } \ubcc0\uc218\uc640 \uc0c1\uc218 javascript primitive variables: \ubb38\uc790(string), \uc22b\uc790(number), bigint, \ubd88\ub9b0(boolean), \uc2ec\ubcfc(symbol), null, undefined\ud615 javascript\uc758 \ubcc0\uc218\ub294 \uac12 \uc218\uc815\uc774 \uc544\ub2c8\ub77c \uad50\uccb4\ub418\ub294 \uac1c\ub150 let message; message = 'Hello'; // \ubb38\uc790\uc5f4\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. alert(message); // \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. // \uc120\uc5b8 \ubc29\ubc95 let user = 'John', age = 25, message = 'Hello'; let user = 'John'; let age = 25; let message = 'Hello'; let user = 'John', age = 25, message = 'Hello'; // var\ub294 let\uacfc \uac70\uc758 \ub3d9\uc77c\ud558\ub098, local\uc5d0\uc11c \uc120\uc5b8\ud558\ub354\ub77c\ub3c4 global var message = 'Hello'; // \uc0c1\uc218 \uc120\uc5b8; \ud55c\ubc88 \ud560\ub2f9\ub418\uba74 \ubcc0\uacbd \ubd88\uac00 const myBirthday = '18.04.1982'; myBirthday = '01.01.2001'; // error, can't reassign the constant! // \ub300\ubb38\uc790 \uc0c1\uc218 (\uc77c\ubc18\uc801 \uad00\uc2b5) const COLOR_RED = \"#F00\"; const COLOR_GREEN = \"#0F0\"; // \uc0c1\uc218 \uc0ac\uc6a9 let color = COLOR_ORANGE; alert(color); // #FF7F00 // \uc544\ub798 \uc0c1\uc218\ub294 \uac12 \ud560\ub2f9 \uc804\uc774\ubbc0\ub85c \uc774\ud6c4 \ud560\ub2f9 \uac00\ub2a5 // \ud560\ub2f9\ud6c4\uc5d0\ub294 \ubcc0\uacbd \ubd88\uac00 const pageLoadTime = ; \ubcc0\uc218 \uba85\uba85 \uaddc\uce59 \ubb38\uc790 \uc640 \uc22b\uc790 , \uadf8\ub9ac\uace0 \uae30\ud638 $ \uc640 _ \uc0ac\uc6a9 \uce74\uba5c \ud45c\uae30\ubc95(camelCase) \uc8fc\ub85c \uc0ac\uc6a9 \uc608\uc57d\uc5b4(reserved name) \uc0ac\uc6a9 X \uccab\ub2e8\uc5b4 \uc22b\uc790 X \ub300\uc18c\ubb38\uc790 \uad6c\ubcc4 \ud568\uc218\ud615 \uc5b8\uc5b4 \ud568\uc218\ud615(functional) \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \ubcc0\uc22b\uac12 \ubcc0\uacbd\uc744 \uae08\uc9c0 e.g. \uc2a4\uce7c\ub77c(Scala)\uc640 \uc5bc\ub7ad(Erlang) \ubcd1\ub82c \uacc4\uc0b0(parallel computation)\uc5d0 \uc720\uc6a9 \uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd \uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd(immediately-invoked function expressions): \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uc2e4\ud589 // IIFE\ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95 (function() { alert(\"\ud568\uc218\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\"); })(); (function() { alert(\"\uc804\uccb4\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\"); }()); !function() { alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\"); }(); +function() { alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ub2e8\ud56d \ub367\uc148 \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\"); }(); \uc790\ub8cc\ud615 \uc22b\uc790\ud615 \uc22b\uc790\ud615 \ubc94\uc704: (2^53-1) ~ -(2^53-1) ; 9007199254740991 BigInt : \ub05d\uc5d0 n \uc744 \ubd99\uc774\uba74 BigInt Infinity : \ubb34\ud55c\ub300, 1/0 \ub85c\ub3c4 \uad6c\ud574\uc9d0 -Infinity NaN : \uacc4\uc0b0 \uc624\ub958, e.g. \"STR\"/2 , \uc218\ub85c \ubb38\uc790\ub97c \ub098\ub20c \uacbd\uc6b0 let n = 123; n = 12.345; // \ub05d\uc5d0 'n'\uc774 \ubd99\uc73c\uba74 BigInt\ud615 \uc790\ub8cc\uc785\ub2c8\ub2e4. const bigInt = 1234567890123456789012345678901234567890n; let billion = 1000000000; let billion = 1e9; // 10\uc5b5, 1\uacfc 9\uac1c\uc758 0 alert( 7.3e9 ); // 73\uc5b5 (7,300,000,000) 1e3 = 1 * 1000 1.23e6 = 1.23 * 1000000 let ms = 0.000001; let ms = 1e-6; // 1\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c 6\ubc88 \uc18c\uc218\uc810 \uc774\ub3d9 // 10\uc744 \uc138 \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214 1e-3 = 1 / 1000 (=0.001) // 10\uc744 \uc5ec\uc12f \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214 1.23e-6 = 1.23 / 1000000 (=0.00000123) // 16, 8, 2\uc9c4\uc218\ud45c\ud604 alert( 0xff ); // 255 alert( 0xFF ); // 255 (\ub300\u00b7\uc18c\ubb38\uc790\ub97c \uac00\ub9ac\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ub458 \ub2e4 \uac19\uc740 \uac12\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.) let a = 0b11111111; // 255\uc758 2\uc9c4\uc218 let b = 0o377; // 255\uc758 8\uc9c4\uc218 alert( a == b ); // true, \uc9c4\ubc95\uc740 \ub2e4\ub974\uc9c0\ub9cc, a\uc640 b\ub294 \uac19\uc740 \uc218\uc784 let num = 255; alert( num.toString(16) ); // ff alert( num.toString(2) ); // 11111111 alert( 123456..toString(36) ); // 2n9c // base36 // Rounding \uc5b4\ub9bc\uc218 Math.floor // \uc18c\uc218\uc810 \uccab\ubc88\uc9f8 \uc790\ub9ac \ubc84\ub9bc Math.ceil // \uc18c\uc218\uc810 \uc62c\ub9bc Math.round // \ubc18\uc62c\ub9bc // https://ko.javascript.info/number // \uc22b\uc790\uac00 \ub108\ubb34 \ucee4\uc9c0\uba74 64\ube44\ud2b8 \uacf5\uac04\uc774 \ub118\uccd0\uc11c Infinity alert( 1e500 ); // Infinity // \uc815\ubc00\ub3c4 \uc190\uc2e4 alert( 0.1 + 0.2 == 0.3 ); // false // \uc815\ubc00\ub3c4 \uc190\uc2e4 \ud655\uc778 toFixed(n), n\uc740 \uc18c\uc218\uc810 \uc790\ub9bf\uc218\uc5d0\uc11c \uc5b4\ub9bc alert( 0.1.toFixed(20) ); // 0.10000000000000000555 let sum = 0.1 + 0.2; alert( sum.toFixed(2) ); // 0.30 isNaN, isFinite // NaN\uc740 NaN \uc790\uae30 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uc5ec \uadf8 \uc5b4\ub5a4 \uac12\uacfc\ub3c4 \uac19\uc9c0 \uc54a\ub2e4\ub294 \uc810\uc5d0\uc11c \ub3c5\ud2b9\ud569\ub2c8\ub2e4. alert( NaN === NaN ); // false alert( isNaN(NaN) ); // true alert( isNaN(\"str\") ); // true alert( isFinite(\"15\") ); // true alert( isFinite(\"str\") ); // false, NaN\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. alert( isFinite(Infinity) ); // false, Infinity\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. parseInt, parseFloat alert( parseInt('100px') ); // 100 alert( parseFloat('12.5em') ); // 12.5 alert( parseInt('12.3') ); // 12, \uc815\uc218 \ubd80\ubd84\ub9cc \ubc18\ud658\ub429\ub2c8\ub2e4. alert( parseFloat('12.3.4') ); // 12.3, \ub450 \ubc88\uc9f8 \uc810\uc5d0\uc11c \uc22b\uc790 \uc77d\uae30\ub97c \uba48\ucda5\ub2c8\ub2e4. alert( parseInt('a123') ); // NaN, a\ub294 \uc22b\uc790\uac00 \uc544\ub2c8\ubbc0\ub85c \uc22b\uc790\ub97c \uc77d\ub294 \uac8c \uc911\uc9c0\ub429\ub2c8\ub2e4. alert( parseInt('0xff', 16) ); // 255 alert( parseInt('ff', 16) ); // 255, 0x\uac00 \uc5c6\uc5b4\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4. alert( parseInt('2n9c', 36) ); // 123456 Math alert( Math.random() ); // 0.1234567894322 alert( Math.random() ); // 0.5435252343232 alert( Math.random() ); // ... (\ubb34\uc791\uc704 \uc218) alert( Math.max(3, 5, -10, 0, 1) ); // 5 alert( Math.min(1, 2) ); // 1 alert( Math.pow(2, 10) ); // 2\uc758 10\uc81c\uacf1 = 1024 // \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c \uae30\ubc95 alert( ~2 ); // -3, -(2+1)\uacfc \uac19\uc74c alert( ~1 ); // -2, -(1+1)\uacfc \uac19\uc74c alert( ~0 ); // -1, -(0+1)\uacfc \uac19\uc74c alert( ~-1 ); // 0, -(-1+1)\uacfc \uac19\uc74c \ubb38\uc790\ud615 character type \uc5c6\uc74c \ud070\ub530\uc634\ud45c: \"Hello\" \uc791\uc740\ub530\uc634\ud45c: 'Hello' \uc5ed \ub530\uc634\ud45c(\ubc31\ud2f1, backtick): Hello \ubb38\uc790\uc5f4 \uae38\uc774: \ubb38\uc790\uc5f4.length \ubb38\uc790 \uc218\uc815 X, \ubb38\uc790\uc5f4\ub85c\ub9cc \ucde8\uae09 \ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc740 UTF-16\uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529 let str = \"Hello\"; let str2 = 'Single quotes are ok too'; let phrase = `can embed another ${str}`; let name = \"John\"; // backtick \uc0ac\uc6a9\uc2dc - \ubcc0\uc218\ub97c \ubb38\uc790\uc5f4 \uc911\uac04\uc5d0 \uc0bd\uc785\ud558\uac70\ub098 \uacc4\uc0b0 \uac00\ub2a5 alert( `Hello, ${name}!` ); // Hello, John! alert( `the result is ${1 + 2}` ); // the result is 3 // multi-lines let guestList = `\uc190\ub2d8: * John * Pete * Mary `; let guestList = \"\uc190\ub2d8:\\n * John\\n * Pete\\n * Mary\"; alert( \"\\u00A9\" ); // \u00a9 alert( \"\\u{20331}\" ); // \u4f6b, \uc911\uad6d\uc5b4(\uae34 \uc720\ub2c8\ucf54\ub4dc) alert( \"\\u{1F60D}\" ); // \ud83d\ude0d, \uc6c3\ub294 \uc5bc\uad74 \uae30\ud638(\uae34 \uc720\ub2c8\ucf54\ub4dc) alert( 'I\\'m the Walrus!' ); // I'm the Walrus! // \ubb38\uc790\uc5f4 \uae38\uc774 alert( `My\\n`.length ); // 3 // \ubb38\uc790 \uc811\uadfc let str = `Hello`; alert( str[0] ); // H alert( str.charAt(0) ); // H alert( str[str.length - 1] ); // o; // \ub9c8\uc9c0\ub9c9 \uae00\uc790 // \ub300\uc18c\ubb38\uc790 alert( 'Interface'.toUpperCase() ); // INTERFACE alert( 'Interface'.toLowerCase() ); // interface // \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucc3e\uae30 let str = 'Widget with id'; alert( str.indexOf('Widget') ); // 0, str\uc740 'Widget'\uc73c\ub85c \uc2dc\uc791\ud568 alert( str.indexOf('widget') ); // -1, indexOf\ub294 \ub300\u00b7\uc18c\ubb38\uc790\ub97c \ub530\uc9c0\ubbc0\ub85c \uc6d0\ud558\ub294 \ubb38\uc790\uc5f4\uc744 \ucc3e\uc9c0 \ubabb\ud568 alert( str.indexOf(\"id\") ); // 1, \"id\"\ub294 \uccab \ubc88\uc9f8 \uc704\uce58\uc5d0\uc11c \ubc1c\uacac\ub428 (Widget\uc5d0\uc11c id) let str = \"As sly as a fox, as strong as an ox\"; let target = \"as\"; let pos = -1; while ((pos = str.indexOf(target, pos + 1)) != -1) { alert( `\uc704\uce58: ${pos}` ); } // bit not \uc5f0\uc0b0\uc790 \uc0ac\uc6a9 \uae30\ubc95 let str = \"Widget\"; if (~str.indexOf(\"Widget\")) { alert( '\ucc3e\uc558\ub2e4!' ); // \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. } alert( \"Widget with id\".includes(\"Widget\") ); // true alert( \"Widget\".startsWith(\"Wid\") ); // true, \"Widget\"\uc740 \"Wid\"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4. alert( \"Widget\".endsWith(\"get\") ); // true, \"Widget\"\uc740 \"get\"\uc73c\ub85c \ub05d\ub0a9\ub2c8\ub2e4. // \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucd94\ucd9c let str = \"stringify\"; alert( str.slice(0, 5) ); // 'strin', 0\ubc88\uc9f8\ubd80\ud130 5\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(5\ubc88\uc9f8 \uc704\uce58\uc758 \uae00\uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c) alert( str.slice(0, 1) ); // 's', 0\ubc88\uc9f8\ubd80\ud130 1\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(1\ubc88\uc9f8 \uc704\uce58\uc758 \uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c) alert( str.slice(2) ); // ringify, 2\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0 alert( str.slice(-4, -1) ); // gif alert( str.substring(2, 6) ); // \"ring\" alert( str.substring(6, 2) ); // \"ring\" let str = \"stringify\"; alert( str.substr(2, 4) ); // ring, \ub450 \ubc88\uc9f8\ubd80\ud130 \uae00\uc790 \ub124 \uac1c // \ubb38\uc790\uc5f4 \ube44\uad50 UTF-16 alert( 'a' > 'Z' ); // true alert( '\u00d6sterreich' > 'Zealand' ); // true alert( \"z\".codePointAt(0) ); // 122 alert( \"Z\".codePointAt(0) ); // 90 alert( String.fromCodePoint(90) ); // Z alert( '\\u005a' ); // Z alert( '\u00d6sterreich'.localeCompare('Zealand') ); // -1 boolean \ud615 let nameFieldChecked = true; let ageFieldChecked = false; let isGreater = 4 > 1; null \uac12 \uc77c\ubc18 null point\uc758 \uc774\ubbf8\uac00 \uc544\ub2c8\ub77c, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294(nothing) \uac12, \ube44\uc5b4 \uc788\ub294(empty) \uac12, \uc54c \uc218 \uc5c6\ub294(unknown) \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370 \uc0ac\uc6a9 let age = null; // \ub098\uc774(age)\ub97c \uc54c \uc218 \uc5c6\uac70\ub098 \uadf8 \uac12\uc774 \ube44\uc5b4\uc788\uc74c undefined \uac12 undefined \ub294 '\uac12\uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\u2019\ub97c \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9 let age; alert(age); // 'undefined' \ucd9c\ub825 object = json ? This is non-primitive type. property : {key: value} pair, key=\ubb38\uc790\ud615, \uc2ec\ubcfc\ud615, value=\ubaa8\ub4e0 \uc790\ub8cc\ud615 dot notation , square bracket notation \uc73c\ub85c property \uc811\uadfc,\ucd94\uac00,\uc0ad\uc81c \uac00\ub2a5 in \uc744 \uc0ac\uc6a9\ud574 property \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778 \uac00\ub2a5 ( true / false ) property\ub294 object\uc5d0 \ucc38\uc870\ub85c \uad6c\ud604\ub428, object\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud560 \uacbd\uc6b0 \uac19\uc740 property\ub97c \ucc38\uc870\ud568 // empty object let user = new Object(); // \uac1d\uccb4 \uc0dd\uc131\uc790\ub85c \uc0dd\uc131 let user = {}; // \uac1d\uccb4 \ub9ac\ud130\ub7f4(object literal)\ub85c \uc0dd\uc131 let user = { // \uac1d\uccb4 name: \"John\", // \ud0a4: \"name\", \uac12: \"John\" age: 30, // \ud0a4: \"age\", \uac12: 30 \"likes birds\": true // \ubcf5\uc218\uc758 \ub2e8\uc5b4\ub294 \ub530\uc634\ud45c }; alert( user.name ); // John, dot notation\uc744 \uc0ac\uc6a9\ud574 \uc811\uadfc alert( user[\"name\"] ); // square bracket notation\uc744 \uc0ac\uc6a9\ud55c \uc811\uadfc user.likes birds = false; // error, \uad6c\ubb38\ud574\uc11d \ubd88\ub2a5 user[\"likes birds\"] = false; // ok alart( user.weight === undefined ); // property\uac00 \uc5c6\uc744 \uacbd\uc6b0, undefined alart( user[\"weight\"] === undefined ); alart( \"key\" in user ); // in \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud574 \uc874\uc7ac\uc720\ubb34 \ud655\uc778 user.isAdmin = true; // add property delete user.age; // delete a property delete user[\"likes birds\"]; let user = { name: \"John\", age: 30, }; // computed property! let fruit = \"apple\" let fruit2 = \"banana\" let bag = { [fruit]: 5, // fruit\ub97c key\ub85c \uc0ac\uc6a9 [fruit + 'Computers']: 5 // key\ub85c \ubcf5\ud569 \uc5f0\uc0b0 \uac00\ub2a5 }; bag[fruit2] = 6; // fruit2\ub97c key\ub85c \uc0ac\uc6a9 alert( bag.apple ); // fruit\uc5d0 \"apple\"\uc774 \ud560\ub2f9\ub418\uc5c8\ub2e4\uba74, 5\uac00 \ucd9c\ub825 // property value shorthand (\ub2e8\ucd95 \uad6c\ubb38) function makeUser(name, age) { return { name, // name: name \uacfc \uac19\uc74c age, // age: age \uc640 \uac19\uc74c // ... }; } let user = { name, // name: name \uacfc \uac19\uc74c age: 30 }; // property iteration for (key in object) { // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. } // object\uc758 property\ub294 \uc120\uc5b8\ud560 \ud544\uc694\uc5c6\uc74c function marry(man, woman) { woman.husband = man; man.wife = woman; return { father: man, mother: woman } } let family = marry({ name: \"John\" }, { name: \"Ann\" }); const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5 const user = { name: \"John\" }; user.name = \"Pete\"; // (*) alert(user.name); // Pete \uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok // \uc608\uc57d\uc5b4\ub97c \ud0a4\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. let obj = { for: 1, let: 2, return: 3 }; \ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658 let obj = { 0: \"test\" // \"0\": \"test\"\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. }; alert( obj[\"0\"] ); // test alert( obj[0] ); // test object \ube44\uad50 let a = {}; let b = a; // \ucc38\uc870\uc5d0 \uc758\ud55c \ubcf5\uc0ac alert( a == b ); // true, \ub450 \ubcc0\uc218\ub294 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4. alert( a === b ); // true let a = {}; let b = {}; // \ub3c5\ub9bd\ub41c \ub450 \uac1d\uccb4 alert( a == b ); // false \uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign property loop\ub97c \ud1b5\ud574\uc11c \ubcf5\uc0ac Object.assign(dest, [src1, src2, src3...]) \uc0ac\uc6a9 \uae4a\uc740 \ubcf5\uc0ac(deep cloning)\ub294 \uc9c1\uc811 \ub9cc\ub4e4\ub358\uc9c0, lodash\uc758 _.cloneDeep(obj) \uc0ac\uc6a9 let user = { name: \"John\", age: 30 }; let clone = {}; // \uc0c8\ub85c\uc6b4 \ube48 \uac1d\uccb4 // \ube48 \uac1d\uccb4\uc5d0 user \ud504\ub85c\ud37c\ud2f0 \uc804\ubd80\ub97c \ubcf5\uc0ac\ud574 \ub123\uc2b5\ub2c8\ub2e4. for (let key in user) { clone[key] = user[key]; } // Object.assign \uc0ac\uc6a9 let user = { name: \"John\" }; let permissions1 = { canView: true }; let permissions2 = { canEdit: true }; // permissions1\uacfc permissions2\uc758 \ud504\ub85c\ud37c\ud2f0\ub97c user\ub85c \ubcf5\uc0ac Object.assign(user, permissions1, permissions2); Methods and this \uac1c\uccb4\uc758 \ub3d9\uc791\uc744 \uba85\uc138 = property\uc5d0 \ud560\ub2f9\ub41c \ud568\uc218 this : method\uc5d0\uc11c \ud574\ub2f9 \uac1d\uccb4\uc758 property \uc811\uadfc\uc744 \uc704\ud574 \uc0ac\uc6a9 Arrow function\uc740 this \uac00 \uc5c6\uc74c, \ubcc4\uac1c\uc758 this\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \uac74 \uc6d0\ud558\uc9c0 \uc54a\uace0, \uc678\ubd80 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \uc788\ub294 this\ub97c \uc774\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 \ud654\uc0b4\ud45c \ud568\uc218\uac00 \uc720\uc6a9 let user = { sayHi: function() { alert(\"Hello\"); } }; // method \ucd95\uc57d\ud615 let user = { sayHi() { // \"sayHi: function()\"\uacfc \ub3d9\uc77c alert(\"Hello\"); } }; // Arrow function\uc740 \uc0c1\uc704 namespace\uc758 this\ub97c \uac00\uc838\uc634 let user = { firstName: \"\ubcf4\ub77c\", sayHi() { let arrow = () => alert(this.firstName); arrow(); } }; user.sayHi(); // sayHi\uc758 this \ucc28\uc6a9; \uacb0\uacfc '\ubcf4\ub77c' \uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function - \uc0dd\uc131\uc790 \ud568\uc218(constructor function)\uc640 \uc77c\ubc18 \ud568\uc218\uc5d0 \uae30\uc220\uc801\uc778 \ucc28\uc774\ub294 \uc5c6\uc74c \uad00\ub8401: \ud568\uc218 \uc774\ub984\uc758 \uccab \uae00\uc790\ub294 \ub300\ubb38\uc790\ub85c \uc2dc\uc791 \uad00\ub8402: \ubc18\ub4dc\uc2dc 'new' \uc5f0\uc0b0\uc790\ub97c \ubd99\uc5ec \uc2e4\ud589 new Constructor(...) \uc2dc \ube48 \uac1d\uccb4 \uc0dd\uc131, this\uc5d0 \ud560\ub2f9 \ud568\uc218 \uc2e4\ud589 => property \ucd94\uac00 \uc0dd\uc131\ub41c this\ub97c \ubc18\ud658 // constructor function function User(name) { // this = {}; (\ube48 \uac1d\uccb4\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9d0) // \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud37c\ud2f0\ub97c this\uc5d0 \ucd94\uac00\ud568 this.name = name; this.isAdmin = false; // return this; (this\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ubc18\ud658\ub428) } let user = new User(\"\ubcf4\ub77c\"); alert(user.isAdmin); // false // \uc775\uba85 \uc0dd\uc131\uc790 (anonymous constructor) - \ud55c\ubc88\ub9cc \uc0ac\uc6a9 let user = new function() { this.name = \"John\"; this.isAdmin = false; }; // new.target\uc73c\ub85c constructor\uac00 new\ud568\uaed8 \ud638\ucd9c\ub418\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\uc74c. function User() { alert(new.target); } // 'new' \uc5c6\uc774 \ud638\ucd9c\ud568 User(); // undefined // 'new'\ub97c \ubd99\uc5ec \ud638\ucd9c\ud568 new User(); // function User { ... } // \uc0dd\uc131\uc790 () \uad04\ud638 \uc0dd\ub7b5 let user = new User; // <-- \uad04\ud638\uac00 \uc5c6\uc74c let user = new User(); // \uc704 \ucf54\ub4dc\uc640 \ub611\uac19\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4. // \uc0dd\uc131\uc790\uc5d0\uc11c method \ucd94\uac00 function User(name) { this.name = name; this.sayHi = function() { alert( \"\uc81c \uc774\ub984\uc740 \" + this.name + \"\uc785\ub2c8\ub2e4.\" ); }; } let bora = new User(\"\uc774\ubcf4\ub77c\"); bora.sayHi(); // \uc81c \uc774\ub984\uc740 \uc774\ubcf4\ub77c\uc785\ub2c8\ub2e4. \uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) ?. , ?.() , ?.[] property \uc874\uc7ac \uc720\ubb34 \ud3c9\uac00 method\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5 property \uc4f0\uae30\uc5d0\ub294 \uc0ac\uc6a9 \ubd88\uac00 let user = {}; // \uc8fc\uc18c \uc815\ubcf4\uac00 \uc5c6\ub294 \uc0ac\uc6a9\uc790 alert(user.address.street); // TypeError: Cannot read property 'street' of undefined alert( user && user.address && user.address.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. alert( user?.address?.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. <= optional chaining // \ud568\uc218 \ud638\ucd9c\uc5d0\ub3c4 \uc0ac\uc6a9 let user1 = { firstName: \"Violet\" admin() { alert(\"\uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\"); } } let user2 = {}; user1.admin?.(); // \uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4. user2.admin?.(); alert( user1?.[\"firstName\"] ); // Violet object \uc21c\ud68c \ud568\uc218 \uc544\ub798 \ud568\uc218\ub294 \u2018\uc9c4\uc9dc\u2019 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\uba70, Symbol\uc740 \ubb34\uc2dc Object.keys(obj) : \uac1d\uccb4\uc758 \ud0a4\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.values(obj) : \uac1d\uccb4\uc758 \uac12\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.entries(obj) : [\ud0a4, \uac12] \uc30d\uc744 \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.fromEntries(array) : Object.entries(obj) \uc758 \uc5ed\ubcc0\ud658 let user = { name: \"John\", age: 30 }; // Object.keys(user) = [\"name\", \"age\"] // Object.values(user) = [\"John\", 30] // Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ] for (let value of Object.values(user)) { alert(value); } let prices = { banana: 1, orange: 2, meat: 4, }; let doublePrices = Object.fromEntries( // \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ubcc0\ud658\ud574\uc11c \ubc30\uc5f4 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc778 map\uc744 \uc801\uc6a9\ud558\uace0 fromEntries\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc744 \ub2e4\uc2dc \uac1d\uccb4\ub85c \ub418\ub3cc\ub9bd\ub2c8\ub2e4. Object.entries(prices).map(([key, value]) => [key, value * 2]) ); alert(doublePrices.meat); // 8 symbol \uc678\ubd80 \uac1d\uccb4\uc5d0 \uc790\uc2e0\uc758 \uc815\ubcf4\ub97c hidden property\ub85c \ucd94\uac00\uc2dc \uc720\uc6a9 for..in \ubc18\ubcf5\ubb38\uc5d0\uc11c \ubc30\uc81c Object.assign \uc740 symbol\ub3c4 \ubcf5\uc0ac\ud568 global symbol registry : global \uc601\uc5ed\uc5d0 symbol\uc744 \uc800\uc7a5, script \uacf3\uacf3\uc5d0\uc11c symbol\uc744 \ud638\ucd9c\ud558\uc5ec \uc0ac\uc6a9 system symbol : javascript \ub0b4\ubd80 symbol; https://tc39.github.io/ecma262/#sec-well-known-symbols Symbol.hasInstance Symbol.isConcatSpreadable Symbol.iterator Symbol.toPrimitive let id = Symbol(\"id\"); alert(id); // TypeError: Cannot convert a Symbol value to a string alert(id.toString()); // Symbol(id)\uac00 \uc5bc\ub7ff \ucc3d\uc5d0 \ucd9c\ub825\ub428 alert(id.description); // id // Hidden property let user = { // \uc11c\ub4dc\ud30c\ud2f0 \ucf54\ub4dc\uc5d0\uc11c \uac00\uc838\uc628 \uac1d\uccb4 name: \"John\" }; let id = Symbol(\"id\"); user[id] = 1; alert( user[id] ); // \uc2ec\ubcfc\uc744 \ud0a4\ub85c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. // \ub2e4\ub978 \ubc29\ubc95 let id = Symbol(\"id\"); let user = { name: \"John\", [id]: 123 // \"id\": 123\uc740 \uc548\ub428 }; // Object.assign\uacfc symbol \ub3d9\uc791 let id = Symbol(\"id\"); let user = { [id]: 123 }; let clone = Object.assign({}, user); alert( clone[id] ); // 123 // \uc804\uc5ed \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0\uc11c \uc2ec\ubcfc \uc77d\uae30 let id = Symbol.for(\"id\"); // \uc2ec\ubcfc\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c\uc6b4 \uc2ec\ubcfc \uc0dd\uc131 let idAgain = Symbol.for(\"id\"); alert( id === idAgain ); // true // \uc2ec\ubcfc\uc744 \uc774\uc6a9\ud574 \uc774\ub984\uc744 \uc5bb\uc74c alert( Symbol.keyFor(id) ); // \"id\" alert( Symbol.keyFor(localSymbol) ); // \uc804\uc5ed \uc2ec\ubcfc\uc774 \uc544\ub2d8, undefined \ubc18\ud658 \uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive \uac1d\uccb4\uc5d0 obj[Symbol.toPrimitive](hint) \uba54\uc11c\ub4dc\uac00 \uc788\ub294\uc9c0 \ucc3e\uace0, \uc788\ub2e4\uba74 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. Symbol.toPrimitive \ub294 \uc2dc\uc2a4\ud15c \uc2ec\ubcfc\ub85c, \uc2ec\ubcfc\ud615 \ud0a4\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. 1\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0 hint\uac00 \"string\"\uc774\ub77c\uba74, obj.toString() \uc774\ub098 obj.valueOf() \ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428). 1\uacfc 2\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0, hint\uac00 \"number\"\ub098 \"default\"\ub77c\uba74 obj.valueOf() \ub098 obj.toString() \uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428). hint\ub294 \"string\", \"number\", \"default\" \uc911 \ud558\ub098 let user = { name: \"John\", money: 1000, [Symbol.toPrimitive](hint) { alert(`hint: ${hint}`); return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money; } }; // \ub370\ubaa8: alert(user); // hint: string -> {name: \"John\"} alert(+user); // hint: number -> 1000 alert(user + 500); // hint: default -> 1500 // toString, valueOf let user = { name: \"John\", money: 1000, // hint\uac00 \"string\"\uc778 \uacbd\uc6b0 toString() { return `{name: \"${this.name}\"}`; }, // hint\uac00 \"number\"\ub098 \"default\"\uc778 \uacbd\uc6b0 valueOf() { return this.money; } }; alert(user); // toString -> {name: \"John\"} alert(+user); // valueOf -> 1000 alert(user + 500); // valueOf -> 1500 iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator \uc8fc\ub85c array\uc5d0 \uc0ac\uc6a9\ub418\ub358 for..in \uc774 \ub3d9\uc791 \uac00\ub2a5\ud568 next() \ub2e4\uc74c \uac12 iterater\ub97c \ubc18\ud658 let range = { from: 1, to: 5, [Symbol.iterator]() { this.current = this.from; return this; }, next() { if (this.current <= this.to) { return { done: false, value: this.current++ }; } else { return { done: true }; } } }; for (let num of range) { alert(num); // 1, then 2, 3, 4, 5 } \ubb38\uc790\uc5f4 = iterable for (let char of \"test\") { // \uae00\uc790 \ud558\ub098\ub2f9 \ud55c \ubc88 \uc2e4\ud589\ub429\ub2c8\ub2e4(4\ud68c \ud638\ucd9c). alert( char ); // t, e, s, t\uac00 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\ub428 } Array.from \uc73c\ub85c \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uae30 let arrayLike = { 0: \"Hello\", 1: \"World\", length: 2 }; let arr = Array.from(arrayLike); // (*) alert(arr.pop()); // World (\uba54\uc11c\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.) Array push\uc640 pop\uc740 \ube60\ub974\uc9c0\ub9cc shift\uc640 unshift\ub294 \ub290\ub9bc https://ko.javascript.info/array for..in loop \uc0ac\uc6a9\uc2dc \ub0b4\ubd80 property\ub85c \uac19\uc774 \uc21c\ud68c\ud558\ubbc0\ub85c \uc0ac\uc6a9 X // \uc120\uc5b8 let arr = new Array(); let arr = []; let arr = new Array(2); // [undefined, undefined] let fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\"]; let fruits = [ \"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\", ]; let matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]; // \uc811\uadfc alert( fruits[0] ); // \uc0ac\uacfc fruits[2] = '\ubc30'; // \ud06c\uae30 alert( fruits.length ); // 3 // \ubcf5\ud569 \ubc30\uc5f4 let arr = [ '\uc0ac\uacfc', { name: '\uc774\ubcf4\ub77c' }, true, function() { alert('\uc548\ub155\ud558\uc138\uc694.'); } ]; // pop\u00b7push\uc640 shift\u00b7unshift let fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"]; alert( fruits.pop() ); // \ubc30\uc5f4\uc5d0\uc11c \"\ubc30\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4. alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0 fruits.push(\"\ubc30\"); alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30 alert( fruits.shift() ); // \ubc30\uc5f4\uc5d0\uc11c \"\uc0ac\uacfc\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4. alert( fruits ); // \uc624\ub80c\uc9c0,\ubc30 fruits.unshift('\uc0ac\uacfc'); // \uc55e\uc5d0 \uc694\uc18c \ucd94\uac00 alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30 // \uc5ec\ub7ec \uc694\uc18c \uc0bd\uc785 fruits.push(\"\uc624\ub80c\uc9c0\", \"\ubc30\"); fruits.unshift(\"\ud30c\uc778\uc560\ud50c\", \"\ub808\ubaac\"); // \uc694\uc18c \uc0ad\uc81c let arr = [\"I\", \"go\", \"home\"]; delete arr[1]; // \"go\"\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4. arr.splice(1, 1); // \uc778\ub371\uc2a4 1\ubd80\ud130 \uc694\uc18c \ud55c \uac1c\ub97c \uc81c\uac70 // \uc694\uc18c \ub300\uccb4 let arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"]; // \ucc98\uc74c(0) \uc138 \uac1c(3)\uc758 \uc694\uc18c\ub97c \uc9c0\uc6b0\uace0, \uc774 \uc790\ub9ac\ub97c \ub2e4\ub978 \uc694\uc18c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4. arr.splice(0, 3, \"Let's\", \"dance\"); alert( arr ) // now [\"Let's\", \"dance\", \"right\", \"now\"] // \uc694\uc18c \ucd94\uac00 (deleteCount\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc694\uc18c\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub97c \ucd94\uac00) arr.splice(2, 0, \"complex\", \"language\"); // slicing, concat let arr = [1, 2]; // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4]) ); // 1,2,3,4 // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, [5,6]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6 // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, 5\uc640 6\uc744 \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6 let arr = [\"t\", \"e\", \"s\", \"t\"]; alert( arr.slice(1, 3) ); // e,s (\uc778\ub371\uc2a4\uac00 1\uc778 \uc694\uc18c\ubd80\ud130 \uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac(\uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\ub294 \uc81c\uc678)) alert( arr.slice(-2) ); // s,t (\uc778\ub371\uc2a4\uac00 -2\uc778 \uc694\uc18c\ubd80\ud130 \uc81c\uc77c \ub05d \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac) // \ubc18\ubcf5\ubb38, \uc21c\ud68c let arr = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"]; for (let i = 0; i < arr.length; i++) { alert( arr[i] ); } // for..of for (let fruit of fruits) { alert( fruit ); } arr.forEach(function(item, index, array) { // \uc694\uc18c\uc5d0 \ubb34\uc5b8\uac00\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. }); [\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach(alert); [\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) => { alert(`${item} is at index ${index} in ${array}`); }); // \ubc30\uc5f4 \ud0d0\uc0c9: indexOf, lastIndexOf\uc640 includes let arr = [1, 0, false]; alert( arr.indexOf(0) ); // 1 alert( arr.indexOf(false) ); // 2 alert( arr.indexOf(null) ); // -1 alert( arr.includes(1) ); // true const arr = [NaN]; alert( arr.indexOf(NaN) ); // -1 (\uc644\uc804 \ud56d\ub4f1 \ube44\uad50 === \ub294 NaN\uc5d4 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c 0\uc774 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.) alert( arr.includes(NaN) );// true (NaN\uc758 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.) let result = arr.find(function(item, index, array) { }); let users = [ {id: 1, name: \"John\"}, {id: 2, name: \"Pete\"}, {id: 3, name: \"Mary\"} ]; let user = users.find(item => item.id == 1); alert(user.name); // John // \uc870\uac74 \ud0d0\uc0c9 let users = [ {id: 1, name: \"John\"}, {id: 2, name: \"Pete\"}, {id: 3, name: \"Mary\"} ]; // \uc55e\ucabd \uc0ac\uc6a9\uc790 \ub450 \uba85\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. let someUsers = users.filter(item => item.id < 3); alert(someUsers.length); // 2 mapping function for array \ubc30\uc5f4\uc744 \ubcc0\ud615\uc2dc\ud0a4\uac70\ub098 \uc694\uc18c\ub97c \uc7ac \uc815\ub82c\ud574\uc8fc\ub294 \uba54\uc11c\ub4dc let result = arr.map(function(item, index, array) { // \uc694\uc18c \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. }); let lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item => item.length); alert(lengths); // 5,7,6 sort let arr = [ 1, 2, 15 ]; arr.sort(); // arr \ub0b4\ubd80\uac00 \uc7ac \uc815\ub82c\ub429\ub2c8\ub2e4. alert( arr ); // 1, 15, 2 function compareNumeric(a, b) { if (a > b) return 1; if (a == b) return 0; if (a < b) return -1; } let arr = [ 1, 2, 15 ]; arr.sort(compareNumeric); alert(arr); // 1, 2, 15 [1, -2, 15, 2, 0, 8].sort(function(a, b) { alert( a + \" <> \" + b ); return a - b; }); // arrow function \uc0ac\uc6a9 arr.sort( (a, b) => a - b ); // \ubb38\uc790\uc5f4 \uc815\ub82c\uc2dc\uc5d0\ub294 localeCompare \uc0ac\uc6a9 let countries = ['\u00d6sterreich', 'Andorra', 'Vietnam']; alert( countries.sort( (a, b) => a > b ? 1 : -1) ); // Andorra, Vietnam, \u00d6sterreich (\uc81c\ub300\ub85c \uc815\ub82c\uc774 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.) alert( countries.sort( (a, b) => a.localeCompare(b) ) ); // Andorra,\u00d6sterreich,Vietnam (\uc81c\ub300\ub85c \uc815\ub82c\ub418\uc5c8\ub124\uc694!) // \uc5ed\uc815\ub82c let arr = [1, 2, 3, 4, 5]; arr.reverse(); alert( arr ); // 5,4,3,2,1 \ubb38\uc790\uc5f4 <==> \ubc30\uc5f4 let names = 'Bilbo, Gandalf, Nazgul'; let arr = names.split(', '); for (let name of arr) { alert( `${name}\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0` ); // Bilbo\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0 } let str = \"test\"; alert( str.split('') ); // t,e,s,t let arr = ['Bilbo', 'Gandalf', 'Nazgul']; let str = arr.join(';'); // \ubc30\uc5f4 \uc694\uc18c \ubaa8\ub450\ub97c ;\ub97c \uc0ac\uc6a9\ud574 \ud558\ub098\uc758 \ubb38\uc790\uc5f4\ub85c \ud569\uce69\ub2c8\ub2e4. alert( str ); // Bilbo;Gandalf;Nazgul reduce\uc640 reduceRight (\ub204\uc0b0\uae30) let value = arr.reduce(function(accumulator, item, index, array) { // ... }, [initial]); let arr = [1, 2, 3, 4, 5]; let result = arr.reduce((sum, current) => sum + current, 0); alert(result); // 15 \ubc30\uc5f4\uc778\uc9c0 \ud655\uc778 alert(Array.isArray({})); // false alert(Array.isArray([])); // true map \uac1d\uccb4\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, key\uc5d0 \ub2e4\uc591\ud55c \uc790\ub8cc\ud615 \uc9c0\uc6d0 \ub418\ub3c4\ub85d get(), set()\uc744 \uc0ac\uc6a9? map\uc740 \ud0a4\ub85c \uac1d\uccb4\ub97c \ud5c8\uc6a9 SameValueZero \ub77c \ubd88\ub9ac\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uac12\uc758 \ub4f1\uac00 \uc5ec\ubd80\ub97c \ud655\uc778 call chaining \uc0ac\uc6a9\uac00\ub2a5: \ud638\ucd9c\ub9c8\ub2e4 map \uc790\uc2e0\uc744 \ubc18\ud658\ud568 \uc0bd\uc785 \uc21c\uc11c\ub97c \uae30\uc5b5\ud568 = ordered map Object.entries : \uac1d\uccb4\ub97c map\uc73c\ub85c \ubc14\uafb8\uae30 Object.fromEntries : map\uc744 \uac1d\uccb4\ub85c \ubc14\uafb8\uae30 \uc81c\uacf5 \ud568\uc218 new Map() : \uc0dd\uc131 map.set(key, value) : {key: value} \uc800\uc7a5 map.get(key) : value \ubc18\ud658, key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 undefined map.has(key) : true if the key exists map.delete(key) : key, value \uc0ad\uc81c map.clear() : clear all in the map. map.size : size of the map map.keys() : \uac01 \uc694\uc18c\uc758 \ud0a4\ub97c \ubaa8\uc740 \ubc18\ubcf5 \uac00\ub2a5\ud55c(iterable, \uc774\ud130\ub7ec\ube14) \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.values() : \uac01 \uc694\uc18c\uc758 \uac12\uc744 \ubaa8\uc740 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.entries() : \uc694\uc18c\uc758 [\ud0a4, \uac12]\uc744 \ud55c \uc30d\uc73c\ub85c \ud558\ub294 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.forEach((value, key, map) => {}) : map\uc758 {key: value} \uc21c\ud68c let map = new Map(); map.set('1', 'str1'); // \ubb38\uc790\ud615 \ud0a4 map.set(1, 'num1'); // \uc22b\uc790\ud615 \ud0a4 map.set(true, 'bool1'); // \ubd88\ub9b0\ud615 \ud0a4 // map\uc740 key\uc758 \ud0c0\uc785\uc744 \ubcc0\ud658\uc2dc\ud0a4\uc9c0 \uc54a\uace0 \uadf8\ub300\ub85c \uc720\uc9c0 alert( map.get(1) ); // 'num1' alert( map.get('1') ); // 'str1' alert( map.size ); // 3 // map call chaining map.set('1', 'str1') .set(1, 'num1') .set(true, 'bool1'); // map \uc694\uc18c \ubc18\ubcf5\ubb38 let recipeMap = new Map([ ['cucumber', 500], ['tomatoes', 350], ['onion', 50] ]); // \ud0a4(vegetable)\ub97c \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let vegetable of recipeMap.keys()) { alert(vegetable); // cucumber, tomatoes, onion } // \uac12(amount)\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let amount of recipeMap.values()) { alert(amount); // 500, 350, 50 } // [\ud0a4, \uac12] \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let entry of recipeMap) { // recipeMap.entries()\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. alert(entry); // cucumber,500 ... } // \uac01 (\ud0a4, \uac12) \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \ud568\uc218\ub97c \uc2e4\ud589 recipeMap.forEach( (value, key, map) => { alert(`${key}: ${value}`); // cucumber: 500 ... }); // map\uc73c\ub85c \ubcc0\ud658 let map = new Map([ // \uac01 \uc694\uc18c\uac00 [\ud0a4, \uac12] \uc30d\uc778 \ubc30\uc5f4 ['1', 'str1'], [1, 'num1'], [true, 'bool1'] ]); alert( map.get('1') ); // str1 let obj = { name: \"John\", age: 30 }; let map = new Map(Object.entries(obj)); alert( map.get('name') ); // John // map\uc744 object\ub85c \ubcc0\ud658 let prices = Object.fromEntries([ ['banana', 1], ['orange', 2], ['meat', 4] ]); set \uac12\uc758 \uc911\ubcf5 \ubd88\uac00\ud55c collection\uc73c\ub85c call chaining \uc0ac\uc6a9\uac00\ub2a5 new Set(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac set.add(value) : \uac12\uc744 \ucd94\uac00 set.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false. set.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658 set.clear() : set\uc758 \ubaa8\ub4e0 \uac12 \uc0ad\uc81c set.size : set \ub0b4 \uc694\uc18c\uc758 \uc218 set.forEach((value, valueAgain, set) => {}) : set \uc694\uc18c \ubc18\ubcf5 \uc21c\ud68c set.keys() set.values() set.entries() let set = new Set(); let john = { name: \"John\" }; let pete = { name: \"Pete\" }; let mary = { name: \"Mary\" }; set.add(john); set.add(pete); set.add(mary); set.add(john); set.add(mary); alert( set.size ); // 3 for (let user of set) { alert(user.name); // // John, Pete, Mary \uc21c\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4. } // forEach set.forEach((value, valueAgain, set) => { alert(value); }); WeakMap and WeakSet WeakMap\uc740 object\ub9cc\uc744 key\ub85c \uc0ac\uc6a9\ud558\uba70, object\uac00 unreachable\ud558\uba74, WeakMap\uc5d0 key\ub3c4 Garbage collection\uc5d0 \uc758\ud574 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc790\ub3d9\ud574\uc81c\ub428 WeakMap\uc740 \ubd80\ucc28\uc801\uc778 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uacf3\uc774 \ud544\uc694\ud560 \ub54c \uc720\uc6a9 e.g. \uc0ac\uc6a9\uc790 \ubc29\ubb38\ud69f\uc218, caching weakMap.get(key) weakMap.set(key, value) weakMap.delete(key) weakMap.has(key) WeakSet\ub3c4 WeakMap\uacfc \uc720\uc0ac\ud558\ub098 \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. new WeakSet(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac weakSet.add(value) : \uac12\uc744 \ucd94\uac00 weakSet.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false. weakSet.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658 let john = { name: \"John\" }; let weakMap = new WeakMap(); weakMap.set(john, \"...\"); john = null; // \ucc38\uc870\ub97c \ub36e\uc5b4\uc500 // john\uc744 \ub098\ud0c0\ub0b4\ub294 \uac1d\uccb4\ub294 \uc774\uc81c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc9c0\uc6cc\uc9d1\ub2c8\ub2e4! // caching let cache = new WeakMap(); // \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \uc704\ud06c\ub9f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. function process(obj) { if (!cache.has(obj)) { let result = /* \uc5f0\uc0b0 \uc218\ud589 */ obj; cache.set(obj, result); } return cache.get(obj); } // \ud83d\udcc1 main.js let obj = {/* ... \uac1d\uccb4 ... */}; let result1 = process(obj); let result2 = process(obj); // \uac1d\uccb4\uac00 \uc4f8\ubaa8\uc5c6\uc5b4\uc9c0\uba74 \uc544\ub798\uc640 \uac19\uc774 null\ub85c \ub36e\uc5b4\uc501\ub2c8\ub2e4. obj = null; Date UTC \uae30\uc900(UTC+0) 1970\ub144 1\uc6d4 1\uc77c 0\uc2dc 0\ubd84 0\ucd08\uc5d0\uc11c milliseconds \ud6c4\uc758 \uc2dc\uac04\uac12\uc744 \uc800\uc7a5\ud558\ub294 object new Date(milliseconds) new Date(datestring) new Date(year, month, date, hours, minutes, seconds, ms) getFullYear() , getMonth() , getDate() , getHours() , getMinutes() , getSeconds() , getMilliseconds() getDay() : \uc694\uc77c getUTCFullYear() , getUTCMonth() , getUTCDay() : UTC timezone getTime() : returns timestamp getTimezoneOffset() : offset from UTC basetime setFullYear(year, [month], [date]) setMonth(month, [date]) setDate(date) setHours(hour, [min], [sec], [ms]) setMinutes(min, [sec], [ms]) setSeconds(sec, [ms]) setMilliseconds(ms) setTime(milliseconds) let date = new Date(\"2017-01-26\"); let now = new Date(); alert( now ); // \ud604\uc7ac \ub0a0\uc9dc \ubc0f \uc2dc\uac04\uc774 \ucd9c\ub825\ub428 let timestamp = Date.now() // current timestamp Autocorrection let date = new Date(2013, 0, 32); // 2013\ub144 1\uc6d4 32\uc77c alert(date); // 2013\ub144 2\uc6d4 1\uc77c alert(+date); // \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658 (timestamp) Benchmarking Test function diffGetTime(date1, date2) { return date2.getTime() - date1.getTime(); } Date.parse YYYY-MM-DDTHH:mm:ss.sssZ+-hh:mm \ud615\uc2dd\uc758 \ubb38\uc790\ub97c parsing\ud558\uc5ec Data object\ub85c \ubc18\ud658 let ms = Date.parse('2012-01-26T13:51:50.417-07:00'); JSON (JavaScript Object Notation) Serialization javascript\uc758 object\uc758 serialization \uae30\uc220\ub85c RFC4627\ub85c \ud45c\uc900\ud654 JSON.stringify : It serializes an object to a JSON-encoded string. JSON.parse : It de-serializes an object from a JSON-encoded string. \ud45c\ud604 \uc790\ub8cc\ud615: object , array , string , number , boolean , null \uc774\uc678 \uc790\ub8cc\ud615\uc740 \ubaa8\ub450 ignored \uc21c\ud658 \ucc38\uc870 object\uac00 \uc788\uc744 \uacbd\uc6b0 error let student = { name: 'John', age: 30, isAdmin: false, courses: ['html', 'css', 'js'], wife: null }; let json = JSON.stringify(student); alert(typeof json); // string alert(json); // {\"name\":\"John\",\"age\":30,\"isAdmin\":false,\"courses\":[\"html\",\"css\",\"js\"],\"wife\":null} alart(JSON.stringify(json)); // \uc21c\ud658 \ucc38\uc870\uc2dc error let room = { number: 23 }; let meetup = { title: \"Conference\", participants: [\"john\", \"ann\"] }; meetup.place = room; // meetup\uc740 room\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. room.occupiedBy = meetup; // room\uc740 meetup\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. JSON.stringify(meetup); // Error: Converting circular structure to JSON // \uc6d0\ud558\ub294 \uac12\ub9cc \ucd94\ucd9c // let json = JSON.stringify(value[, replacer, space]) let room = { number: 23 }; let meetup = { title: \"Conference\", participants: [{name: \"John\"}, {name: \"Alice\"}], place: room // meetup references room }; room.occupiedBy = meetup; // room references meetup alert( JSON.stringify(meetup, ['title', 'participants', 'place', 'name', 'number']) ); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}} // replacer \uc0ac\uc6a9 alert( JSON.stringify(meetup, function replacer(key, value) { return (key == 'occupiedBy') ? undefined : value; })); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}} // reviver \uc0ac\uc6a9 let str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}'; let meetup = JSON.parse(str); alert( meetup.date.getDate() ); // \uc5d0\ub7ec! meetup = JSON.parse(str, function(key, value) { if (key == 'date') return new Date(value); return value; }); alert( meetup.date.getDate() ); // 30 toJSON() for customized serialization let room = { number: 23, toJSON() { return this.number; } }; let meetup = { title: \"Conference\", room }; alert( JSON.stringify(room) ); // 23 alert( JSON.stringify(meetup) ); // {\"title\":\"Conference\",\"room\":23} typeof typeof X \uc5f0\uc0b0\uc790\ub294 \uc778\uc218\uc758 \uc790\ub8cc\ud615\uc744 \ubb38\uc790\uc5f4\ub85c \ubc18\ud658 \uc790\ub8cc\ud615\uc5d0 \ub530\ub77c \ucc98\ub9ac \ubc29\uc2dd\uc744 \ub2e4\ub974\uac8c \ud560 \uacbd\uc6b0 \uc0ac\uc6a9 \ubcc0\uc218\uc758 \uc790\ub8cc\ud615 \ud655\uc778\uc5d0 \uc0ac\uc6a9 \uc5f0\uc0b0\uc790\ud615 \uc0ac\uc6a9: typeof x \ud568\uc218\ud615 \uc0ac\uc6a9: typeof(x) typeof undefined // \"undefined\" typeof 0 // \"number\" typeof 10n // \"bigint\" typeof true // \"boolean\" typeof \"foo\" // \"string\" typeof Symbol(\"id\") // \"symbol\" typeof Math // \"object\" (1) typeof null // \"object\" (2) typeof alert // \"function\" (3) Browser functions alart : \uba54\uc2dc\uc9c0\uac00 \uc788\ub294 \uc791\uc740 \ucc3d, \ubaa8\ub2ec \ucc3d(modal window)\uc744 \ub744\uc6c0 prompt : \uba54\uc2dc\uc9c0\uc640 \uc785\ub825 \ud544\ub4dc(input field), \ud655\uc778(OK) \ubc0f \ucde8\uc18c(Cancel) \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0 confirm : \uc9c8\ubb38\uacfc \ud655\uc778 \ubc0f \ucde8\uc18c \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0 let age = prompt('\ub098\uc774\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.', 100); alert(`\ub2f9\uc2e0\uc758 \ub098\uc774\ub294 ${age}\uc0b4 \uc785\ub2c8\ub2e4.`); let isBoss = confirm(\"\ub2f9\uc2e0\uc774 \uc8fc\uc778\uc778\uac00\uc694?\"); alert( isBoss ); \ud615\ubcc0\ud658 (type conversion) // \ubb38\uc790\uc5f4 \ubcc0\ud658 let value = true; // boolean\ud615 value = String(value); // \ubcc0\uc218 value\uc5d4 \ubb38\uc790\uc5f4 \"true\"\uac00 \uc800\uc7a5 alert(typeof value); // string // \uc22b\uc790\ub85c \ubcc0\ud658 let str = \"123\"; let num = Number(str); // \ubb38\uc790\uc5f4 \"123\"\uc774 \uc22b\uc790 123\uc73c\ub85c \uba85\uc2dc\uc801 \ubcc0\ud658 alert(typeof num); // number alert( \"6\" / \"2\" ); // 3, \ubb38\uc790\uc5f4\uc774 \uc22b\uc790\ud615\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\ub41c \ud6c4 \uc5f0\uc0b0\uc774 \uc218\ud589 let age = Number(\"\uc784\uc758\uc758 \ubb38\uc790\uc5f4 123\"); alert(age); // NaN, \ud615 \ubcc0\ud658 \uc2e4\ud328 alert( Number(\" 123 \") ); // 123 alert( Number(\"123z\") ); // NaN (\"z\"\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\ub294 \ub370 \uc2e4\ud328\ud568) alert( Number(true) ); // 1 alert( Number(false) ); // 0 // boolean\uc73c\ub85c \ubcc0\ud658 alert( Boolean(1) ); // \uc22b\uc790 1(true) alert( Boolean(0) ); // \uc22b\uc790 0(false) alert( Boolean(\"hello\") ); // \ubb38\uc790\uc5f4(true) alert( Boolean(\"\") ); // \ube48 \ubb38\uc790\uc5f4(false) alert( Boolean(NaN) ); // false alert( Boolean(undefined) ); // false alert( Boolean(null) ); // false \uc5f0\uc0b0\uc790 + : \ub367\uc148 \uc5f0\uc0b0\uc790 - : \ube84\uc148 \uc5f0\uc0b0\uc790 * : \uacf1\uc148 \uc5f0\uc0b0\uc790 / : \ub098\ub217\uc148 \uc5f0\uc0b0\uc790 % : \ub098\uba38\uc9c0 \uc5f0\uc0b0\uc790 ** : \uac70\ub4ed\uc81c\uacf1 \uc5f0\uc0b0\uc790 & : AND \ube44\ud2b8 \uc5f0\uc0b0\uc790 | OR \ube44\ud2b8 \uc5f0\uc0b0\uc790 ^ XOR \ube44\ud2b8 \uc5f0\uc0b0\uc790 ~ NOT \ube44\ud2b8 \uc5f0\uc0b0\uc790 << : LEFT SHIFT >> : RIGHT SHIFT >>> : ZERO-FILL RIGHT SHIFT || : OR \ub17c\ub9ac\uc5f0\uc0b0\uc790 && : AND \ub17c\ub9ac\uc5f0\uc0b0\uc790 ! : NOT \ub17c\ub9ac\uc5f0\uc0b0\uc790 // \uc22b\uc790 alert( 5 % 2 ); // 5\ub97c 2\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 1\uc744 \ucd9c\ub825 alert( 8 % 3 ); // 8\uc744 3\uc73c\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 2\ub97c \ucd9c\ub825 alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2) alert( 4 ** (1/2) ); // 2 (1/2 \uac70\ub4ed\uc81c\uacf1\uc740 \uc81c\uacf1\uadfc) alert( 8 ** (1/3) ); // 2 (1/3 \uac70\ub4ed\uc81c\uacf1\uc740 \uc138\uc81c\uacf1\uadfc) // \ubb38\uc790\uc5f4 let s = \"my\" + \"string\"; alert(s); // mystring alert( 2 + '1' ); // \"21\" alert(2 + 2 + '1' ); // '221'\uc774 \uc544\ub2c8\ub77c '41'\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert( 6 - '2' ); // 4, '2'\ub97c \uc22b\uc790\ub85c \ubc14\uafbc \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4. alert( '6' / '2' ); // 3, \ub450 \ud53c\uc5f0\uc0b0\uc790\uac00 \uc22b\uc790\ub85c \ubc14\ub010 \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4. // \uc22b\uc790\ud615\uc774 \uc544\ub2cc \ud53c\uc5f0\uc0b0\uc790\ub294 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud654\ud569\ub2c8\ub2e4. alert( +true ); // 1 alert( +\"\" ); // 0 let apples = \"2\"; let oranges = \"3\"; alert( apples + oranges ); // 23, \ubb38\uc790\uc5f4 + \uc5f0\uc0b0 alert( +apples + +oranges ); // 5 \uc22b\uc790\ubcc0\ud658 -> \uc22b\uc790 + \uc5f0\uc0b0 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence \ud560\ub2f9 \uc5f0\uc0b0\uc790 let a = 1; let b = 2; let c = 3 - (a = b + 1); // a = 3, c = 0 alert( a ); // 3 alert( c ); // 0 a = b = c = 2 + 2; alert( a ); // 4 alert( b ); // 4 alert( c ); // 4 let n = 2; n += 5; // n = n + 5 n *= 2; // n = n * 2 alert( n ); // 14 n *= 3 + 5; // n *= 8 let counter = 2; counter++; // counter = counter + 1 counter--; // counter = counter - 1 counter = 1; let a = ++counter; alert(a); // 2 counter = 1; a = counter++; alert(a); // 1 \uc27c\ud45c \uc5f0\uc0b0\uc790 // \ud55c \uc904\uc5d0\uc11c \uc138 \uac1c\uc758 \uc5f0\uc0b0\uc774 \uc218\ud589\ub428 for (a = 1, b = 3, c = a * b; a < 10; a++) { ... } \ube44\uad50 \uc5f0\uc0b0\uc790 a > b a < b a >= b a <= b a == b a != b error \ube44\uad50 const err = new Error('\ud83d\udca3\ufe0f Something went wrong'); console.log(err instanceof Error); // \ud83d\udc49\ufe0f true \ubb38\uc790\uc5f4 \ube44\uad50 \uc790\ub9bf\uc218 \ubcc4\ub85c \uc0ac\uc804\uc21c\uc73c\ub85c \ube44\uad50; ascii\ub4f1\uc758 \ubb38\uc790 \uc21c\uc704 alert( 'Z' > 'A' ); // true alert( 'Glow' > 'Glee' ); // true alert( 'Bee' > 'Be' ); // true \ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50 \uc4f0\uc9c0 \uc54a\ub294\uac8c \uc88b\uc744 \ub4ef ..., \uba85\uc2dc\uc801\uc73c\ub85c \ubcc0\ud615\ud574 \uc0ac\uc6a9\ud558\uc2dc\ub77c. \uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) === \uc790\ub8cc\ud615\uc758 \ub3d9\ub4f1 \uc5ec\ubd80\uae4c\uc9c0 \uac80\uc0ac; \ud53c\uc5f0\uc0b0\uc790 a\uc640 b\uc758 \ud615\uc774 \ub2e4\ub97c \uacbd\uc6b0 a === b\ub294 \uc989\uc2dc false\ub97c \ubc18\ud658\ud568 null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30 alert( null === undefined ); // false alert( null == undefined ); // true alert( undefined > 0 ); // false (1) alert( undefined < 0 ); // false (2) alert( undefined == 0 ); // false (3) alert( null > 0 ); // (1) false alert( null == 0 ); // (2) false alert( null >= 0 ); // (3) true \ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation bash \ub3d9\uc791\uacfc \ub3d9\uc77c true || alert(\"not printed\"); false || alert(\"printed\"); nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) ?? a ?? b \uc758 \ud3c9\uac00 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. a\uac00 null \ub3c4 \uc544\ub2c8\uace0 undefined \ub3c4 \uc544\ub2c8\uba74 a \uadf8 \uc678\uc758 \uacbd\uc6b0\ub294 b x = a ?? b // nullish \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5b4\uc4f8 \uc218 \uc788\uc74c. x = (a !== null && a !== undefined) ? a : b; // \uc0ac\uc6a9\uc608 let firstName = null; let lastName = null; let nickName = \"\ubc14\uc774\uc62c\ub81b\"; alert(firstName ?? lastName ?? nickName ?? \"\uc775\uba85\uc758 \uc0ac\uc6a9\uc790\"); // \ubc14\uc774\uc62c\ub81b // '??'\uc640 '||'\uc758 \ucc28\uc774 let height = 0; alert(height || 100); // 100 alert(height ?? 100); // 0 \uc870\uac74\ubb38 if , else if and else ? let year = prompt('ECMAScript-2015 \uba85\uc138\ub294 \uba87 \ub144\ub3c4\uc5d0 \ucd9c\ud310\ub418\uc5c8\uc744\uae4c\uc694?', ''); if (year == 2015) { alert( \"\uc815\ub2f5\uc785\ub2c8\ub2e4!\" ); alert( \"\uc544\uc8fc \ub611\ub611\ud558\uc2dc\ub124\uc694!\" ); } else if (year > 2015) { alert( '\uc22b\uc790\ub97c \uc880 \ub354 \ub0b4\ub824\ubcf4\uc138\uc694.' ); } else { alert( '\uc624\ub2f5\uc785\ub2c8\ub2e4!' ); } // let result = condition ? value1 : value2; let accessAllowed = (age > 18) ? true : false; let message = (age < 3) ? '\uc544\uae30\uc57c \uc548\ub155?' : (age < 18) ? '\uc548\ub155!' : (age < 100) ? '\ud658\uc601\ud569\ub2c8\ub2e4!' : '\ub098\uc774\uac00 \uc544\uc8fc \ub9ce\uc73c\uc2dc\uac70\ub098, \ub098\uc774\uac00 \uc544\ub2cc \uac12\uc744 \uc785\ub825 \ud558\uc168\uad70\uc694!'; \ubc18\ubcf5\ubb38 // while let i = 0; while (i < 3) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert( i ); i++; } // do while let i = 0; do { alert( i ); i++; } while (i < 3); // for for (let i = 0; i < 3; i++) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert(i); } // break let sum = 0; while (true) { let value = +prompt(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694.\", ''); if (!value) break; // (*) sum += value; } alert( '\ud569\uacc4: ' + sum ); // object property \uc21c\ud68c for (key in object) { // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. } // for..of // array \uc21c\ud68c for (let fruit of fruits) { } switch/case\ubb38 switch/case\ubb38\uc758 \uc778\uc218\uc5d4 \uc5b4\ub5a4 \ud45c\ud604\uc2dd\uc774\ub4e0 \uc62c \uc218 \uc788\uc74c let a = 2 + 2; let b = 0; switch (a) { case b + 1: break; case 3: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.' ); break; case 4: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\uacfc \uc77c\uce58\ud569\ub2c8\ub2e4.' ); break; case 5: case 6: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4.' ); break; default: alert( \"\uc5b4\ub5a4 \uac12\uc778\uc9c0 \ud30c\uc545\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\" ); } Function local variable: \ud568\uc218 \ub0b4 \uc120\uc5b8 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc73c\uba74 \uadf8 \uac12\uc740 undefined \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 \ud568\uc218\ub97c \ud2b9\ubcc4\ud55c \uc885\ub958\uc758 variable\ub85c \ucde8\uae09 nested function \uac00\ub2a5 // Function declaration let userName = 'John'; // global variable function showMessage() { let message = 'Hello, ' + userName; // local variable alert(message); } showMessage(); // Hello, John // Function arguments function showMessage(from, text) { // \uc778\uc218: from, text alert(from + ': ' + text); } showMessage(from, \"Hello\"); // *Ann*: Hello showMessage(\"Ann\"); // Ann: undefined // Function arguments with default value function showMessage(from, text= \"no text given\") { // \uc778\uc218: from, text alert(from + ': ' + text); } showMessage(\"Ann\"); // Ann: undefined // Function return; return\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined function sum(a, b) { return a + b; } // Function return \uc8fc\uc758 \uc0ac\ud56d function sum(a, b) { return a + b; // return\ud6c4 ; \uc790\ub3d9 \uc0bd\uc785\ub418\ubbc0\ub85c return\uc2dc \uac1c\ud589 \ud558\uc9c0 \uc54a\uae30 } Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd) let sayHi = function() { alert( \"Hello\" ); }; // \ud568\uc218 \ud45c\ud604\uc2dd\uc5d0\uc11c \uc138\ubbf8\ucf5c\ub860 \ud544\uc218 alert( sayHi ); // \ud568\uc218 \ucf54\ub4dc \ucd9c\ub825 alert( sayHi() ); // \ud568\uc218 \uc2e4\ud589!! Arrow function (\ud654\uc0b4\ud45c \ud568\uc218) \ud568\uc218 \ucd95\uc57d (python lambda) this\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc74c (\uc120\uc5b8\ub41c \uc0c1\uc704 object\uc758 this \uac00\uc838\ub2e4 \uc500) arguments \uc5c6\uc74c new\uc640 \ud568\uaed8 \ud638\ucd9c \ubd88\uac00\ub2a5 super\ub3c4 \uc5c6\uc74c \uc790\uccb4 '\ucee8\ud14d\uc2a4\ud2b8\u2019\uac00 \uc5c6\ub294 \uc9e7\uc740 \ucf54\ub4dc\uc6a9 let func = (arg1, arg2, ...argN) => expression // e.g. let sum = (a, b) => a + b; let double = n => n * 2; // let double = function(n) { return n * 2 } let sayHi = () => alert(\"\uc548\ub155\ud558\uc138\uc694!\"); let age = prompt(\"\ub098\uc774\ub97c \uc54c\ub824\uc8fc\uc138\uc694.\", 18); let welcome = (age < 18) ? () => alert('\uc548\ub155') : () => alert(\"\uc548\ub155\ud558\uc138\uc694!\"); welcome(); // example 1 let group = { title: \"1\ubaa8\ub460\", students: [\"\ubcf4\ub77c\", \"\ud638\uc9c4\", \"\uc9c0\ubbfc\"], showList() { this.students.forEach( student => alert(this.title + ': ' + student) ); } }; group.showList(); // example 2 function defer(f, ms) { return function() { setTimeout(() => f.apply(this, arguments), ms) }; } function sayHi(who) { alert('\uc548\ub155, ' + who); } let sayHiDeferred = defer(sayHi, 2000); sayHiDeferred(\"\ucca0\uc218\"); // 2\ucd08 \ud6c4 \"\uc548\ub155, \ucca0\uc218\"\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4. debugger \ucf54\ub4dc\uc5d0 debugger \uc0bd\uc785\uc2dc breakpoint\uc640 \ub3d9\uc77c\ud55c \ub3d9\uc791 function hello(name) { let phrase = `Hello, ${name}!`; debugger; // <-- \uc5ec\uae30\uc11c \uc2e4\ud589\uc774 \uba48\ucda5\ub2c8\ub2e4. say(phrase); } console.log // \ucf58\uc194\ucc3d\uc744 \uc5f4\uc5b4 \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uc138\uc694. for (let i = 0; i < 5; i++) { console.log(\"\uc22b\uc790\", i); } Function property name length : function parameter \uac2f\uc218 function property \ucd94\uac00 \uac00\ub2a5\ud568 function sayHi() { alert(\"Hi\"); } alert(sayHi.name); // sayHi function f(sayHi = function() {}) { alert(sayHi.name); // sayHi (\uc774\ub984\uc774 \uc788\ub124\uc694!) } f(); // property \ucd94\uac00 function sayHi() { alert(\"Hi\"); sayHi.counter++; } sayHi.counter = 0; // \ucd08\uae43\uac12 sayHi(); // Hi sayHi(); // Hi alert( `\ud638\ucd9c \ud69f\uc218: ${sayHi.counter}\ud68c` ); // \ud638\ucd9c \ud69f\uc218: 2\ud68c variable arguments ... \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uc778\uc790\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ec function ask(question, ...handlers) { let isYes = confirm(question); for(let handler of handlers) { if (handler.length == 0) { if (isYes) handler(); } else { handler(isYes); } } } Input argument spreading ... \uc73c\ub85c array argument\ub97c \ud480\uc5b4 \uc785\ub825\ud560 \uc218 \uc788\uc74c let arr1 = [1, -2, 3, 4]; let arr2 = [8, 3, -8, 1]; alert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25 \uc774\ub7ec\ud55c spreading \uae30\ubc95\uc740 array \uc120\uc5b8\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\uac00\ub2a5 let arr = [3, 5, 1]; let arr2 = [8, 9, 15]; let merged = [0, ...arr, 2, ...arr2]; alert(merged); // 0,3,5,1,2,8,9,15 (0, arr, 2, arr2 \uc21c\uc11c\ub85c \ud569\uccd0\uc9d1\ub2c8\ub2e4.) Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815 https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures javascript \ucf54\ub4dc \ube14\ub7ed \ub0b4\uc5d0\uc11c \ubcc0\uc218\uc640 \ud568\uc218\uc758 \uc720\ud6a8\ubc94\uc704\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc744 \uac00\uc9d0 javascript\uc5d0\uc11c \ud568\uc218\ub294 \ucf54\ub4dc \ube14\ub85d\uc744 \uac00\uc9c0\uba70, \ub3d9\uc791\uc744 \uc218\ud589\ud558\ub294 \ud2b9\uc218\ud55c \ubcc0\uc218 \ud568\uc218, \ucf54\ub4dc\ube14\ub85d, \uac1d\uccb4, \uc2a4\ud06c\ub9bd\ud2b8\ub4e4\uc740 \uac01\uc790 Lexical Environment\ub77c\ub294 \ub0b4\ubd80 \uac1d\uccb4\ub97c \uac00\uc9d0 javascript\ub294 \uc120\uc5b8\ub41c \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc774 Lexical Env\uc5d0 property\ub85c \uc800\uc7a5 function init() { var name = \"Mozilla\"; // name\uc740 init\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c \uc9c0\uc5ed \ubcc0\uc218\uc774\ub2e4. function displayName() { // displayName() \uc740 \ub0b4\ubd80 \ud568\uc218\uc774\uba70, \ud074\ub85c\uc800\ub2e4. alert(name); // \ubd80\ubaa8 \ud568\uc218\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. } displayName(); } init(); \uac01 Lexical Env\ub294 \uc678\ubd80 (\uc0c1\uc704) Lexical Env\uc5d0 \ub300\ud55c reference\ub97c \uac00\uc9d0 (e.g. \uc704 displayName() \uc758 \uc678\ubd80 Lexical Env\ub294 init() ) \uc704\uc5d0\uc11c displayName()\uacfc \uac19\uc774 \ub9ac\ud134\ub418\ub294 \ud568\uc218\ub97c closure \ub77c \ud558\uba70, closure \ub294 \ubaa8\ud568\uc218 init()\uc758 Lexical Env\ub97c \ucc38\uc870\ud560 \uc218 \uc788\uc74c. closure \ub97c \uc0ac\uc6a9\ud574 javascript\uc5d0\uc11c\ub294 private method\ub97c \uad6c\ud604\ud568 \uc544\ub798 \ucf54\ub4dc\ub294 \ud504\ub77c\uc774\ube57 \ud568\uc218\uc640 \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\ub294 \ud37c\ube14\ub9ad \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uc774\ub807\uac8c \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ubaa8\ub4c8 \ud328\ud134 \uc774\ub77c \ud55c\ub2e4. var counter = (function() { var privateCounter = 0; function changeBy(val) { privateCounter += val; } return { increment: function() { changeBy(1); }, decrement: function() { changeBy(-1); }, value: function() { return privateCounter; } }; })(); console.log(counter.value()); // logs 0 counter.increment(); counter.increment(); console.log(counter.value()); // logs 2 counter.decrement(); console.log(counter.value()); // logs 1 new Function new \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \uc0dd\uc131 \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub294 string\uc73c\ub85c \ud45c\ud604\ub41c \uc790\uc2e0\uc758 \ucf54\ub4dc \uc2e4\ud589\ud558\ub294 expr \uc0ac\uc6a9\uc608) \uc678\ubd80\uc5d0\uc11c \uc218\uc2e0\ud55c string function\uc758 \uc2e4\ud589 let sum = new Function('a', 'b', 'return a + b'); alert( sum(1, 2) ); // 3 let sayHi = new Function('alert(\"Hello\")'); sayHi(); // Hello Time scheduling - setTimeout , setInterval // \uc124\uc815 let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...) let timerId = setInterval(func|code, [interval], [arg1], [arg2], ...) // \ucde8\uc18c clearTimeout(timerId); setTimeout \uc758 delay\uac00 0\uc77c \uacbd\uc6b0, \ucd5c\ub300\ud55c \ube68\ub9ac .. Testing - Mocha BDD (Behavior Driven Development)\ub294 \ud14c\uc2a4\ud2b8(test), \ubb38\uc11c(documentation), \uc608\uc2dc(example)\ub97c \ud55c\ub370 \ubaa8\uc544\ub193\uc740 \uac1c\ub150 function pow(x, n) { if (n < 0) return NaN; if (Math.round(n) != n) return NaN; let p = 1 for (let i = 0; i < n; i++) { p = x * p ; } return p; } // ... describe(\"pow\", function() { it(\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uc758 n \uc81c\uacf1\", function() { assert.equal(pow(2, 3), 8); }); }); // nested testing describe(\"pow.2\", function () { describe(\"case 1\", function () { before(() => console.log(\"testing starts\")); after(() => console.log(\"testing ends\")); beforeEach(() => console.log(\"each starts\")); afterEach(() => console.log(\"each ends\")); it(\"10^10\", function () { assert.equal(pow(10, 10), 10000000000); }); it(\"10^5\", function () { assert.equal(pow(10, 6), 1000000); }); }) }) chai (assertion logic) assert.equal(value1, value2) \u2013 value1\uacfc value2\uc758 \ub3d9\ub4f1\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 == value2). assert.strictEqual(value1, value2) \u2013 value1\uacfc value2\uc758 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 === value2). assert.notEqual, assert.notStrictEqual \u2013 \ube44 \ub3d9\ub4f1\uc131, \ube44 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. assert.isTrue(value) \u2013 value\uac00 true\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === true). assert.isFalse(value) \u2013 value\uac00 false\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === false). \uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment) \uc6d0 \uc790\ub8cc\uc758 \uc694\uc18c\ub97c \ubd84\ud574, \ub2e4\ub978 \uad6c\uc870\ub85c \ubcc0\uacbd\ud558\uae30 \uc26c\uc6c0 let {prop : varName = default, ...rest} = object let [item1 = default, item2, ...rest] = array ... \ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30 \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 // \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 1) let arr = [\"Bora\", \"Lee\"] let [firstName, surname] = arr; alert(firstName); // Bora alert(surname); // Lee // \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 2) let [firstName, surname] = \"Bora Lee\".split(' '); // \uc694\uc18c \uc0dd\ub7b5 let [firstName, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"]; alert( title ); // Consul // iterable\ud55c \uc790\ub8cc\uad6c\uc870\ub294 \ubaa8\ub450 \uac00\ub2a5 let [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"] let [one, two, three] = new Set([1, 2, 3]); let user = {}; [user.name, user.surname] = \"Bora Lee\".split(' '); alert(user.name); // Bora let user = { name: \"John\", age: 30 }; // \uac1d\uccb4\uc758 \ud0a4\uc640 \uac12 \uc21c\ud68c\ud558\uae30 for (let [key, value] of Object.entries(user)) { alert(`${key}:${value}`); // name:John, age:30\uc774 \ucc28\ub840\ub300\ub85c \ucd9c\ub825 } // map\uc5d0\uc11c\uc758 destructuring assignment let user = new Map(); user.set(\"name\", \"John\"); user.set(\"age\", \"30\"); for (let [key, value] of user) { alert(`${key}:${value}`); // name:John, then age:30 } // destructuring assignment \uc0ac\uc6a9\ud55c \uad50\ud658 let guest = \"Jane\"; let admin = \"Pete\"; // \ubcc0\uc218 guest\uc5d4 Pete, \ubcc0\uc218 admin\uc5d4 Jane\uc774 \uc800\uc7a5\ub418\ub3c4\ub85d \uac12\uc744 \uad50\ud658\ud568 [guest, admin] = [admin, guest]; alert(`${guest} ${admin}`); // Pete Jane(\uac12 \uad50\ud658\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc774\ub904\uc84c\uc2b5\ub2c8\ub2e4!) // '...'\ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30, rest\ub294 \ubc30\uc5f4 let [name1, name2, ...rest] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"]; alert(name1); // Julius alert(name2); // Caesar alert(rest[0]); // Consul alert(rest[1]); // of the Roman Republic alert(rest.length); // 2 // \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined let [firstName, surname] = []; alert(firstName); // undefined alert(surname); // undefined // default \uac12 \uc124\uc815 let [name = \"Guest\", surname = \"Anonymous\"] = [\"Julius\"]; alert(name); // Julius (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12) alert(surname); // Anonymous (\uae30\ubcf8\uac12) // name\uc758 prompt\ub9cc \uc2e4\ud589\ub428 let [surname = prompt('\uc131\uc744 \uc785\ub825\ud558\uc138\uc694.'), name = prompt('\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694.')] = [\"\uae40\"]; alert(surname); // \uae40 (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12) alert(name); // prompt\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12 \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9 // \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9 let options = { title: \"Menu\", width: 100, height: 200 }; let {title, width, height} = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 // let {...} \uc548\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uc5b4\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud568 let {height, width, title} = { title: \"Menu\", height: 200, width: 100 } let options = { title: \"Menu\", width: 100, height: 200 }; // { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } let {width: w, height: h, title} = options; // width -> w // height -> h // title -> title alert(title); // Menu alert(w); // 100 alert(h); // 200 // default \uc124\uc815 let options = { title: \"Menu\" }; let {width = 100, height = 200, title} = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 // { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } + default let options = { title: \"Menu\" }; let {width: w = 100, height: h = 200, title} = options; alert(title); // Menu alert(w); // 100 alert(h); // 200 // title\ub9cc \ubcc0\uc218\ub85c \ubf51\uc544\ub0b4\uae30 let { title } = options; // title = \uc774\ub984\uc774 title\uc778 \ud504\ub85c\ud37c\ud2f0 // rest = \ub098\uba38\uc9c0 \ud504\ub85c\ud37c\ud2f0\ub4e4 let {title, ...rest} = options; // title\uc5d4 \"Menu\", rest\uc5d4 {height: 200, width: 100}\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4. alert(rest.height); // 200 alert(rest.width); // 100 let title, width, height; {title, width, height} = {title: \"Menu\", width: 200, height: 100}; // SyntaxError: Unexpected token '=' \uc774\ub77c\ub294 \uc5d0\ub7ec\uac00 \uc544\ub7ab\uc904\uc5d0\uc11c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. ({title, width, height} = {title: \"Menu\", width: 200, height: 100}); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring) let options = { size: { width: 100, height: 200 }, items: [\"Cake\", \"Donut\"], extra: true }; // \ucf54\ub4dc\ub97c \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0 \uc791\uc131\ud574 \uc758\ub3c4\ud558\ub294 \ubc14\ub97c \uba85\ud655\ud788 \ub4dc\ub7ec\ub0c4 let { size: { // size\ub294 \uc5ec\uae30, width, height }, items: [item1, item2], // items\ub294 \uc5ec\uae30\uc5d0 \ud560\ub2f9\ud568 title = \"Menu\" // \ubd84\ud574\ud558\ub824\ub294 \uac1d\uccb4\uc5d0 title \ud504\ub85c\ud37c\ud2f0\uac00 \uc5c6\uc73c\ubbc0\ub85c \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud568 } = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 alert(item1); // Cake alert(item2); // Donut function argument with destructuring assignment let options = { title: \"My menu\", items: [\"Item1\", \"Item2\"] }; function showMenu({ title = \"Untitled\", width: w = 100, // width\ub294 w\uc5d0, height: h = 200, // height\ub294 h\uc5d0, items: [item1, item2] // items\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub294 item1\uc5d0, \ub450 \ubc88\uc9f8 \uc694\uc18c\ub294 item2\uc5d0 \ud560\ub2f9\ud568 }) { alert( `${title} ${w} ${h}` ); // My Menu 100 200 alert( item1 ); // Item1 alert( item2 ); // Item2 } showMenu(options); showMenu({}); // \ubaa8\ub4e0 \uc778\uc218\uc5d0 \uae30\ubcf8\uac12\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4. showMenu(); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. function showMenu({ title = \"Menu\", width = 100, height = 200 } = {}) { alert( `${title} ${width} ${height}` ); } showMenu(); // Menu 100 200 // \uc5d0\ub7ec \uc548\ub0a8 Promise The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Producing code\uc640 Consuming code \uc0ac\uc774\uc758 \ube44\ub3d9\uae30\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uc7a5\uce58 \ud504\ub77c\ubbf8\uc2a4\uac00 \ub300\uae30 \uc0c1\ud0dc\uc77c \ub54c, .then/catch/finally \ud578\ub4e4\ub7ec\ub294 \ud504\ub77c\ubbf8\uc2a4 \uc644\ub8cc\ub97c \ub300\uae30 \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ubbf8 \ucc98\ub9ac\uc0c1\ud0dc\ub77c\uba74 \ud578\ub4e4\ub7ec\uac00 \uc989\uac01 \uc2e4\ud589 \ub0b4\ubd80\uc801\uc73c\ub85c state , result \uc815\ubcf4 \uc720\uc9c0 executor \ud568\uc218\uc5d0\uc11c resolve(Object) \ud638\ucd9c\uc2dc state => fulfiled executor \ud568\uc218\uc5d0\uc11c reject(Error) \ud638\ucd9c\uc2dc state => rejected \ud55c\ubc88 resolve \ub610\ub294 reject \ud638\ucd9c\ub418\uba74, \uc7ac\uc2e4\ud589 X let promise = new Promise(function(resolve, reject) { // \ud504\ub77c\ubbf8\uc2a4\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uba74 executor \ud568\uc218\ub294 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589 // 1\ucd08 \ub4a4\uc5d0 \uc77c\uc774 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\ub2e4\ub294 \uc2e0\ud638\uac00 \uc804\ub2ec\ub418\uba74\uc11c result\ub294 'done' setTimeout(() => resolve(\"done\"), 1000); // or setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); }); .then Promise\uac00 \uc644\ub8cc\ub418\uae38 \ub300\uae30\ud558\uace0 resolve, reject\ub97c \uc218\ud589 let promise = new Promise(function(resolve, reject) { setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); }); // reject \ud568\uc218\ub294 .then\uc758 \ub450 \ubc88\uc9f8 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. promise.then( result => alert(result), // \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c error => alert(error) // 1\ucd08 \ud6c4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\"\ub97c \ucd9c\ub825 ); .catch .catch(f) \uacfc .then(null,f) \ub3d9\uc77c\ud55c \ub3d9\uc791\uc744 \uc218\ud589\ud558\uba70, \uc5d0\ub7ec\ub97c \ucc98\ub9ac let promise = new Promise((resolve, reject) => { setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); }); // .catch(f)\ub294 promise.then(null, f)\uacfc \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4 promise.catch(alert); // 1\ucd08 \ub4a4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\" \ucd9c\ub825 .finally \uc5d0\ub7ec \uc720\ubb34\uc640 \uad00\uacc4\uc5c6\uc774 \uc2e4\ud589\ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589 new Promise((resolve, reject) => { setTimeout(() => resolve(\"\uacb0\uacfc\"), 2000) }) .finally(() => alert(\"\ud504\ub77c\ubbf8\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")) .then(result => alert(result)); // <-- .then\uc5d0\uc11c result\ub97c \ub2e4\ub8f0 \uc218 \uc788\uc74c Promise chaining Promise chaining\uc774\ub780 promise \ub300\uae30\ud568\uc218\ub4e4\uc758 \uc5f0\uc1c4 \uc2e4\ud589\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ud578\ub4e4\ub7ec\ub97c \ub4f1\ub85d\ud588\uc744 \uacbd\uc6b0\uc5d0\ub9cc Promise \ub300\uae30\ud568\uc218\ub4e4\uc744 \uc5f0\uc18d\uc801 \uc2e4\ud589\ub428 new Promise(function(resolve, reject) { setTimeout(() => resolve(1), 1000); // (*) }).then(function(result) { // (**) alert(result); // 1 return result * 2; }).then(function(result) { // (***) alert(result); // 2 return result * 2; }).then(function(result) { alert(result); // 4 return result * 2; }); Promise chaining\uc5d0\uc11c \uc2e0\uaddc promise\ub97c \ubc18\ud658\ud558\uc5ec chaining\ud560 \uc218 \uc788\uc74c. new Promise(function(resolve, reject) { setTimeout(() => resolve(1), 1000); }).then(function(result) { alert(result); // 1 return new Promise((resolve, reject) => { // (*) setTimeout(() => resolve(result * 2), 1000); }); }).then(function(result) { // (**) alert(result); // 2 return new Promise((resolve, reject) => { setTimeout(() => resolve(result * 2), 1000); }); }).then(function(result) { alert(result); // 4 }); thenable .then \uc774\ub77c\ub294 \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\ub294 \ubaa8\ub450 thenable\uac1d\uccb4\ub77c\uace0 \ubd80\ub974\uba70, promise\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud568. class Thenable { constructor(num) { this.num = num; } then(resolve, reject) { alert(resolve); // function() { \ub124\uc774\ud2f0\ube0c \ucf54\ub4dc } // 1\ucd08 \ud6c4 this.num*2\uc640 \ud568\uaed8 \uc774\ud589\ub428 setTimeout(() => resolve(this.num * 2), 1000); // (**) } } new Promise(resolve => resolve(1)) .then(result => { return new Thenable(result); // (*) }) .then(alert); // 1000\ubc00\ub9ac \ucd08 \ud6c4 2\ub97c \ubcf4\uc5ec\uc90c fetch \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucd94\uac00 \uc815\ubcf4\ub97c \ubc1b\uc544\uc624\ub294 \ub3d9\uc791\uc744 \uc218\ud589\ud568; javascript \ub0b4\uc5d0\uc11c promise\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub3d9\uc791\ud568 AJAX(Asynchronous JavaScript And XML) https://ko.javascript.info/fetch let promise = fetch(url, [options]); url \u2013 \uc811\uadfc\ud558\uace0\uc790 \ud558\ub294 URL options \u2013 \uc120\ud0dd \ub9e4\uac1c\ubcc0\uc218, method\ub098 header \ub4f1\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc74c let response = await fetch(url); if (response.ok) { // HTTP \uc0c1\ud0dc \ucf54\ub4dc\uac00 200~299\uc77c \uacbd\uc6b0 // \uc751\ub2f5 \ubaac\ubb38\uc744 \ubc1b\uc2b5\ub2c8\ub2e4(\uad00\ub828 \uba54\uc11c\ub4dc\ub294 \uc544\ub798\uc5d0\uc11c \uc124\uba85). let json = await response.json(); } else { alert(\"HTTP-Error: \" + response.status); } Throw an error in promise // case 1) Throw an error new Promise((resolve, reject) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 2) Throw an error new Promise((resolve, reject) => { reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")); }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 3) Throw an error new Promise((resolve, reject) => { resolve(\"ok\"); }).then((result) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); // \ud504\ub77c\ubbf8\uc2a4\uac00 \uac70\ubd80\ub428 }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 4) // \uc2e4\ud589 \uc21c\uc11c: catch -> then new Promise((resolve, reject) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); }).catch(function(error) { alert(\"\uc5d0\ub7ec\uac00 \uc798 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\uc774 \uc774\uc5b4\uc9d1\ub2c8\ub2e4.\"); }).then(() => alert(\"\ub2e4\uc74c \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub429\ub2c8\ub2e4.\")); Mutilple promises \ub2e4\uc218\uc758 promise\uc5d0 \ub300\ud55c \ub2e8\uc77c handler \ucc98\ub9ac Promise.all([ new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1 new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2 new Promise(resolve => setTimeout(() => resolve(3), 1000)) // 3 ]).then(alert); // \ud504\ub77c\ubbf8\uc2a4 \uc804\uccb4\uac00 \ucc98\ub9ac\ub418\uba74 1, 2, 3\uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. \uac01 \ud504\ub77c\ubbf8\uc2a4\ub294 \ubc30\uc5f4\uc744 \uad6c\uc131\ud558\ub294 \uc694\uc18c\uac00 \ub429\ub2c8\ub2e4. let urls = [ 'https://api.github.com/users/iliakan', 'https://api.github.com/users/remy', 'https://api.github.com/users/jeresig' ]; // fetch\ub97c \uc0ac\uc6a9\ud574 url\uc744 \ud504\ub77c\ubbf8\uc2a4\ub85c \ub9e4\ud551\ud569\ub2c8\ub2e4. let requests = urls.map(url => fetch(url)); // Promise.all\uc740 \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. Promise.all(requests) .then(responses => responses.forEach( response => alert(`${response.url}: ${response.status}`) )); Promise.all : \uc5b4\ub290 \ud558\ub098\uc758 promise\uac00 \uac70\uc808\ub418\uba74, reject handler \uc218\ud589 Promise.allSettled : \ubaa8\ub4e0 promise \ucc98\ub9ac \ub300\uae30, \uac01 promise \uc0c1\ud0dc \ubc18\ud658 \uc751\ub2f5\uc774 \uc131\uacf5\ud560 \uacbd\uc6b0 \u2013 {status:\"fulfilled\", value:result} \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \u2013 {status:\"rejected\", reason:error} Promise.race : \uac00\uc7a5 \uba3c\uc800 \ucc98\ub9ac\ub41c promise \uacb0\uacfc \ubc18\ud658 Promise.resolve/reject : \ub9ce\uc774 \uc548\uc4f0\uc784 promisify function promisify(f) { return function (...args) { // \ub798\ud37c \ud568\uc218\ub97c \ubc18\ud658\ud568 return new Promise((resolve, reject) => { function callback(err, result) { // f\uc5d0 \uc0ac\uc6a9\ud560 \ucee4\uc2a4\ud140 \ucf5c\ubc31 if (err) { reject(err); } else { resolve(result); } } args.push(callback); // \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ucee4\uc2a4\ud140 \ucf5c\ubc31\uc744 \ud568\uc218 f\uc758 \uc778\uc218 \ub05d\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4. f.call(this, ...args); // \uae30\uc874 \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. }); }; }; let loadScriptPromise = promisify(loadScript); loadScriptPromise(...).then(...); Microtask queue javascript\uc758 \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c internal work queue\ub85c \uc644\ub8cc\ub41c promise\uc758 handler\ub97c \ucc98\ub9ac\ud568 FIFO, first-in-first-out \uc2e4\ud589\ub420 \uac83\uc774 \uc5c6\uc744 \ub300 task queue\uac00 \uc791\ub3d9\ub428 Async and Await async \uac00 \ud568\uc218 \uc55e\uc5d0 \ubd99\uc73c\uba74, \ud568\uc218\ub294 resolved promise\ub97c \ubc18\ud658 async function f() { // return Promise.resolve(1);\uc640 \ub3d9\uc77c\ud55c \uacb0\uacfc return 1; } f().then(alert); // 1 await \uc740 async \ud568\uc218 \ub0b4\uc5d0\uc11c promise\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\ud55c\ub2e4. await \uc740 \uc77c\ubc18\ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ubd88\uac00 promise chaining \ub300\uccb4 \uc0ac\uc6a9 await \ub294 thenable \uac1d\uccb4\ub3c4 \uc218\uc2e0 class\uc5d0 await \uc120\uc5b8 \uac00\ub2a5 async function f() { let promise = new Promise((resolve, reject) => { setTimeout(() => resolve(\"\uc644\ub8cc!\"), 1000) }); let result = await promise; // \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bc (*) alert(result); // \"\uc644\ub8cc!\" } f(); (async () => { let response = await fetch('/article/promise-chaining/user.json'); let user = await response.json(); ... })(); // .then \ub300\uc2e0 await \uc0ac\uc6a9 async function showAvatar() { // JSON \uc77d\uae30 let response = await fetch('/article/promise-chaining/user.json'); let user = await response.json(); // github \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc77d\uae30 let githubResponse = await fetch(`https://api.github.com/users/${user.name}`); let githubUser = await githubResponse.json(); // \uc544\ubc14\ud0c0 \ubcf4\uc5ec\uc8fc\uae30 let img = document.createElement('img'); img.src = githubUser.avatar_url; img.className = \"promise-avatar-example\"; document.body.append(img); // 3\ucd08 \ub300\uae30 await new Promise((resolve, reject) => setTimeout(resolve, 3000)); img.remove(); return githubUser; } showAvatar(); async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc class Waiter { async wait() { return await Promise.resolve(1); } } new Waiter() .wait() .then(alert); // 1 async & await error handling // case 1 async function f() { await Promise.reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")); } // case 2 async function f() { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); } // case 3 - try..catch async function f() { try { let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url'); let user = await response.json(); } catch(err) { // fetch\uc640 response.json\uc5d0\uc11c \ubc1c\ud589\ud55c \uc5d0\ub7ec \ubaa8\ub450\ub97c \uc5ec\uae30\uc11c \uc7a1\uc2b5\ub2c8\ub2e4. alert(err); } } f(); // case 4 async function f() { let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url'); } f().catch(alert); // TypeError: failed to fetch // (*) // case 5 - await Promise.all // \ud504\ub77c\ubbf8\uc2a4 \ucc98\ub9ac \uacb0\uacfc\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. let results = await Promise.all([ fetch(url1), fetch(url2), ... ]); File Read/Write https://velog.io/@93jm/Node.js-File-System%EC%9D%98-%EC%82%AC%EC%9A%A9%EA%B3%BC-async-await-%EC%B2%98%EB%A6%AC Decorator (wrapping function) function slow(x) { // CPU \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\uc774 \uc5ec\uae30\uc5d0 \uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`); return x; } function cachingDecorator(func) { let cache = new Map(); return function(x) { if (cache.has(x)) { // cache\uc5d0 \ud574\ub2f9 \ud0a4\uac00 \uc788\uc73c\uba74 return cache.get(x); // \ub300\uc751\ud558\ub294 \uac12\uc744 cache\uc5d0\uc11c \uc77d\uc5b4\uc635\ub2c8\ub2e4. } // let result = func(x); // \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d4 func\ub97c \ud638\ucd9c\ud558\uace0, let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. cache.set(x, result); // \uadf8 \uacb0\uacfc\ub97c \uce90\uc2f1(\uc800\uc7a5)\ud569\ub2c8\ub2e4. return result; }; } slow = cachingDecorator(slow); alert( slow(1) ); // slow(1)\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4. alert( \"\ub2e4\uc2dc \ud638\ucd9c: \" + slow(1) ); // \ub3d9\uc77c\ud55c \uacb0\uacfc \uc704\uc5d0\uc11c \uad6c\ud604\ud55c \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\ub294 this \uac00 undefined \uc774\uae30 \ub54c\ubb38\uc5d0 \uac1d\uccb4 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9\ud558\uae30\uc5d4 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4. \uac1d\uccb4\uc758 call \ud568\uc218 \uc0ac\uc6a9\ud558\uae30 function sayHi() { alert(this.name); } let user = { name: \"John\" }; let admin = { name: \"Admin\" }; // call\uc744 \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uac1d\uccb4\uac00 'this'\uac00 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4. sayHi.call( user ); // this = John sayHi.call( admin ); // this = Admin decorator \ub2e4\uc2dc \uc791\uc131 let worker = { someMethod() { return 1; }, slow(x) { alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`); return x * this.someMethod(); // (*) } }; function cachingDecorator(func) { let cache = new Map(); return function(x) { if (cache.has(x)) { return cache.get(x); } let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. cache.set(x, result); return result; }; } worker.slow = cachingDecorator(worker.slow); // \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9 alert( worker.slow(2) ); // \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218 func.call(context, ...args) // \uc804\uac1c \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud574 \uc778\uc218\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uacfc func.apply(context, args) // call\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4. func.bind(context) // context (\uac1d\uccb4)\ub97c func \ud568\uc218\uc640 \uc5f0\uacb0\ud568. func\uc758 this\uac00 context\uac00 \ub428 object property \uc18d\uc131 \uc124\uc815 object\uc758 property\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc218\uc815\uac00\ub2a5\ud568 value writable enumerable configurable let user = {}; Object.defineProperty(user, \"name\", { value: \"John\" }); let descriptor = Object.getOwnPropertyDescriptor(user, 'name'); alert( JSON.stringify(descriptor, null, 2 ) ); /* { \"value\": \"John\", \"writable\": false, \"enumerable\": false, \"configurable\": false } */ // property write \uc18d\uc131 \ub044\uae30 Object.defineProperty(user, \"name\", { writable: false }); user.name = \"Pete\"; // Error: Cannot assign to read only property 'name' getter, setter properties let obj = { get propName() { // getter, obj.propName\uc744 \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc }, set propName(value) { // setter, obj.propName = value\ub97c \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc } // get, set \ub458\ub2e4 \uc815\uc758\ub418\uc5b4\uc57c \uc815\uc0c1 \ub3d9\uc791 }; // \uc608\uc81c let user = { name: \"John\", surname: \"Smith\" }; Object.defineProperty(user, 'fullName', { get() { return `${this.name} ${this.surname}`; }, set(value) { [this.name, this.surname] = value.split(\" \"); } }); alert(user.fullName); // John Smith for(let key in user) alert(key); // name, surname nodejs import package require: CommonJS \ud0a4\uc6cc\ub4dc import: ES6(ES2015) \ud0a4\uc6cc\ub4dc nodejs getting start https://www.nextree.co.kr/p8574/","title":"Javascript"},{"location":"javascript/#javascript","text":"\uc774 \ubb38\uc11c\ub294 \uc544\ub798 javascript tutorial\uc744 \ubcf4\uace0 \uc815\ub9ac\ud55c \uac83\uc784 \ud83d\udcc1 https://ko.javascript.info \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \uacf5\uc2dd\uc774\ub984?: ECMAScript Javascript Javascript engine Garbage Collection javascript framework Linter JS \ubb38\uc11c\ud654 Polyfill \ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654 Comment \uc8fc\uc11d use strict \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194 \uc804\uc5ed \uac1d\uccb4 Polyfill\uc758 \uad6c\ud604 \ubcc0\uc218\uc640 \uc0c1\uc218 \ubcc0\uc218 \uba85\uba85 \uaddc\uce59 \ud568\uc218\ud615 \uc5b8\uc5b4 \uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd \uc790\ub8cc\ud615 \uc22b\uc790\ud615 isNaN, isFinite parseInt, parseFloat Math \ubb38\uc790\ud615 boolean \ud615 null \uac12 undefined \uac12 object const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5 \uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok \ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658 object \ube44\uad50 \uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign Methods and this \uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function \uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) ?. , ?.() , ?.[] object \uc21c\ud68c \ud568\uc218 symbol \uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator Array mapping function for array sort \ubb38\uc790\uc5f4 <==> \ubc30\uc5f4 reduce\uc640 reduceRight (\ub204\uc0b0\uae30) \ubc30\uc5f4\uc778\uc9c0 \ud655\uc778 map \uc81c\uacf5 \ud568\uc218 set WeakMap and WeakSet Date Autocorrection Benchmarking Test Date.parse JSON (JavaScript Object Notation) Serialization toJSON() for customized serialization typeof Browser functions \ud615\ubcc0\ud658 (type conversion) \uc5f0\uc0b0\uc790 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table \ud560\ub2f9 \uc5f0\uc0b0\uc790 \uc27c\ud45c \uc5f0\uc0b0\uc790 \ube44\uad50 \uc5f0\uc0b0\uc790 error \ube44\uad50 \ubb38\uc790\uc5f4 \ube44\uad50 \ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50 \uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) === null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30 \ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) ?? \uc870\uac74\ubb38 \ubc18\ubcf5\ubb38 switch/case\ubb38 Function Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd) Arrow function (\ud654\uc0b4\ud45c \ud568\uc218) debugger console.log Function property variable arguments Input argument spreading Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815 new Function Time scheduling - setTimeout , setInterval Testing - Mocha chai (assertion logic) \uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment) \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9 \uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring) function argument with destructuring assignment Promise .then .catch .finally Promise chaining thenable fetch Throw an error in promise Mutilple promises promisify Microtask queue Async and Await async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc async & await error handling File Read/Write Decorator (wrapping function) \uac1d\uccb4\uc758 call \ud568\uc218 \uc0ac\uc6a9\ud558\uae30 \ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218 object property \uc18d\uc131 \uc124\uc815 getter, setter properties nodejs import package nodejs getting start","title":"Javascript"},{"location":"javascript/#javascript-engine","text":"V8 Firefox ?","title":"Javascript engine"},{"location":"javascript/#garbage-collection","text":"reachability \ub3c4\ub2ec \uac00\ub2a5\uc131\uc774 \uc5c6\ub294 \ubcc0\uc218\ub294 \uc0ad\uc81c mark-and-sweep generational collection: \uc624\ub79c\uc2dc\uac04 \ub0a8\uc740 \uac1c\uccb4 \ub35c \uac10\uc2dc incremental collection: \ud655\uc778 \uac1c\uccb4 grouping\ud558\uace0 \ubd84\uc0b0 \ucc98\ub9ac idle-time collection: \uc720\ud734 \uc2dc\uac04 \uc2e4\ud589","title":"Garbage Collection"},{"location":"javascript/#javascript-framework","text":"jQuery Lodash","title":"javascript framework"},{"location":"javascript/#linter","text":"JSLint \u2013 \uc5ed\uc0ac\uac00 \uc624\ub798\ub41c linter JSHint \u2013 JSLint\ubcf4\ub2e4 \uc138\ud305\uc774 \uc880 \ub354 \uc720\uc5f0\ud55c linter ESLint \u2013 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ub098\uc628 linter, npm install -g eslint","title":"Linter"},{"location":"javascript/#js","text":"JSDoc : http://usejsdoc.org/ /** * x\ub97c n\ubc88 \uacf1\ud55c \uc218\ub97c \ubc18\ud658\ud568 * * @param {number} x \uac70\ub4ed\uc81c\uacf1\ud560 \uc22b\uc790 * @param {number} n \uacf1\ud560 \ud69f\uc218, \ubc18\ub4dc\uc2dc \uc790\uc5f0\uc218\uc5ec\uc57c \ud568 * @return {number} x\uc758 n \uac70\ub4ed\uc81c\uacf1\uc744 \ubc18\ud658\ud568 */ function pow(x, n) { ... }","title":"JS \ubb38\uc11c\ud654"},{"location":"javascript/#polyfill","text":"\ud3f4\ub9ac\ud544(Polyfill)\uc774\ub780 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc9c0\uc6d0 \uac00\ub2a5\ud558\ub3c4\ub85d \ubcc0\ud658\ud55c \ucf54\ub4dc \ud558\uc704 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \ucd5c\uc2e0 \uae30\ub2a5\uc744 \ub611\uac19\uc774 \uad6c\ud604\ud55c library? \ud2b8\ub79c\uc2a4\ud30c\uc77c\ub7ec: \ubc14\ubca8\uc740 \uac1c\ubc1c\uc790\uc758 \ucef4\ud4e8\ud130\uc5d0\uc11c \ub3cc\uc544\uac00\ub294\ub370, \uc774\ub97c \uc2e4\ud589\ud558\uba74 \uae30\uc874 \ucf54\ub4dc\uac00 \uad6c \ud45c\uc900\uc744 \uc900\uc218\ud558\ub294 \ucf54\ub4dc\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc6f9\uc744 \ud1b5\ud574 load\ub428, \uc6f9\ud329(webpack) \ud3f4\ub9ac\ud544: \uc0dd\ub7b5 \uc8fc\ubaa9\ud560 \ub9cc\ud55c \ud3f4\ub9ac\ud544 \ub450 \uac00\uc9c0\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. core js \u2013 \ub2e4\uc591\ud55c \ud3f4\ub9ac\ud544\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uae30\ub2a5\uc758 \ud3f4\ub9ac\ud544\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. polyfill.io \u2013 \uae30\ub2a5\uc774\ub098 \uc0ac\uc6a9\uc790\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0 \ub530\ub77c \ud3f4\ub9ac\ud544 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud574\uc8fc\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Babel","title":"Polyfill"},{"location":"javascript/#_1","text":"Mocha : describe, it\uacfc \uac19\uc740 \ud14c\uc2a4\ud305 \ud568\uc218\uc640 \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uad00\ub828 \uc8fc\uc694 \ud568\uc218\ub97c \uc81c\uacf5, https://mochajs.org/ Chai \u2013 \ub2e4\uc591\ud55c assertion\uc744 \uc81c\uacf5\ud574 \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac Sinon \u2013 \ud568\uc218\uc758 \uc815\ubcf4\ub97c \uce90\ub0b4\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c, \ub0b4\uc7a5 \ud568\uc218 \ub4f1\uc744 \ubaa8\ubc29 FIXME: https://ko.javascript.info/testing-mocha","title":"\ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654"},{"location":"javascript/#comment","text":"// , /* */","title":"Comment \uc8fc\uc11d"},{"location":"javascript/#use-strict","text":"ECMAScript5(ES5) \uae30\ubcf8 \ubb38\ubc95 \uc77c\ubd80 \"use strict\" // ES5 \ubaa8\ub4dc\ub85c \ub3d9\uc791","title":"use strict"},{"location":"javascript/#_2","text":"\uac1c\ubc1c\ud55c \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud574 \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \uae30\ubcf8\uc801\uc73c\ub85c use strict\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c","title":"\ube0c\ub77c\uc6b0\uc800 \ucf58\uc194"},{"location":"javascript/#_3","text":"\ube0c\ub77c\uc6b0\uc800 \ud658\uacbd\uc5d0\uc120 \uc804\uc5ed \uac1d\uccb4\ub97c window , Node.js \ud658\uacbd\uc5d0\uc120 global ( globalThis ) var gVar = 5; // var\ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub294 \uc804\uc5ed \uac1d\uccb4 property) alert(window.gVar); // 5","title":"\uc804\uc5ed \uac1d\uccb4"},{"location":"javascript/#polyfill_1","text":"if (!window.Promise) { alert(\"\uad6c\uc2dd \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9 \uc911\uc774\uc2dc\uad70\uc694!\"); } if (!window.Promise) { window.Promise = ... // \ubaa8\ub358 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uad6c\ud604\ud568 }","title":"Polyfill\uc758 \uad6c\ud604"},{"location":"javascript/#_4","text":"javascript primitive variables: \ubb38\uc790(string), \uc22b\uc790(number), bigint, \ubd88\ub9b0(boolean), \uc2ec\ubcfc(symbol), null, undefined\ud615 javascript\uc758 \ubcc0\uc218\ub294 \uac12 \uc218\uc815\uc774 \uc544\ub2c8\ub77c \uad50\uccb4\ub418\ub294 \uac1c\ub150 let message; message = 'Hello'; // \ubb38\uc790\uc5f4\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. alert(message); // \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. // \uc120\uc5b8 \ubc29\ubc95 let user = 'John', age = 25, message = 'Hello'; let user = 'John'; let age = 25; let message = 'Hello'; let user = 'John', age = 25, message = 'Hello'; // var\ub294 let\uacfc \uac70\uc758 \ub3d9\uc77c\ud558\ub098, local\uc5d0\uc11c \uc120\uc5b8\ud558\ub354\ub77c\ub3c4 global var message = 'Hello'; // \uc0c1\uc218 \uc120\uc5b8; \ud55c\ubc88 \ud560\ub2f9\ub418\uba74 \ubcc0\uacbd \ubd88\uac00 const myBirthday = '18.04.1982'; myBirthday = '01.01.2001'; // error, can't reassign the constant! // \ub300\ubb38\uc790 \uc0c1\uc218 (\uc77c\ubc18\uc801 \uad00\uc2b5) const COLOR_RED = \"#F00\"; const COLOR_GREEN = \"#0F0\"; // \uc0c1\uc218 \uc0ac\uc6a9 let color = COLOR_ORANGE; alert(color); // #FF7F00 // \uc544\ub798 \uc0c1\uc218\ub294 \uac12 \ud560\ub2f9 \uc804\uc774\ubbc0\ub85c \uc774\ud6c4 \ud560\ub2f9 \uac00\ub2a5 // \ud560\ub2f9\ud6c4\uc5d0\ub294 \ubcc0\uacbd \ubd88\uac00 const pageLoadTime = ;","title":"\ubcc0\uc218\uc640 \uc0c1\uc218"},{"location":"javascript/#_5","text":"\ubb38\uc790 \uc640 \uc22b\uc790 , \uadf8\ub9ac\uace0 \uae30\ud638 $ \uc640 _ \uc0ac\uc6a9 \uce74\uba5c \ud45c\uae30\ubc95(camelCase) \uc8fc\ub85c \uc0ac\uc6a9 \uc608\uc57d\uc5b4(reserved name) \uc0ac\uc6a9 X \uccab\ub2e8\uc5b4 \uc22b\uc790 X \ub300\uc18c\ubb38\uc790 \uad6c\ubcc4","title":"\ubcc0\uc218 \uba85\uba85 \uaddc\uce59"},{"location":"javascript/#_6","text":"\ud568\uc218\ud615(functional) \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \ubcc0\uc22b\uac12 \ubcc0\uacbd\uc744 \uae08\uc9c0 e.g. \uc2a4\uce7c\ub77c(Scala)\uc640 \uc5bc\ub7ad(Erlang) \ubcd1\ub82c \uacc4\uc0b0(parallel computation)\uc5d0 \uc720\uc6a9","title":"\ud568\uc218\ud615 \uc5b8\uc5b4"},{"location":"javascript/#_7","text":"\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd(immediately-invoked function expressions): \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uc2e4\ud589 // IIFE\ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95 (function() { alert(\"\ud568\uc218\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\"); })(); (function() { alert(\"\uc804\uccb4\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\"); }()); !function() { alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\"); }(); +function() { alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ub2e8\ud56d \ub367\uc148 \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\"); }();","title":"\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd"},{"location":"javascript/#_8","text":"","title":"\uc790\ub8cc\ud615"},{"location":"javascript/#_9","text":"\uc22b\uc790\ud615 \ubc94\uc704: (2^53-1) ~ -(2^53-1) ; 9007199254740991 BigInt : \ub05d\uc5d0 n \uc744 \ubd99\uc774\uba74 BigInt Infinity : \ubb34\ud55c\ub300, 1/0 \ub85c\ub3c4 \uad6c\ud574\uc9d0 -Infinity NaN : \uacc4\uc0b0 \uc624\ub958, e.g. \"STR\"/2 , \uc218\ub85c \ubb38\uc790\ub97c \ub098\ub20c \uacbd\uc6b0 let n = 123; n = 12.345; // \ub05d\uc5d0 'n'\uc774 \ubd99\uc73c\uba74 BigInt\ud615 \uc790\ub8cc\uc785\ub2c8\ub2e4. const bigInt = 1234567890123456789012345678901234567890n; let billion = 1000000000; let billion = 1e9; // 10\uc5b5, 1\uacfc 9\uac1c\uc758 0 alert( 7.3e9 ); // 73\uc5b5 (7,300,000,000) 1e3 = 1 * 1000 1.23e6 = 1.23 * 1000000 let ms = 0.000001; let ms = 1e-6; // 1\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c 6\ubc88 \uc18c\uc218\uc810 \uc774\ub3d9 // 10\uc744 \uc138 \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214 1e-3 = 1 / 1000 (=0.001) // 10\uc744 \uc5ec\uc12f \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214 1.23e-6 = 1.23 / 1000000 (=0.00000123) // 16, 8, 2\uc9c4\uc218\ud45c\ud604 alert( 0xff ); // 255 alert( 0xFF ); // 255 (\ub300\u00b7\uc18c\ubb38\uc790\ub97c \uac00\ub9ac\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ub458 \ub2e4 \uac19\uc740 \uac12\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.) let a = 0b11111111; // 255\uc758 2\uc9c4\uc218 let b = 0o377; // 255\uc758 8\uc9c4\uc218 alert( a == b ); // true, \uc9c4\ubc95\uc740 \ub2e4\ub974\uc9c0\ub9cc, a\uc640 b\ub294 \uac19\uc740 \uc218\uc784 let num = 255; alert( num.toString(16) ); // ff alert( num.toString(2) ); // 11111111 alert( 123456..toString(36) ); // 2n9c // base36 // Rounding \uc5b4\ub9bc\uc218 Math.floor // \uc18c\uc218\uc810 \uccab\ubc88\uc9f8 \uc790\ub9ac \ubc84\ub9bc Math.ceil // \uc18c\uc218\uc810 \uc62c\ub9bc Math.round // \ubc18\uc62c\ub9bc // https://ko.javascript.info/number // \uc22b\uc790\uac00 \ub108\ubb34 \ucee4\uc9c0\uba74 64\ube44\ud2b8 \uacf5\uac04\uc774 \ub118\uccd0\uc11c Infinity alert( 1e500 ); // Infinity // \uc815\ubc00\ub3c4 \uc190\uc2e4 alert( 0.1 + 0.2 == 0.3 ); // false // \uc815\ubc00\ub3c4 \uc190\uc2e4 \ud655\uc778 toFixed(n), n\uc740 \uc18c\uc218\uc810 \uc790\ub9bf\uc218\uc5d0\uc11c \uc5b4\ub9bc alert( 0.1.toFixed(20) ); // 0.10000000000000000555 let sum = 0.1 + 0.2; alert( sum.toFixed(2) ); // 0.30","title":"\uc22b\uc790\ud615"},{"location":"javascript/#isnan-isfinite","text":"// NaN\uc740 NaN \uc790\uae30 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uc5ec \uadf8 \uc5b4\ub5a4 \uac12\uacfc\ub3c4 \uac19\uc9c0 \uc54a\ub2e4\ub294 \uc810\uc5d0\uc11c \ub3c5\ud2b9\ud569\ub2c8\ub2e4. alert( NaN === NaN ); // false alert( isNaN(NaN) ); // true alert( isNaN(\"str\") ); // true alert( isFinite(\"15\") ); // true alert( isFinite(\"str\") ); // false, NaN\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. alert( isFinite(Infinity) ); // false, Infinity\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"isNaN, isFinite"},{"location":"javascript/#parseint-parsefloat","text":"alert( parseInt('100px') ); // 100 alert( parseFloat('12.5em') ); // 12.5 alert( parseInt('12.3') ); // 12, \uc815\uc218 \ubd80\ubd84\ub9cc \ubc18\ud658\ub429\ub2c8\ub2e4. alert( parseFloat('12.3.4') ); // 12.3, \ub450 \ubc88\uc9f8 \uc810\uc5d0\uc11c \uc22b\uc790 \uc77d\uae30\ub97c \uba48\ucda5\ub2c8\ub2e4. alert( parseInt('a123') ); // NaN, a\ub294 \uc22b\uc790\uac00 \uc544\ub2c8\ubbc0\ub85c \uc22b\uc790\ub97c \uc77d\ub294 \uac8c \uc911\uc9c0\ub429\ub2c8\ub2e4. alert( parseInt('0xff', 16) ); // 255 alert( parseInt('ff', 16) ); // 255, 0x\uac00 \uc5c6\uc5b4\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4. alert( parseInt('2n9c', 36) ); // 123456","title":"parseInt, parseFloat"},{"location":"javascript/#math","text":"alert( Math.random() ); // 0.1234567894322 alert( Math.random() ); // 0.5435252343232 alert( Math.random() ); // ... (\ubb34\uc791\uc704 \uc218) alert( Math.max(3, 5, -10, 0, 1) ); // 5 alert( Math.min(1, 2) ); // 1 alert( Math.pow(2, 10) ); // 2\uc758 10\uc81c\uacf1 = 1024 // \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c \uae30\ubc95 alert( ~2 ); // -3, -(2+1)\uacfc \uac19\uc74c alert( ~1 ); // -2, -(1+1)\uacfc \uac19\uc74c alert( ~0 ); // -1, -(0+1)\uacfc \uac19\uc74c alert( ~-1 ); // 0, -(-1+1)\uacfc \uac19\uc74c","title":"Math"},{"location":"javascript/#_10","text":"character type \uc5c6\uc74c \ud070\ub530\uc634\ud45c: \"Hello\" \uc791\uc740\ub530\uc634\ud45c: 'Hello' \uc5ed \ub530\uc634\ud45c(\ubc31\ud2f1, backtick): Hello \ubb38\uc790\uc5f4 \uae38\uc774: \ubb38\uc790\uc5f4.length \ubb38\uc790 \uc218\uc815 X, \ubb38\uc790\uc5f4\ub85c\ub9cc \ucde8\uae09 \ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc740 UTF-16\uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529 let str = \"Hello\"; let str2 = 'Single quotes are ok too'; let phrase = `can embed another ${str}`; let name = \"John\"; // backtick \uc0ac\uc6a9\uc2dc - \ubcc0\uc218\ub97c \ubb38\uc790\uc5f4 \uc911\uac04\uc5d0 \uc0bd\uc785\ud558\uac70\ub098 \uacc4\uc0b0 \uac00\ub2a5 alert( `Hello, ${name}!` ); // Hello, John! alert( `the result is ${1 + 2}` ); // the result is 3 // multi-lines let guestList = `\uc190\ub2d8: * John * Pete * Mary `; let guestList = \"\uc190\ub2d8:\\n * John\\n * Pete\\n * Mary\"; alert( \"\\u00A9\" ); // \u00a9 alert( \"\\u{20331}\" ); // \u4f6b, \uc911\uad6d\uc5b4(\uae34 \uc720\ub2c8\ucf54\ub4dc) alert( \"\\u{1F60D}\" ); // \ud83d\ude0d, \uc6c3\ub294 \uc5bc\uad74 \uae30\ud638(\uae34 \uc720\ub2c8\ucf54\ub4dc) alert( 'I\\'m the Walrus!' ); // I'm the Walrus! // \ubb38\uc790\uc5f4 \uae38\uc774 alert( `My\\n`.length ); // 3 // \ubb38\uc790 \uc811\uadfc let str = `Hello`; alert( str[0] ); // H alert( str.charAt(0) ); // H alert( str[str.length - 1] ); // o; // \ub9c8\uc9c0\ub9c9 \uae00\uc790 // \ub300\uc18c\ubb38\uc790 alert( 'Interface'.toUpperCase() ); // INTERFACE alert( 'Interface'.toLowerCase() ); // interface // \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucc3e\uae30 let str = 'Widget with id'; alert( str.indexOf('Widget') ); // 0, str\uc740 'Widget'\uc73c\ub85c \uc2dc\uc791\ud568 alert( str.indexOf('widget') ); // -1, indexOf\ub294 \ub300\u00b7\uc18c\ubb38\uc790\ub97c \ub530\uc9c0\ubbc0\ub85c \uc6d0\ud558\ub294 \ubb38\uc790\uc5f4\uc744 \ucc3e\uc9c0 \ubabb\ud568 alert( str.indexOf(\"id\") ); // 1, \"id\"\ub294 \uccab \ubc88\uc9f8 \uc704\uce58\uc5d0\uc11c \ubc1c\uacac\ub428 (Widget\uc5d0\uc11c id) let str = \"As sly as a fox, as strong as an ox\"; let target = \"as\"; let pos = -1; while ((pos = str.indexOf(target, pos + 1)) != -1) { alert( `\uc704\uce58: ${pos}` ); } // bit not \uc5f0\uc0b0\uc790 \uc0ac\uc6a9 \uae30\ubc95 let str = \"Widget\"; if (~str.indexOf(\"Widget\")) { alert( '\ucc3e\uc558\ub2e4!' ); // \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. } alert( \"Widget with id\".includes(\"Widget\") ); // true alert( \"Widget\".startsWith(\"Wid\") ); // true, \"Widget\"\uc740 \"Wid\"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4. alert( \"Widget\".endsWith(\"get\") ); // true, \"Widget\"\uc740 \"get\"\uc73c\ub85c \ub05d\ub0a9\ub2c8\ub2e4. // \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucd94\ucd9c let str = \"stringify\"; alert( str.slice(0, 5) ); // 'strin', 0\ubc88\uc9f8\ubd80\ud130 5\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(5\ubc88\uc9f8 \uc704\uce58\uc758 \uae00\uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c) alert( str.slice(0, 1) ); // 's', 0\ubc88\uc9f8\ubd80\ud130 1\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(1\ubc88\uc9f8 \uc704\uce58\uc758 \uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c) alert( str.slice(2) ); // ringify, 2\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0 alert( str.slice(-4, -1) ); // gif alert( str.substring(2, 6) ); // \"ring\" alert( str.substring(6, 2) ); // \"ring\" let str = \"stringify\"; alert( str.substr(2, 4) ); // ring, \ub450 \ubc88\uc9f8\ubd80\ud130 \uae00\uc790 \ub124 \uac1c // \ubb38\uc790\uc5f4 \ube44\uad50 UTF-16 alert( 'a' > 'Z' ); // true alert( '\u00d6sterreich' > 'Zealand' ); // true alert( \"z\".codePointAt(0) ); // 122 alert( \"Z\".codePointAt(0) ); // 90 alert( String.fromCodePoint(90) ); // Z alert( '\\u005a' ); // Z alert( '\u00d6sterreich'.localeCompare('Zealand') ); // -1","title":"\ubb38\uc790\ud615"},{"location":"javascript/#boolean","text":"let nameFieldChecked = true; let ageFieldChecked = false; let isGreater = 4 > 1;","title":"boolean\ud615"},{"location":"javascript/#null","text":"\uc77c\ubc18 null point\uc758 \uc774\ubbf8\uac00 \uc544\ub2c8\ub77c, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294(nothing) \uac12, \ube44\uc5b4 \uc788\ub294(empty) \uac12, \uc54c \uc218 \uc5c6\ub294(unknown) \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370 \uc0ac\uc6a9 let age = null; // \ub098\uc774(age)\ub97c \uc54c \uc218 \uc5c6\uac70\ub098 \uadf8 \uac12\uc774 \ube44\uc5b4\uc788\uc74c","title":"null \uac12"},{"location":"javascript/#undefined","text":"undefined \ub294 '\uac12\uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\u2019\ub97c \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9 let age; alert(age); // 'undefined' \ucd9c\ub825","title":"undefined \uac12"},{"location":"javascript/#object","text":"= json ? This is non-primitive type. property : {key: value} pair, key=\ubb38\uc790\ud615, \uc2ec\ubcfc\ud615, value=\ubaa8\ub4e0 \uc790\ub8cc\ud615 dot notation , square bracket notation \uc73c\ub85c property \uc811\uadfc,\ucd94\uac00,\uc0ad\uc81c \uac00\ub2a5 in \uc744 \uc0ac\uc6a9\ud574 property \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778 \uac00\ub2a5 ( true / false ) property\ub294 object\uc5d0 \ucc38\uc870\ub85c \uad6c\ud604\ub428, object\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud560 \uacbd\uc6b0 \uac19\uc740 property\ub97c \ucc38\uc870\ud568 // empty object let user = new Object(); // \uac1d\uccb4 \uc0dd\uc131\uc790\ub85c \uc0dd\uc131 let user = {}; // \uac1d\uccb4 \ub9ac\ud130\ub7f4(object literal)\ub85c \uc0dd\uc131 let user = { // \uac1d\uccb4 name: \"John\", // \ud0a4: \"name\", \uac12: \"John\" age: 30, // \ud0a4: \"age\", \uac12: 30 \"likes birds\": true // \ubcf5\uc218\uc758 \ub2e8\uc5b4\ub294 \ub530\uc634\ud45c }; alert( user.name ); // John, dot notation\uc744 \uc0ac\uc6a9\ud574 \uc811\uadfc alert( user[\"name\"] ); // square bracket notation\uc744 \uc0ac\uc6a9\ud55c \uc811\uadfc user.likes birds = false; // error, \uad6c\ubb38\ud574\uc11d \ubd88\ub2a5 user[\"likes birds\"] = false; // ok alart( user.weight === undefined ); // property\uac00 \uc5c6\uc744 \uacbd\uc6b0, undefined alart( user[\"weight\"] === undefined ); alart( \"key\" in user ); // in \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud574 \uc874\uc7ac\uc720\ubb34 \ud655\uc778 user.isAdmin = true; // add property delete user.age; // delete a property delete user[\"likes birds\"]; let user = { name: \"John\", age: 30, }; // computed property! let fruit = \"apple\" let fruit2 = \"banana\" let bag = { [fruit]: 5, // fruit\ub97c key\ub85c \uc0ac\uc6a9 [fruit + 'Computers']: 5 // key\ub85c \ubcf5\ud569 \uc5f0\uc0b0 \uac00\ub2a5 }; bag[fruit2] = 6; // fruit2\ub97c key\ub85c \uc0ac\uc6a9 alert( bag.apple ); // fruit\uc5d0 \"apple\"\uc774 \ud560\ub2f9\ub418\uc5c8\ub2e4\uba74, 5\uac00 \ucd9c\ub825 // property value shorthand (\ub2e8\ucd95 \uad6c\ubb38) function makeUser(name, age) { return { name, // name: name \uacfc \uac19\uc74c age, // age: age \uc640 \uac19\uc74c // ... }; } let user = { name, // name: name \uacfc \uac19\uc74c age: 30 }; // property iteration for (key in object) { // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. } // object\uc758 property\ub294 \uc120\uc5b8\ud560 \ud544\uc694\uc5c6\uc74c function marry(man, woman) { woman.husband = man; man.wife = woman; return { father: man, mother: woman } } let family = marry({ name: \"John\" }, { name: \"Ann\" });","title":"object"},{"location":"javascript/#const-object","text":"const user = { name: \"John\" }; user.name = \"Pete\"; // (*) alert(user.name); // Pete","title":"const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5"},{"location":"javascript/#-ok","text":"// \uc608\uc57d\uc5b4\ub97c \ud0a4\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. let obj = { for: 1, let: 2, return: 3 };","title":"\uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok"},{"location":"javascript/#0-0","text":"let obj = { 0: \"test\" // \"0\": \"test\"\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. }; alert( obj[\"0\"] ); // test alert( obj[0] ); // test","title":"\ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658"},{"location":"javascript/#object_1","text":"let a = {}; let b = a; // \ucc38\uc870\uc5d0 \uc758\ud55c \ubcf5\uc0ac alert( a == b ); // true, \ub450 \ubcc0\uc218\ub294 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4. alert( a === b ); // true let a = {}; let b = {}; // \ub3c5\ub9bd\ub41c \ub450 \uac1d\uccb4 alert( a == b ); // false","title":"object \ube44\uad50"},{"location":"javascript/#objectassign","text":"property loop\ub97c \ud1b5\ud574\uc11c \ubcf5\uc0ac Object.assign(dest, [src1, src2, src3...]) \uc0ac\uc6a9 \uae4a\uc740 \ubcf5\uc0ac(deep cloning)\ub294 \uc9c1\uc811 \ub9cc\ub4e4\ub358\uc9c0, lodash\uc758 _.cloneDeep(obj) \uc0ac\uc6a9 let user = { name: \"John\", age: 30 }; let clone = {}; // \uc0c8\ub85c\uc6b4 \ube48 \uac1d\uccb4 // \ube48 \uac1d\uccb4\uc5d0 user \ud504\ub85c\ud37c\ud2f0 \uc804\ubd80\ub97c \ubcf5\uc0ac\ud574 \ub123\uc2b5\ub2c8\ub2e4. for (let key in user) { clone[key] = user[key]; } // Object.assign \uc0ac\uc6a9 let user = { name: \"John\" }; let permissions1 = { canView: true }; let permissions2 = { canEdit: true }; // permissions1\uacfc permissions2\uc758 \ud504\ub85c\ud37c\ud2f0\ub97c user\ub85c \ubcf5\uc0ac Object.assign(user, permissions1, permissions2);","title":"\uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign"},{"location":"javascript/#methods-and-this","text":"\uac1c\uccb4\uc758 \ub3d9\uc791\uc744 \uba85\uc138 = property\uc5d0 \ud560\ub2f9\ub41c \ud568\uc218 this : method\uc5d0\uc11c \ud574\ub2f9 \uac1d\uccb4\uc758 property \uc811\uadfc\uc744 \uc704\ud574 \uc0ac\uc6a9 Arrow function\uc740 this \uac00 \uc5c6\uc74c, \ubcc4\uac1c\uc758 this\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \uac74 \uc6d0\ud558\uc9c0 \uc54a\uace0, \uc678\ubd80 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \uc788\ub294 this\ub97c \uc774\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 \ud654\uc0b4\ud45c \ud568\uc218\uac00 \uc720\uc6a9 let user = { sayHi: function() { alert(\"Hello\"); } }; // method \ucd95\uc57d\ud615 let user = { sayHi() { // \"sayHi: function()\"\uacfc \ub3d9\uc77c alert(\"Hello\"); } }; // Arrow function\uc740 \uc0c1\uc704 namespace\uc758 this\ub97c \uac00\uc838\uc634 let user = { firstName: \"\ubcf4\ub77c\", sayHi() { let arrow = () => alert(this.firstName); arrow(); } }; user.sayHi(); // sayHi\uc758 this \ucc28\uc6a9; \uacb0\uacfc '\ubcf4\ub77c'","title":"Methods and this"},{"location":"javascript/#constructor-function","text":"","title":"\uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function"},{"location":"javascript/#-constructor-function","text":"\uad00\ub8401: \ud568\uc218 \uc774\ub984\uc758 \uccab \uae00\uc790\ub294 \ub300\ubb38\uc790\ub85c \uc2dc\uc791 \uad00\ub8402: \ubc18\ub4dc\uc2dc 'new' \uc5f0\uc0b0\uc790\ub97c \ubd99\uc5ec \uc2e4\ud589 new Constructor(...) \uc2dc \ube48 \uac1d\uccb4 \uc0dd\uc131, this\uc5d0 \ud560\ub2f9 \ud568\uc218 \uc2e4\ud589 => property \ucd94\uac00 \uc0dd\uc131\ub41c this\ub97c \ubc18\ud658 // constructor function function User(name) { // this = {}; (\ube48 \uac1d\uccb4\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9d0) // \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud37c\ud2f0\ub97c this\uc5d0 \ucd94\uac00\ud568 this.name = name; this.isAdmin = false; // return this; (this\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ubc18\ud658\ub428) } let user = new User(\"\ubcf4\ub77c\"); alert(user.isAdmin); // false // \uc775\uba85 \uc0dd\uc131\uc790 (anonymous constructor) - \ud55c\ubc88\ub9cc \uc0ac\uc6a9 let user = new function() { this.name = \"John\"; this.isAdmin = false; }; // new.target\uc73c\ub85c constructor\uac00 new\ud568\uaed8 \ud638\ucd9c\ub418\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\uc74c. function User() { alert(new.target); } // 'new' \uc5c6\uc774 \ud638\ucd9c\ud568 User(); // undefined // 'new'\ub97c \ubd99\uc5ec \ud638\ucd9c\ud568 new User(); // function User { ... } // \uc0dd\uc131\uc790 () \uad04\ud638 \uc0dd\ub7b5 let user = new User; // <-- \uad04\ud638\uac00 \uc5c6\uc74c let user = new User(); // \uc704 \ucf54\ub4dc\uc640 \ub611\uac19\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4. // \uc0dd\uc131\uc790\uc5d0\uc11c method \ucd94\uac00 function User(name) { this.name = name; this.sayHi = function() { alert( \"\uc81c \uc774\ub984\uc740 \" + this.name + \"\uc785\ub2c8\ub2e4.\" ); }; } let bora = new User(\"\uc774\ubcf4\ub77c\"); bora.sayHi(); // \uc81c \uc774\ub984\uc740 \uc774\ubcf4\ub77c\uc785\ub2c8\ub2e4.","title":"- \uc0dd\uc131\uc790 \ud568\uc218(constructor function)\uc640 \uc77c\ubc18 \ud568\uc218\uc5d0 \uae30\uc220\uc801\uc778 \ucc28\uc774\ub294 \uc5c6\uc74c"},{"location":"javascript/#optional-chaining","text":"property \uc874\uc7ac \uc720\ubb34 \ud3c9\uac00 method\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5 property \uc4f0\uae30\uc5d0\ub294 \uc0ac\uc6a9 \ubd88\uac00 let user = {}; // \uc8fc\uc18c \uc815\ubcf4\uac00 \uc5c6\ub294 \uc0ac\uc6a9\uc790 alert(user.address.street); // TypeError: Cannot read property 'street' of undefined alert( user && user.address && user.address.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. alert( user?.address?.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. <= optional chaining // \ud568\uc218 \ud638\ucd9c\uc5d0\ub3c4 \uc0ac\uc6a9 let user1 = { firstName: \"Violet\" admin() { alert(\"\uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\"); } } let user2 = {}; user1.admin?.(); // \uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4. user2.admin?.(); alert( user1?.[\"firstName\"] ); // Violet","title":"\uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) ?., ?.(), ?.[]"},{"location":"javascript/#object_2","text":"\uc544\ub798 \ud568\uc218\ub294 \u2018\uc9c4\uc9dc\u2019 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\uba70, Symbol\uc740 \ubb34\uc2dc Object.keys(obj) : \uac1d\uccb4\uc758 \ud0a4\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.values(obj) : \uac1d\uccb4\uc758 \uac12\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.entries(obj) : [\ud0a4, \uac12] \uc30d\uc744 \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658 Object.fromEntries(array) : Object.entries(obj) \uc758 \uc5ed\ubcc0\ud658 let user = { name: \"John\", age: 30 }; // Object.keys(user) = [\"name\", \"age\"] // Object.values(user) = [\"John\", 30] // Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ] for (let value of Object.values(user)) { alert(value); } let prices = { banana: 1, orange: 2, meat: 4, }; let doublePrices = Object.fromEntries( // \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ubcc0\ud658\ud574\uc11c \ubc30\uc5f4 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc778 map\uc744 \uc801\uc6a9\ud558\uace0 fromEntries\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc744 \ub2e4\uc2dc \uac1d\uccb4\ub85c \ub418\ub3cc\ub9bd\ub2c8\ub2e4. Object.entries(prices).map(([key, value]) => [key, value * 2]) ); alert(doublePrices.meat); // 8","title":"object \uc21c\ud68c \ud568\uc218"},{"location":"javascript/#symbol","text":"\uc678\ubd80 \uac1d\uccb4\uc5d0 \uc790\uc2e0\uc758 \uc815\ubcf4\ub97c hidden property\ub85c \ucd94\uac00\uc2dc \uc720\uc6a9 for..in \ubc18\ubcf5\ubb38\uc5d0\uc11c \ubc30\uc81c Object.assign \uc740 symbol\ub3c4 \ubcf5\uc0ac\ud568 global symbol registry : global \uc601\uc5ed\uc5d0 symbol\uc744 \uc800\uc7a5, script \uacf3\uacf3\uc5d0\uc11c symbol\uc744 \ud638\ucd9c\ud558\uc5ec \uc0ac\uc6a9 system symbol : javascript \ub0b4\ubd80 symbol; https://tc39.github.io/ecma262/#sec-well-known-symbols Symbol.hasInstance Symbol.isConcatSpreadable Symbol.iterator Symbol.toPrimitive let id = Symbol(\"id\"); alert(id); // TypeError: Cannot convert a Symbol value to a string alert(id.toString()); // Symbol(id)\uac00 \uc5bc\ub7ff \ucc3d\uc5d0 \ucd9c\ub825\ub428 alert(id.description); // id // Hidden property let user = { // \uc11c\ub4dc\ud30c\ud2f0 \ucf54\ub4dc\uc5d0\uc11c \uac00\uc838\uc628 \uac1d\uccb4 name: \"John\" }; let id = Symbol(\"id\"); user[id] = 1; alert( user[id] ); // \uc2ec\ubcfc\uc744 \ud0a4\ub85c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. // \ub2e4\ub978 \ubc29\ubc95 let id = Symbol(\"id\"); let user = { name: \"John\", [id]: 123 // \"id\": 123\uc740 \uc548\ub428 }; // Object.assign\uacfc symbol \ub3d9\uc791 let id = Symbol(\"id\"); let user = { [id]: 123 }; let clone = Object.assign({}, user); alert( clone[id] ); // 123 // \uc804\uc5ed \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0\uc11c \uc2ec\ubcfc \uc77d\uae30 let id = Symbol.for(\"id\"); // \uc2ec\ubcfc\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c\uc6b4 \uc2ec\ubcfc \uc0dd\uc131 let idAgain = Symbol.for(\"id\"); alert( id === idAgain ); // true // \uc2ec\ubcfc\uc744 \uc774\uc6a9\ud574 \uc774\ub984\uc744 \uc5bb\uc74c alert( Symbol.keyFor(id) ); // \"id\" alert( Symbol.keyFor(localSymbol) ); // \uc804\uc5ed \uc2ec\ubcfc\uc774 \uc544\ub2d8, undefined \ubc18\ud658","title":"symbol"},{"location":"javascript/#symboltoprimitive","text":"\uac1d\uccb4\uc5d0 obj[Symbol.toPrimitive](hint) \uba54\uc11c\ub4dc\uac00 \uc788\ub294\uc9c0 \ucc3e\uace0, \uc788\ub2e4\uba74 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. Symbol.toPrimitive \ub294 \uc2dc\uc2a4\ud15c \uc2ec\ubcfc\ub85c, \uc2ec\ubcfc\ud615 \ud0a4\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. 1\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0 hint\uac00 \"string\"\uc774\ub77c\uba74, obj.toString() \uc774\ub098 obj.valueOf() \ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428). 1\uacfc 2\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0, hint\uac00 \"number\"\ub098 \"default\"\ub77c\uba74 obj.valueOf() \ub098 obj.toString() \uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428). hint\ub294 \"string\", \"number\", \"default\" \uc911 \ud558\ub098 let user = { name: \"John\", money: 1000, [Symbol.toPrimitive](hint) { alert(`hint: ${hint}`); return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money; } }; // \ub370\ubaa8: alert(user); // hint: string -> {name: \"John\"} alert(+user); // hint: number -> 1000 alert(user + 500); // hint: default -> 1500 // toString, valueOf let user = { name: \"John\", money: 1000, // hint\uac00 \"string\"\uc778 \uacbd\uc6b0 toString() { return `{name: \"${this.name}\"}`; }, // hint\uac00 \"number\"\ub098 \"default\"\uc778 \uacbd\uc6b0 valueOf() { return this.money; } }; alert(user); // toString -> {name: \"John\"} alert(+user); // valueOf -> 1000 alert(user + 500); // valueOf -> 1500","title":"\uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive"},{"location":"javascript/#iterable-symboliterator","text":"\uc8fc\ub85c array\uc5d0 \uc0ac\uc6a9\ub418\ub358 for..in \uc774 \ub3d9\uc791 \uac00\ub2a5\ud568 next() \ub2e4\uc74c \uac12 iterater\ub97c \ubc18\ud658 let range = { from: 1, to: 5, [Symbol.iterator]() { this.current = this.from; return this; }, next() { if (this.current <= this.to) { return { done: false, value: this.current++ }; } else { return { done: true }; } } }; for (let num of range) { alert(num); // 1, then 2, 3, 4, 5 } \ubb38\uc790\uc5f4 = iterable for (let char of \"test\") { // \uae00\uc790 \ud558\ub098\ub2f9 \ud55c \ubc88 \uc2e4\ud589\ub429\ub2c8\ub2e4(4\ud68c \ud638\ucd9c). alert( char ); // t, e, s, t\uac00 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\ub428 } Array.from \uc73c\ub85c \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uae30 let arrayLike = { 0: \"Hello\", 1: \"World\", length: 2 }; let arr = Array.from(arrayLike); // (*) alert(arr.pop()); // World (\uba54\uc11c\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.)","title":"iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator"},{"location":"javascript/#array","text":"push\uc640 pop\uc740 \ube60\ub974\uc9c0\ub9cc shift\uc640 unshift\ub294 \ub290\ub9bc https://ko.javascript.info/array for..in loop \uc0ac\uc6a9\uc2dc \ub0b4\ubd80 property\ub85c \uac19\uc774 \uc21c\ud68c\ud558\ubbc0\ub85c \uc0ac\uc6a9 X // \uc120\uc5b8 let arr = new Array(); let arr = []; let arr = new Array(2); // [undefined, undefined] let fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\"]; let fruits = [ \"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\", ]; let matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]; // \uc811\uadfc alert( fruits[0] ); // \uc0ac\uacfc fruits[2] = '\ubc30'; // \ud06c\uae30 alert( fruits.length ); // 3 // \ubcf5\ud569 \ubc30\uc5f4 let arr = [ '\uc0ac\uacfc', { name: '\uc774\ubcf4\ub77c' }, true, function() { alert('\uc548\ub155\ud558\uc138\uc694.'); } ]; // pop\u00b7push\uc640 shift\u00b7unshift let fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"]; alert( fruits.pop() ); // \ubc30\uc5f4\uc5d0\uc11c \"\ubc30\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4. alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0 fruits.push(\"\ubc30\"); alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30 alert( fruits.shift() ); // \ubc30\uc5f4\uc5d0\uc11c \"\uc0ac\uacfc\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4. alert( fruits ); // \uc624\ub80c\uc9c0,\ubc30 fruits.unshift('\uc0ac\uacfc'); // \uc55e\uc5d0 \uc694\uc18c \ucd94\uac00 alert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30 // \uc5ec\ub7ec \uc694\uc18c \uc0bd\uc785 fruits.push(\"\uc624\ub80c\uc9c0\", \"\ubc30\"); fruits.unshift(\"\ud30c\uc778\uc560\ud50c\", \"\ub808\ubaac\"); // \uc694\uc18c \uc0ad\uc81c let arr = [\"I\", \"go\", \"home\"]; delete arr[1]; // \"go\"\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4. arr.splice(1, 1); // \uc778\ub371\uc2a4 1\ubd80\ud130 \uc694\uc18c \ud55c \uac1c\ub97c \uc81c\uac70 // \uc694\uc18c \ub300\uccb4 let arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"]; // \ucc98\uc74c(0) \uc138 \uac1c(3)\uc758 \uc694\uc18c\ub97c \uc9c0\uc6b0\uace0, \uc774 \uc790\ub9ac\ub97c \ub2e4\ub978 \uc694\uc18c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4. arr.splice(0, 3, \"Let's\", \"dance\"); alert( arr ) // now [\"Let's\", \"dance\", \"right\", \"now\"] // \uc694\uc18c \ucd94\uac00 (deleteCount\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc694\uc18c\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub97c \ucd94\uac00) arr.splice(2, 0, \"complex\", \"language\"); // slicing, concat let arr = [1, 2]; // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4]) ); // 1,2,3,4 // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, [5,6]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6 // arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, 5\uc640 6\uc744 \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. alert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6 let arr = [\"t\", \"e\", \"s\", \"t\"]; alert( arr.slice(1, 3) ); // e,s (\uc778\ub371\uc2a4\uac00 1\uc778 \uc694\uc18c\ubd80\ud130 \uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac(\uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\ub294 \uc81c\uc678)) alert( arr.slice(-2) ); // s,t (\uc778\ub371\uc2a4\uac00 -2\uc778 \uc694\uc18c\ubd80\ud130 \uc81c\uc77c \ub05d \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac) // \ubc18\ubcf5\ubb38, \uc21c\ud68c let arr = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"]; for (let i = 0; i < arr.length; i++) { alert( arr[i] ); } // for..of for (let fruit of fruits) { alert( fruit ); } arr.forEach(function(item, index, array) { // \uc694\uc18c\uc5d0 \ubb34\uc5b8\uac00\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. }); [\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach(alert); [\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) => { alert(`${item} is at index ${index} in ${array}`); }); // \ubc30\uc5f4 \ud0d0\uc0c9: indexOf, lastIndexOf\uc640 includes let arr = [1, 0, false]; alert( arr.indexOf(0) ); // 1 alert( arr.indexOf(false) ); // 2 alert( arr.indexOf(null) ); // -1 alert( arr.includes(1) ); // true const arr = [NaN]; alert( arr.indexOf(NaN) ); // -1 (\uc644\uc804 \ud56d\ub4f1 \ube44\uad50 === \ub294 NaN\uc5d4 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c 0\uc774 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.) alert( arr.includes(NaN) );// true (NaN\uc758 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.) let result = arr.find(function(item, index, array) { }); let users = [ {id: 1, name: \"John\"}, {id: 2, name: \"Pete\"}, {id: 3, name: \"Mary\"} ]; let user = users.find(item => item.id == 1); alert(user.name); // John // \uc870\uac74 \ud0d0\uc0c9 let users = [ {id: 1, name: \"John\"}, {id: 2, name: \"Pete\"}, {id: 3, name: \"Mary\"} ]; // \uc55e\ucabd \uc0ac\uc6a9\uc790 \ub450 \uba85\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. let someUsers = users.filter(item => item.id < 3); alert(someUsers.length); // 2","title":"Array"},{"location":"javascript/#mapping-function-for-array","text":"\ubc30\uc5f4\uc744 \ubcc0\ud615\uc2dc\ud0a4\uac70\ub098 \uc694\uc18c\ub97c \uc7ac \uc815\ub82c\ud574\uc8fc\ub294 \uba54\uc11c\ub4dc let result = arr.map(function(item, index, array) { // \uc694\uc18c \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. }); let lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item => item.length); alert(lengths); // 5,7,6","title":"mapping function for array"},{"location":"javascript/#sort","text":"let arr = [ 1, 2, 15 ]; arr.sort(); // arr \ub0b4\ubd80\uac00 \uc7ac \uc815\ub82c\ub429\ub2c8\ub2e4. alert( arr ); // 1, 15, 2 function compareNumeric(a, b) { if (a > b) return 1; if (a == b) return 0; if (a < b) return -1; } let arr = [ 1, 2, 15 ]; arr.sort(compareNumeric); alert(arr); // 1, 2, 15 [1, -2, 15, 2, 0, 8].sort(function(a, b) { alert( a + \" <> \" + b ); return a - b; }); // arrow function \uc0ac\uc6a9 arr.sort( (a, b) => a - b ); // \ubb38\uc790\uc5f4 \uc815\ub82c\uc2dc\uc5d0\ub294 localeCompare \uc0ac\uc6a9 let countries = ['\u00d6sterreich', 'Andorra', 'Vietnam']; alert( countries.sort( (a, b) => a > b ? 1 : -1) ); // Andorra, Vietnam, \u00d6sterreich (\uc81c\ub300\ub85c \uc815\ub82c\uc774 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.) alert( countries.sort( (a, b) => a.localeCompare(b) ) ); // Andorra,\u00d6sterreich,Vietnam (\uc81c\ub300\ub85c \uc815\ub82c\ub418\uc5c8\ub124\uc694!) // \uc5ed\uc815\ub82c let arr = [1, 2, 3, 4, 5]; arr.reverse(); alert( arr ); // 5,4,3,2,1","title":"sort"},{"location":"javascript/#_11","text":"let names = 'Bilbo, Gandalf, Nazgul'; let arr = names.split(', '); for (let name of arr) { alert( `${name}\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0` ); // Bilbo\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0 } let str = \"test\"; alert( str.split('') ); // t,e,s,t let arr = ['Bilbo', 'Gandalf', 'Nazgul']; let str = arr.join(';'); // \ubc30\uc5f4 \uc694\uc18c \ubaa8\ub450\ub97c ;\ub97c \uc0ac\uc6a9\ud574 \ud558\ub098\uc758 \ubb38\uc790\uc5f4\ub85c \ud569\uce69\ub2c8\ub2e4. alert( str ); // Bilbo;Gandalf;Nazgul","title":"\ubb38\uc790\uc5f4 &lt;==&gt; \ubc30\uc5f4"},{"location":"javascript/#reduce-reduceright","text":"let value = arr.reduce(function(accumulator, item, index, array) { // ... }, [initial]); let arr = [1, 2, 3, 4, 5]; let result = arr.reduce((sum, current) => sum + current, 0); alert(result); // 15","title":"reduce\uc640 reduceRight (\ub204\uc0b0\uae30)"},{"location":"javascript/#_12","text":"alert(Array.isArray({})); // false alert(Array.isArray([])); // true","title":"\ubc30\uc5f4\uc778\uc9c0 \ud655\uc778"},{"location":"javascript/#map","text":"\uac1d\uccb4\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, key\uc5d0 \ub2e4\uc591\ud55c \uc790\ub8cc\ud615 \uc9c0\uc6d0 \ub418\ub3c4\ub85d get(), set()\uc744 \uc0ac\uc6a9? map\uc740 \ud0a4\ub85c \uac1d\uccb4\ub97c \ud5c8\uc6a9 SameValueZero \ub77c \ubd88\ub9ac\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uac12\uc758 \ub4f1\uac00 \uc5ec\ubd80\ub97c \ud655\uc778 call chaining \uc0ac\uc6a9\uac00\ub2a5: \ud638\ucd9c\ub9c8\ub2e4 map \uc790\uc2e0\uc744 \ubc18\ud658\ud568 \uc0bd\uc785 \uc21c\uc11c\ub97c \uae30\uc5b5\ud568 = ordered map Object.entries : \uac1d\uccb4\ub97c map\uc73c\ub85c \ubc14\uafb8\uae30 Object.fromEntries : map\uc744 \uac1d\uccb4\ub85c \ubc14\uafb8\uae30","title":"map"},{"location":"javascript/#_13","text":"new Map() : \uc0dd\uc131 map.set(key, value) : {key: value} \uc800\uc7a5 map.get(key) : value \ubc18\ud658, key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 undefined map.has(key) : true if the key exists map.delete(key) : key, value \uc0ad\uc81c map.clear() : clear all in the map. map.size : size of the map map.keys() : \uac01 \uc694\uc18c\uc758 \ud0a4\ub97c \ubaa8\uc740 \ubc18\ubcf5 \uac00\ub2a5\ud55c(iterable, \uc774\ud130\ub7ec\ube14) \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.values() : \uac01 \uc694\uc18c\uc758 \uac12\uc744 \ubaa8\uc740 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.entries() : \uc694\uc18c\uc758 [\ud0a4, \uac12]\uc744 \ud55c \uc30d\uc73c\ub85c \ud558\ub294 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; for..of map.forEach((value, key, map) => {}) : map\uc758 {key: value} \uc21c\ud68c let map = new Map(); map.set('1', 'str1'); // \ubb38\uc790\ud615 \ud0a4 map.set(1, 'num1'); // \uc22b\uc790\ud615 \ud0a4 map.set(true, 'bool1'); // \ubd88\ub9b0\ud615 \ud0a4 // map\uc740 key\uc758 \ud0c0\uc785\uc744 \ubcc0\ud658\uc2dc\ud0a4\uc9c0 \uc54a\uace0 \uadf8\ub300\ub85c \uc720\uc9c0 alert( map.get(1) ); // 'num1' alert( map.get('1') ); // 'str1' alert( map.size ); // 3 // map call chaining map.set('1', 'str1') .set(1, 'num1') .set(true, 'bool1'); // map \uc694\uc18c \ubc18\ubcf5\ubb38 let recipeMap = new Map([ ['cucumber', 500], ['tomatoes', 350], ['onion', 50] ]); // \ud0a4(vegetable)\ub97c \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let vegetable of recipeMap.keys()) { alert(vegetable); // cucumber, tomatoes, onion } // \uac12(amount)\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let amount of recipeMap.values()) { alert(amount); // 500, 350, 50 } // [\ud0a4, \uac12] \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4. for (let entry of recipeMap) { // recipeMap.entries()\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. alert(entry); // cucumber,500 ... } // \uac01 (\ud0a4, \uac12) \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \ud568\uc218\ub97c \uc2e4\ud589 recipeMap.forEach( (value, key, map) => { alert(`${key}: ${value}`); // cucumber: 500 ... }); // map\uc73c\ub85c \ubcc0\ud658 let map = new Map([ // \uac01 \uc694\uc18c\uac00 [\ud0a4, \uac12] \uc30d\uc778 \ubc30\uc5f4 ['1', 'str1'], [1, 'num1'], [true, 'bool1'] ]); alert( map.get('1') ); // str1 let obj = { name: \"John\", age: 30 }; let map = new Map(Object.entries(obj)); alert( map.get('name') ); // John // map\uc744 object\ub85c \ubcc0\ud658 let prices = Object.fromEntries([ ['banana', 1], ['orange', 2], ['meat', 4] ]);","title":"\uc81c\uacf5 \ud568\uc218"},{"location":"javascript/#set","text":"\uac12\uc758 \uc911\ubcf5 \ubd88\uac00\ud55c collection\uc73c\ub85c call chaining \uc0ac\uc6a9\uac00\ub2a5 new Set(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac set.add(value) : \uac12\uc744 \ucd94\uac00 set.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false. set.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658 set.clear() : set\uc758 \ubaa8\ub4e0 \uac12 \uc0ad\uc81c set.size : set \ub0b4 \uc694\uc18c\uc758 \uc218 set.forEach((value, valueAgain, set) => {}) : set \uc694\uc18c \ubc18\ubcf5 \uc21c\ud68c set.keys() set.values() set.entries() let set = new Set(); let john = { name: \"John\" }; let pete = { name: \"Pete\" }; let mary = { name: \"Mary\" }; set.add(john); set.add(pete); set.add(mary); set.add(john); set.add(mary); alert( set.size ); // 3 for (let user of set) { alert(user.name); // // John, Pete, Mary \uc21c\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4. } // forEach set.forEach((value, valueAgain, set) => { alert(value); });","title":"set"},{"location":"javascript/#weakmap-and-weakset","text":"WeakMap\uc740 object\ub9cc\uc744 key\ub85c \uc0ac\uc6a9\ud558\uba70, object\uac00 unreachable\ud558\uba74, WeakMap\uc5d0 key\ub3c4 Garbage collection\uc5d0 \uc758\ud574 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc790\ub3d9\ud574\uc81c\ub428 WeakMap\uc740 \ubd80\ucc28\uc801\uc778 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uacf3\uc774 \ud544\uc694\ud560 \ub54c \uc720\uc6a9 e.g. \uc0ac\uc6a9\uc790 \ubc29\ubb38\ud69f\uc218, caching weakMap.get(key) weakMap.set(key, value) weakMap.delete(key) weakMap.has(key) WeakSet\ub3c4 WeakMap\uacfc \uc720\uc0ac\ud558\ub098 \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. new WeakSet(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac weakSet.add(value) : \uac12\uc744 \ucd94\uac00 weakSet.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false. weakSet.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658 let john = { name: \"John\" }; let weakMap = new WeakMap(); weakMap.set(john, \"...\"); john = null; // \ucc38\uc870\ub97c \ub36e\uc5b4\uc500 // john\uc744 \ub098\ud0c0\ub0b4\ub294 \uac1d\uccb4\ub294 \uc774\uc81c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc9c0\uc6cc\uc9d1\ub2c8\ub2e4! // caching let cache = new WeakMap(); // \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \uc704\ud06c\ub9f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. function process(obj) { if (!cache.has(obj)) { let result = /* \uc5f0\uc0b0 \uc218\ud589 */ obj; cache.set(obj, result); } return cache.get(obj); } // \ud83d\udcc1 main.js let obj = {/* ... \uac1d\uccb4 ... */}; let result1 = process(obj); let result2 = process(obj); // \uac1d\uccb4\uac00 \uc4f8\ubaa8\uc5c6\uc5b4\uc9c0\uba74 \uc544\ub798\uc640 \uac19\uc774 null\ub85c \ub36e\uc5b4\uc501\ub2c8\ub2e4. obj = null;","title":"WeakMap and WeakSet"},{"location":"javascript/#date","text":"UTC \uae30\uc900(UTC+0) 1970\ub144 1\uc6d4 1\uc77c 0\uc2dc 0\ubd84 0\ucd08\uc5d0\uc11c milliseconds \ud6c4\uc758 \uc2dc\uac04\uac12\uc744 \uc800\uc7a5\ud558\ub294 object new Date(milliseconds) new Date(datestring) new Date(year, month, date, hours, minutes, seconds, ms) getFullYear() , getMonth() , getDate() , getHours() , getMinutes() , getSeconds() , getMilliseconds() getDay() : \uc694\uc77c getUTCFullYear() , getUTCMonth() , getUTCDay() : UTC timezone getTime() : returns timestamp getTimezoneOffset() : offset from UTC basetime setFullYear(year, [month], [date]) setMonth(month, [date]) setDate(date) setHours(hour, [min], [sec], [ms]) setMinutes(min, [sec], [ms]) setSeconds(sec, [ms]) setMilliseconds(ms) setTime(milliseconds) let date = new Date(\"2017-01-26\"); let now = new Date(); alert( now ); // \ud604\uc7ac \ub0a0\uc9dc \ubc0f \uc2dc\uac04\uc774 \ucd9c\ub825\ub428 let timestamp = Date.now() // current timestamp","title":"Date"},{"location":"javascript/#autocorrection","text":"let date = new Date(2013, 0, 32); // 2013\ub144 1\uc6d4 32\uc77c alert(date); // 2013\ub144 2\uc6d4 1\uc77c alert(+date); // \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658 (timestamp)","title":"Autocorrection"},{"location":"javascript/#benchmarking-test","text":"function diffGetTime(date1, date2) { return date2.getTime() - date1.getTime(); }","title":"Benchmarking Test"},{"location":"javascript/#dateparse","text":"YYYY-MM-DDTHH:mm:ss.sssZ+-hh:mm \ud615\uc2dd\uc758 \ubb38\uc790\ub97c parsing\ud558\uc5ec Data object\ub85c \ubc18\ud658 let ms = Date.parse('2012-01-26T13:51:50.417-07:00');","title":"Date.parse"},{"location":"javascript/#json-javascript-object-notation-serialization","text":"javascript\uc758 object\uc758 serialization \uae30\uc220\ub85c RFC4627\ub85c \ud45c\uc900\ud654 JSON.stringify : It serializes an object to a JSON-encoded string. JSON.parse : It de-serializes an object from a JSON-encoded string. \ud45c\ud604 \uc790\ub8cc\ud615: object , array , string , number , boolean , null \uc774\uc678 \uc790\ub8cc\ud615\uc740 \ubaa8\ub450 ignored \uc21c\ud658 \ucc38\uc870 object\uac00 \uc788\uc744 \uacbd\uc6b0 error let student = { name: 'John', age: 30, isAdmin: false, courses: ['html', 'css', 'js'], wife: null }; let json = JSON.stringify(student); alert(typeof json); // string alert(json); // {\"name\":\"John\",\"age\":30,\"isAdmin\":false,\"courses\":[\"html\",\"css\",\"js\"],\"wife\":null} alart(JSON.stringify(json)); // \uc21c\ud658 \ucc38\uc870\uc2dc error let room = { number: 23 }; let meetup = { title: \"Conference\", participants: [\"john\", \"ann\"] }; meetup.place = room; // meetup\uc740 room\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. room.occupiedBy = meetup; // room\uc740 meetup\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. JSON.stringify(meetup); // Error: Converting circular structure to JSON // \uc6d0\ud558\ub294 \uac12\ub9cc \ucd94\ucd9c // let json = JSON.stringify(value[, replacer, space]) let room = { number: 23 }; let meetup = { title: \"Conference\", participants: [{name: \"John\"}, {name: \"Alice\"}], place: room // meetup references room }; room.occupiedBy = meetup; // room references meetup alert( JSON.stringify(meetup, ['title', 'participants', 'place', 'name', 'number']) ); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}} // replacer \uc0ac\uc6a9 alert( JSON.stringify(meetup, function replacer(key, value) { return (key == 'occupiedBy') ? undefined : value; })); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}} // reviver \uc0ac\uc6a9 let str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}'; let meetup = JSON.parse(str); alert( meetup.date.getDate() ); // \uc5d0\ub7ec! meetup = JSON.parse(str, function(key, value) { if (key == 'date') return new Date(value); return value; }); alert( meetup.date.getDate() ); // 30","title":"JSON (JavaScript Object Notation) Serialization"},{"location":"javascript/#tojson-for-customized-serialization","text":"let room = { number: 23, toJSON() { return this.number; } }; let meetup = { title: \"Conference\", room }; alert( JSON.stringify(room) ); // 23 alert( JSON.stringify(meetup) ); // {\"title\":\"Conference\",\"room\":23}","title":"toJSON() for customized serialization"},{"location":"javascript/#typeof","text":"typeof X \uc5f0\uc0b0\uc790\ub294 \uc778\uc218\uc758 \uc790\ub8cc\ud615\uc744 \ubb38\uc790\uc5f4\ub85c \ubc18\ud658 \uc790\ub8cc\ud615\uc5d0 \ub530\ub77c \ucc98\ub9ac \ubc29\uc2dd\uc744 \ub2e4\ub974\uac8c \ud560 \uacbd\uc6b0 \uc0ac\uc6a9 \ubcc0\uc218\uc758 \uc790\ub8cc\ud615 \ud655\uc778\uc5d0 \uc0ac\uc6a9 \uc5f0\uc0b0\uc790\ud615 \uc0ac\uc6a9: typeof x \ud568\uc218\ud615 \uc0ac\uc6a9: typeof(x) typeof undefined // \"undefined\" typeof 0 // \"number\" typeof 10n // \"bigint\" typeof true // \"boolean\" typeof \"foo\" // \"string\" typeof Symbol(\"id\") // \"symbol\" typeof Math // \"object\" (1) typeof null // \"object\" (2) typeof alert // \"function\" (3)","title":"typeof"},{"location":"javascript/#browser-functions","text":"alart : \uba54\uc2dc\uc9c0\uac00 \uc788\ub294 \uc791\uc740 \ucc3d, \ubaa8\ub2ec \ucc3d(modal window)\uc744 \ub744\uc6c0 prompt : \uba54\uc2dc\uc9c0\uc640 \uc785\ub825 \ud544\ub4dc(input field), \ud655\uc778(OK) \ubc0f \ucde8\uc18c(Cancel) \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0 confirm : \uc9c8\ubb38\uacfc \ud655\uc778 \ubc0f \ucde8\uc18c \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0 let age = prompt('\ub098\uc774\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.', 100); alert(`\ub2f9\uc2e0\uc758 \ub098\uc774\ub294 ${age}\uc0b4 \uc785\ub2c8\ub2e4.`); let isBoss = confirm(\"\ub2f9\uc2e0\uc774 \uc8fc\uc778\uc778\uac00\uc694?\"); alert( isBoss );","title":"Browser functions"},{"location":"javascript/#type-conversion","text":"// \ubb38\uc790\uc5f4 \ubcc0\ud658 let value = true; // boolean\ud615 value = String(value); // \ubcc0\uc218 value\uc5d4 \ubb38\uc790\uc5f4 \"true\"\uac00 \uc800\uc7a5 alert(typeof value); // string // \uc22b\uc790\ub85c \ubcc0\ud658 let str = \"123\"; let num = Number(str); // \ubb38\uc790\uc5f4 \"123\"\uc774 \uc22b\uc790 123\uc73c\ub85c \uba85\uc2dc\uc801 \ubcc0\ud658 alert(typeof num); // number alert( \"6\" / \"2\" ); // 3, \ubb38\uc790\uc5f4\uc774 \uc22b\uc790\ud615\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\ub41c \ud6c4 \uc5f0\uc0b0\uc774 \uc218\ud589 let age = Number(\"\uc784\uc758\uc758 \ubb38\uc790\uc5f4 123\"); alert(age); // NaN, \ud615 \ubcc0\ud658 \uc2e4\ud328 alert( Number(\" 123 \") ); // 123 alert( Number(\"123z\") ); // NaN (\"z\"\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\ub294 \ub370 \uc2e4\ud328\ud568) alert( Number(true) ); // 1 alert( Number(false) ); // 0 // boolean\uc73c\ub85c \ubcc0\ud658 alert( Boolean(1) ); // \uc22b\uc790 1(true) alert( Boolean(0) ); // \uc22b\uc790 0(false) alert( Boolean(\"hello\") ); // \ubb38\uc790\uc5f4(true) alert( Boolean(\"\") ); // \ube48 \ubb38\uc790\uc5f4(false) alert( Boolean(NaN) ); // false alert( Boolean(undefined) ); // false alert( Boolean(null) ); // false","title":"\ud615\ubcc0\ud658 (type conversion)"},{"location":"javascript/#_14","text":"+ : \ub367\uc148 \uc5f0\uc0b0\uc790 - : \ube84\uc148 \uc5f0\uc0b0\uc790 * : \uacf1\uc148 \uc5f0\uc0b0\uc790 / : \ub098\ub217\uc148 \uc5f0\uc0b0\uc790 % : \ub098\uba38\uc9c0 \uc5f0\uc0b0\uc790 ** : \uac70\ub4ed\uc81c\uacf1 \uc5f0\uc0b0\uc790 & : AND \ube44\ud2b8 \uc5f0\uc0b0\uc790 | OR \ube44\ud2b8 \uc5f0\uc0b0\uc790 ^ XOR \ube44\ud2b8 \uc5f0\uc0b0\uc790 ~ NOT \ube44\ud2b8 \uc5f0\uc0b0\uc790 << : LEFT SHIFT >> : RIGHT SHIFT >>> : ZERO-FILL RIGHT SHIFT || : OR \ub17c\ub9ac\uc5f0\uc0b0\uc790 && : AND \ub17c\ub9ac\uc5f0\uc0b0\uc790 ! : NOT \ub17c\ub9ac\uc5f0\uc0b0\uc790 // \uc22b\uc790 alert( 5 % 2 ); // 5\ub97c 2\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 1\uc744 \ucd9c\ub825 alert( 8 % 3 ); // 8\uc744 3\uc73c\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 2\ub97c \ucd9c\ub825 alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2) alert( 4 ** (1/2) ); // 2 (1/2 \uac70\ub4ed\uc81c\uacf1\uc740 \uc81c\uacf1\uadfc) alert( 8 ** (1/3) ); // 2 (1/3 \uac70\ub4ed\uc81c\uacf1\uc740 \uc138\uc81c\uacf1\uadfc) // \ubb38\uc790\uc5f4 let s = \"my\" + \"string\"; alert(s); // mystring alert( 2 + '1' ); // \"21\" alert(2 + 2 + '1' ); // '221'\uc774 \uc544\ub2c8\ub77c '41'\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert( 6 - '2' ); // 4, '2'\ub97c \uc22b\uc790\ub85c \ubc14\uafbc \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4. alert( '6' / '2' ); // 3, \ub450 \ud53c\uc5f0\uc0b0\uc790\uac00 \uc22b\uc790\ub85c \ubc14\ub010 \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4. // \uc22b\uc790\ud615\uc774 \uc544\ub2cc \ud53c\uc5f0\uc0b0\uc790\ub294 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud654\ud569\ub2c8\ub2e4. alert( +true ); // 1 alert( +\"\" ); // 0 let apples = \"2\"; let oranges = \"3\"; alert( apples + oranges ); // 23, \ubb38\uc790\uc5f4 + \uc5f0\uc0b0 alert( +apples + +oranges ); // 5 \uc22b\uc790\ubcc0\ud658 -> \uc22b\uc790 + \uc5f0\uc0b0","title":"\uc5f0\uc0b0\uc790"},{"location":"javascript/#operator-precedence-table","text":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence","title":"\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table"},{"location":"javascript/#_15","text":"let a = 1; let b = 2; let c = 3 - (a = b + 1); // a = 3, c = 0 alert( a ); // 3 alert( c ); // 0 a = b = c = 2 + 2; alert( a ); // 4 alert( b ); // 4 alert( c ); // 4 let n = 2; n += 5; // n = n + 5 n *= 2; // n = n * 2 alert( n ); // 14 n *= 3 + 5; // n *= 8 let counter = 2; counter++; // counter = counter + 1 counter--; // counter = counter - 1 counter = 1; let a = ++counter; alert(a); // 2 counter = 1; a = counter++; alert(a); // 1","title":"\ud560\ub2f9 \uc5f0\uc0b0\uc790"},{"location":"javascript/#_16","text":"// \ud55c \uc904\uc5d0\uc11c \uc138 \uac1c\uc758 \uc5f0\uc0b0\uc774 \uc218\ud589\ub428 for (a = 1, b = 3, c = a * b; a < 10; a++) { ... }","title":"\uc27c\ud45c \uc5f0\uc0b0\uc790"},{"location":"javascript/#_17","text":"a > b a < b a >= b a <= b a == b a != b","title":"\ube44\uad50 \uc5f0\uc0b0\uc790"},{"location":"javascript/#error","text":"const err = new Error('\ud83d\udca3\ufe0f Something went wrong'); console.log(err instanceof Error); // \ud83d\udc49\ufe0f true","title":"error \ube44\uad50"},{"location":"javascript/#_18","text":"\uc790\ub9bf\uc218 \ubcc4\ub85c \uc0ac\uc804\uc21c\uc73c\ub85c \ube44\uad50; ascii\ub4f1\uc758 \ubb38\uc790 \uc21c\uc704 alert( 'Z' > 'A' ); // true alert( 'Glow' > 'Glee' ); // true alert( 'Bee' > 'Be' ); // true","title":"\ubb38\uc790\uc5f4 \ube44\uad50"},{"location":"javascript/#_19","text":"\uc4f0\uc9c0 \uc54a\ub294\uac8c \uc88b\uc744 \ub4ef ..., \uba85\uc2dc\uc801\uc73c\ub85c \ubcc0\ud615\ud574 \uc0ac\uc6a9\ud558\uc2dc\ub77c.","title":"\ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50"},{"location":"javascript/#strict-equality-operator","text":"\uc790\ub8cc\ud615\uc758 \ub3d9\ub4f1 \uc5ec\ubd80\uae4c\uc9c0 \uac80\uc0ac; \ud53c\uc5f0\uc0b0\uc790 a\uc640 b\uc758 \ud615\uc774 \ub2e4\ub97c \uacbd\uc6b0 a === b\ub294 \uc989\uc2dc false\ub97c \ubc18\ud658\ud568","title":"\uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) ==="},{"location":"javascript/#null-undefined","text":"alert( null === undefined ); // false alert( null == undefined ); // true alert( undefined > 0 ); // false (1) alert( undefined < 0 ); // false (2) alert( undefined == 0 ); // false (3) alert( null > 0 ); // (1) false alert( null == 0 ); // (2) false alert( null >= 0 ); // (3) true","title":"null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30"},{"location":"javascript/#-short-circuit-evaluation","text":"bash \ub3d9\uc791\uacfc \ub3d9\uc77c true || alert(\"not printed\"); false || alert(\"printed\");","title":"\ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation"},{"location":"javascript/#nullish-nullish-coalescing-operator","text":"a ?? b \uc758 \ud3c9\uac00 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. a\uac00 null \ub3c4 \uc544\ub2c8\uace0 undefined \ub3c4 \uc544\ub2c8\uba74 a \uadf8 \uc678\uc758 \uacbd\uc6b0\ub294 b x = a ?? b // nullish \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5b4\uc4f8 \uc218 \uc788\uc74c. x = (a !== null && a !== undefined) ? a : b; // \uc0ac\uc6a9\uc608 let firstName = null; let lastName = null; let nickName = \"\ubc14\uc774\uc62c\ub81b\"; alert(firstName ?? lastName ?? nickName ?? \"\uc775\uba85\uc758 \uc0ac\uc6a9\uc790\"); // \ubc14\uc774\uc62c\ub81b // '??'\uc640 '||'\uc758 \ucc28\uc774 let height = 0; alert(height || 100); // 100 alert(height ?? 100); // 0","title":"nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) ??"},{"location":"javascript/#_20","text":"if , else if and else ? let year = prompt('ECMAScript-2015 \uba85\uc138\ub294 \uba87 \ub144\ub3c4\uc5d0 \ucd9c\ud310\ub418\uc5c8\uc744\uae4c\uc694?', ''); if (year == 2015) { alert( \"\uc815\ub2f5\uc785\ub2c8\ub2e4!\" ); alert( \"\uc544\uc8fc \ub611\ub611\ud558\uc2dc\ub124\uc694!\" ); } else if (year > 2015) { alert( '\uc22b\uc790\ub97c \uc880 \ub354 \ub0b4\ub824\ubcf4\uc138\uc694.' ); } else { alert( '\uc624\ub2f5\uc785\ub2c8\ub2e4!' ); } // let result = condition ? value1 : value2; let accessAllowed = (age > 18) ? true : false; let message = (age < 3) ? '\uc544\uae30\uc57c \uc548\ub155?' : (age < 18) ? '\uc548\ub155!' : (age < 100) ? '\ud658\uc601\ud569\ub2c8\ub2e4!' : '\ub098\uc774\uac00 \uc544\uc8fc \ub9ce\uc73c\uc2dc\uac70\ub098, \ub098\uc774\uac00 \uc544\ub2cc \uac12\uc744 \uc785\ub825 \ud558\uc168\uad70\uc694!';","title":"\uc870\uac74\ubb38"},{"location":"javascript/#_21","text":"// while let i = 0; while (i < 3) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert( i ); i++; } // do while let i = 0; do { alert( i ); i++; } while (i < 3); // for for (let i = 0; i < 3; i++) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4. alert(i); } // break let sum = 0; while (true) { let value = +prompt(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694.\", ''); if (!value) break; // (*) sum += value; } alert( '\ud569\uacc4: ' + sum ); // object property \uc21c\ud68c for (key in object) { // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. } // for..of // array \uc21c\ud68c for (let fruit of fruits) { }","title":"\ubc18\ubcf5\ubb38"},{"location":"javascript/#switchcase","text":"switch/case\ubb38\uc758 \uc778\uc218\uc5d4 \uc5b4\ub5a4 \ud45c\ud604\uc2dd\uc774\ub4e0 \uc62c \uc218 \uc788\uc74c let a = 2 + 2; let b = 0; switch (a) { case b + 1: break; case 3: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.' ); break; case 4: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\uacfc \uc77c\uce58\ud569\ub2c8\ub2e4.' ); break; case 5: case 6: alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4.' ); break; default: alert( \"\uc5b4\ub5a4 \uac12\uc778\uc9c0 \ud30c\uc545\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\" ); }","title":"switch/case\ubb38"},{"location":"javascript/#function","text":"local variable: \ud568\uc218 \ub0b4 \uc120\uc5b8 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc73c\uba74 \uadf8 \uac12\uc740 undefined \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 \ud568\uc218\ub97c \ud2b9\ubcc4\ud55c \uc885\ub958\uc758 variable\ub85c \ucde8\uae09 nested function \uac00\ub2a5 // Function declaration let userName = 'John'; // global variable function showMessage() { let message = 'Hello, ' + userName; // local variable alert(message); } showMessage(); // Hello, John // Function arguments function showMessage(from, text) { // \uc778\uc218: from, text alert(from + ': ' + text); } showMessage(from, \"Hello\"); // *Ann*: Hello showMessage(\"Ann\"); // Ann: undefined // Function arguments with default value function showMessage(from, text= \"no text given\") { // \uc778\uc218: from, text alert(from + ': ' + text); } showMessage(\"Ann\"); // Ann: undefined // Function return; return\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined function sum(a, b) { return a + b; } // Function return \uc8fc\uc758 \uc0ac\ud56d function sum(a, b) { return a + b; // return\ud6c4 ; \uc790\ub3d9 \uc0bd\uc785\ub418\ubbc0\ub85c return\uc2dc \uac1c\ud589 \ud558\uc9c0 \uc54a\uae30 }","title":"Function"},{"location":"javascript/#function-expression","text":"let sayHi = function() { alert( \"Hello\" ); }; // \ud568\uc218 \ud45c\ud604\uc2dd\uc5d0\uc11c \uc138\ubbf8\ucf5c\ub860 \ud544\uc218 alert( sayHi ); // \ud568\uc218 \ucf54\ub4dc \ucd9c\ub825 alert( sayHi() ); // \ud568\uc218 \uc2e4\ud589!!","title":"Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd)"},{"location":"javascript/#arrow-function","text":"\ud568\uc218 \ucd95\uc57d (python lambda) this\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc74c (\uc120\uc5b8\ub41c \uc0c1\uc704 object\uc758 this \uac00\uc838\ub2e4 \uc500) arguments \uc5c6\uc74c new\uc640 \ud568\uaed8 \ud638\ucd9c \ubd88\uac00\ub2a5 super\ub3c4 \uc5c6\uc74c \uc790\uccb4 '\ucee8\ud14d\uc2a4\ud2b8\u2019\uac00 \uc5c6\ub294 \uc9e7\uc740 \ucf54\ub4dc\uc6a9 let func = (arg1, arg2, ...argN) => expression // e.g. let sum = (a, b) => a + b; let double = n => n * 2; // let double = function(n) { return n * 2 } let sayHi = () => alert(\"\uc548\ub155\ud558\uc138\uc694!\"); let age = prompt(\"\ub098\uc774\ub97c \uc54c\ub824\uc8fc\uc138\uc694.\", 18); let welcome = (age < 18) ? () => alert('\uc548\ub155') : () => alert(\"\uc548\ub155\ud558\uc138\uc694!\"); welcome(); // example 1 let group = { title: \"1\ubaa8\ub460\", students: [\"\ubcf4\ub77c\", \"\ud638\uc9c4\", \"\uc9c0\ubbfc\"], showList() { this.students.forEach( student => alert(this.title + ': ' + student) ); } }; group.showList(); // example 2 function defer(f, ms) { return function() { setTimeout(() => f.apply(this, arguments), ms) }; } function sayHi(who) { alert('\uc548\ub155, ' + who); } let sayHiDeferred = defer(sayHi, 2000); sayHiDeferred(\"\ucca0\uc218\"); // 2\ucd08 \ud6c4 \"\uc548\ub155, \ucca0\uc218\"\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.","title":"Arrow function (\ud654\uc0b4\ud45c \ud568\uc218)"},{"location":"javascript/#debugger","text":"\ucf54\ub4dc\uc5d0 debugger \uc0bd\uc785\uc2dc breakpoint\uc640 \ub3d9\uc77c\ud55c \ub3d9\uc791 function hello(name) { let phrase = `Hello, ${name}!`; debugger; // <-- \uc5ec\uae30\uc11c \uc2e4\ud589\uc774 \uba48\ucda5\ub2c8\ub2e4. say(phrase); }","title":"debugger"},{"location":"javascript/#consolelog","text":"// \ucf58\uc194\ucc3d\uc744 \uc5f4\uc5b4 \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uc138\uc694. for (let i = 0; i < 5; i++) { console.log(\"\uc22b\uc790\", i); }","title":"console.log"},{"location":"javascript/#function-property","text":"name length : function parameter \uac2f\uc218 function property \ucd94\uac00 \uac00\ub2a5\ud568 function sayHi() { alert(\"Hi\"); } alert(sayHi.name); // sayHi function f(sayHi = function() {}) { alert(sayHi.name); // sayHi (\uc774\ub984\uc774 \uc788\ub124\uc694!) } f(); // property \ucd94\uac00 function sayHi() { alert(\"Hi\"); sayHi.counter++; } sayHi.counter = 0; // \ucd08\uae43\uac12 sayHi(); // Hi sayHi(); // Hi alert( `\ud638\ucd9c \ud69f\uc218: ${sayHi.counter}\ud68c` ); // \ud638\ucd9c \ud69f\uc218: 2\ud68c","title":"Function property"},{"location":"javascript/#variable-arguments","text":"... \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uc778\uc790\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ec function ask(question, ...handlers) { let isYes = confirm(question); for(let handler of handlers) { if (handler.length == 0) { if (isYes) handler(); } else { handler(isYes); } } }","title":"variable arguments"},{"location":"javascript/#input-argument-spreading","text":"... \uc73c\ub85c array argument\ub97c \ud480\uc5b4 \uc785\ub825\ud560 \uc218 \uc788\uc74c let arr1 = [1, -2, 3, 4]; let arr2 = [8, 3, -8, 1]; alert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25 \uc774\ub7ec\ud55c spreading \uae30\ubc95\uc740 array \uc120\uc5b8\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\uac00\ub2a5 let arr = [3, 5, 1]; let arr2 = [8, 9, 15]; let merged = [0, ...arr, 2, ...arr2]; alert(merged); // 0,3,5,1,2,8,9,15 (0, arr, 2, arr2 \uc21c\uc11c\ub85c \ud569\uccd0\uc9d1\ub2c8\ub2e4.)","title":"Input argument spreading"},{"location":"javascript/#closure-and-lexical-scoping","text":"https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures javascript \ucf54\ub4dc \ube14\ub7ed \ub0b4\uc5d0\uc11c \ubcc0\uc218\uc640 \ud568\uc218\uc758 \uc720\ud6a8\ubc94\uc704\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc744 \uac00\uc9d0 javascript\uc5d0\uc11c \ud568\uc218\ub294 \ucf54\ub4dc \ube14\ub85d\uc744 \uac00\uc9c0\uba70, \ub3d9\uc791\uc744 \uc218\ud589\ud558\ub294 \ud2b9\uc218\ud55c \ubcc0\uc218 \ud568\uc218, \ucf54\ub4dc\ube14\ub85d, \uac1d\uccb4, \uc2a4\ud06c\ub9bd\ud2b8\ub4e4\uc740 \uac01\uc790 Lexical Environment\ub77c\ub294 \ub0b4\ubd80 \uac1d\uccb4\ub97c \uac00\uc9d0 javascript\ub294 \uc120\uc5b8\ub41c \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc774 Lexical Env\uc5d0 property\ub85c \uc800\uc7a5 function init() { var name = \"Mozilla\"; // name\uc740 init\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c \uc9c0\uc5ed \ubcc0\uc218\uc774\ub2e4. function displayName() { // displayName() \uc740 \ub0b4\ubd80 \ud568\uc218\uc774\uba70, \ud074\ub85c\uc800\ub2e4. alert(name); // \ubd80\ubaa8 \ud568\uc218\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. } displayName(); } init(); \uac01 Lexical Env\ub294 \uc678\ubd80 (\uc0c1\uc704) Lexical Env\uc5d0 \ub300\ud55c reference\ub97c \uac00\uc9d0 (e.g. \uc704 displayName() \uc758 \uc678\ubd80 Lexical Env\ub294 init() ) \uc704\uc5d0\uc11c displayName()\uacfc \uac19\uc774 \ub9ac\ud134\ub418\ub294 \ud568\uc218\ub97c closure \ub77c \ud558\uba70, closure \ub294 \ubaa8\ud568\uc218 init()\uc758 Lexical Env\ub97c \ucc38\uc870\ud560 \uc218 \uc788\uc74c. closure \ub97c \uc0ac\uc6a9\ud574 javascript\uc5d0\uc11c\ub294 private method\ub97c \uad6c\ud604\ud568 \uc544\ub798 \ucf54\ub4dc\ub294 \ud504\ub77c\uc774\ube57 \ud568\uc218\uc640 \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\ub294 \ud37c\ube14\ub9ad \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uc774\ub807\uac8c \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ubaa8\ub4c8 \ud328\ud134 \uc774\ub77c \ud55c\ub2e4. var counter = (function() { var privateCounter = 0; function changeBy(val) { privateCounter += val; } return { increment: function() { changeBy(1); }, decrement: function() { changeBy(-1); }, value: function() { return privateCounter; } }; })(); console.log(counter.value()); // logs 0 counter.increment(); counter.increment(); console.log(counter.value()); // logs 2 counter.decrement(); console.log(counter.value()); // logs 1","title":"Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815"},{"location":"javascript/#new-function","text":"new \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \uc0dd\uc131 \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub294 string\uc73c\ub85c \ud45c\ud604\ub41c \uc790\uc2e0\uc758 \ucf54\ub4dc \uc2e4\ud589\ud558\ub294 expr \uc0ac\uc6a9\uc608) \uc678\ubd80\uc5d0\uc11c \uc218\uc2e0\ud55c string function\uc758 \uc2e4\ud589 let sum = new Function('a', 'b', 'return a + b'); alert( sum(1, 2) ); // 3 let sayHi = new Function('alert(\"Hello\")'); sayHi(); // Hello","title":"new Function"},{"location":"javascript/#time-scheduling-settimeout-setinterval","text":"// \uc124\uc815 let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...) let timerId = setInterval(func|code, [interval], [arg1], [arg2], ...) // \ucde8\uc18c clearTimeout(timerId); setTimeout \uc758 delay\uac00 0\uc77c \uacbd\uc6b0, \ucd5c\ub300\ud55c \ube68\ub9ac ..","title":"Time scheduling - setTimeout, setInterval"},{"location":"javascript/#testing-mocha","text":"BDD (Behavior Driven Development)\ub294 \ud14c\uc2a4\ud2b8(test), \ubb38\uc11c(documentation), \uc608\uc2dc(example)\ub97c \ud55c\ub370 \ubaa8\uc544\ub193\uc740 \uac1c\ub150 function pow(x, n) { if (n < 0) return NaN; if (Math.round(n) != n) return NaN; let p = 1 for (let i = 0; i < n; i++) { p = x * p ; } return p; } // ... describe(\"pow\", function() { it(\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uc758 n \uc81c\uacf1\", function() { assert.equal(pow(2, 3), 8); }); }); // nested testing describe(\"pow.2\", function () { describe(\"case 1\", function () { before(() => console.log(\"testing starts\")); after(() => console.log(\"testing ends\")); beforeEach(() => console.log(\"each starts\")); afterEach(() => console.log(\"each ends\")); it(\"10^10\", function () { assert.equal(pow(10, 10), 10000000000); }); it(\"10^5\", function () { assert.equal(pow(10, 6), 1000000); }); }) })","title":"Testing - Mocha"},{"location":"javascript/#chai-assertion-logic","text":"assert.equal(value1, value2) \u2013 value1\uacfc value2\uc758 \ub3d9\ub4f1\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 == value2). assert.strictEqual(value1, value2) \u2013 value1\uacfc value2\uc758 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 === value2). assert.notEqual, assert.notStrictEqual \u2013 \ube44 \ub3d9\ub4f1\uc131, \ube44 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. assert.isTrue(value) \u2013 value\uac00 true\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === true). assert.isFalse(value) \u2013 value\uac00 false\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === false).","title":"chai (assertion logic)"},{"location":"javascript/#destructuring-assignment","text":"\uc6d0 \uc790\ub8cc\uc758 \uc694\uc18c\ub97c \ubd84\ud574, \ub2e4\ub978 \uad6c\uc870\ub85c \ubcc0\uacbd\ud558\uae30 \uc26c\uc6c0 let {prop : varName = default, ...rest} = object let [item1 = default, item2, ...rest] = array ... \ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30","title":"\uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment)"},{"location":"javascript/#_22","text":"// \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 1) let arr = [\"Bora\", \"Lee\"] let [firstName, surname] = arr; alert(firstName); // Bora alert(surname); // Lee // \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 2) let [firstName, surname] = \"Bora Lee\".split(' '); // \uc694\uc18c \uc0dd\ub7b5 let [firstName, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"]; alert( title ); // Consul // iterable\ud55c \uc790\ub8cc\uad6c\uc870\ub294 \ubaa8\ub450 \uac00\ub2a5 let [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"] let [one, two, three] = new Set([1, 2, 3]); let user = {}; [user.name, user.surname] = \"Bora Lee\".split(' '); alert(user.name); // Bora let user = { name: \"John\", age: 30 }; // \uac1d\uccb4\uc758 \ud0a4\uc640 \uac12 \uc21c\ud68c\ud558\uae30 for (let [key, value] of Object.entries(user)) { alert(`${key}:${value}`); // name:John, age:30\uc774 \ucc28\ub840\ub300\ub85c \ucd9c\ub825 } // map\uc5d0\uc11c\uc758 destructuring assignment let user = new Map(); user.set(\"name\", \"John\"); user.set(\"age\", \"30\"); for (let [key, value] of user) { alert(`${key}:${value}`); // name:John, then age:30 } // destructuring assignment \uc0ac\uc6a9\ud55c \uad50\ud658 let guest = \"Jane\"; let admin = \"Pete\"; // \ubcc0\uc218 guest\uc5d4 Pete, \ubcc0\uc218 admin\uc5d4 Jane\uc774 \uc800\uc7a5\ub418\ub3c4\ub85d \uac12\uc744 \uad50\ud658\ud568 [guest, admin] = [admin, guest]; alert(`${guest} ${admin}`); // Pete Jane(\uac12 \uad50\ud658\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc774\ub904\uc84c\uc2b5\ub2c8\ub2e4!) // '...'\ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30, rest\ub294 \ubc30\uc5f4 let [name1, name2, ...rest] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"]; alert(name1); // Julius alert(name2); // Caesar alert(rest[0]); // Consul alert(rest[1]); // of the Roman Republic alert(rest.length); // 2 // \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined let [firstName, surname] = []; alert(firstName); // undefined alert(surname); // undefined // default \uac12 \uc124\uc815 let [name = \"Guest\", surname = \"Anonymous\"] = [\"Julius\"]; alert(name); // Julius (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12) alert(surname); // Anonymous (\uae30\ubcf8\uac12) // name\uc758 prompt\ub9cc \uc2e4\ud589\ub428 let [surname = prompt('\uc131\uc744 \uc785\ub825\ud558\uc138\uc694.'), name = prompt('\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694.')] = [\"\uae40\"]; alert(surname); // \uae40 (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12) alert(name); // prompt\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12","title":"\ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9"},{"location":"javascript/#_23","text":"// \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9 let options = { title: \"Menu\", width: 100, height: 200 }; let {title, width, height} = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 // let {...} \uc548\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uc5b4\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud568 let {height, width, title} = { title: \"Menu\", height: 200, width: 100 } let options = { title: \"Menu\", width: 100, height: 200 }; // { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } let {width: w, height: h, title} = options; // width -> w // height -> h // title -> title alert(title); // Menu alert(w); // 100 alert(h); // 200 // default \uc124\uc815 let options = { title: \"Menu\" }; let {width = 100, height = 200, title} = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 // { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } + default let options = { title: \"Menu\" }; let {width: w = 100, height: h = 200, title} = options; alert(title); // Menu alert(w); // 100 alert(h); // 200 // title\ub9cc \ubcc0\uc218\ub85c \ubf51\uc544\ub0b4\uae30 let { title } = options; // title = \uc774\ub984\uc774 title\uc778 \ud504\ub85c\ud37c\ud2f0 // rest = \ub098\uba38\uc9c0 \ud504\ub85c\ud37c\ud2f0\ub4e4 let {title, ...rest} = options; // title\uc5d4 \"Menu\", rest\uc5d4 {height: 200, width: 100}\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4. alert(rest.height); // 200 alert(rest.width); // 100 let title, width, height; {title, width, height} = {title: \"Menu\", width: 200, height: 100}; // SyntaxError: Unexpected token '=' \uc774\ub77c\ub294 \uc5d0\ub7ec\uac00 \uc544\ub7ab\uc904\uc5d0\uc11c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. ({title, width, height} = {title: \"Menu\", width: 200, height: 100}); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9"},{"location":"javascript/#nested-destructuring","text":"let options = { size: { width: 100, height: 200 }, items: [\"Cake\", \"Donut\"], extra: true }; // \ucf54\ub4dc\ub97c \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0 \uc791\uc131\ud574 \uc758\ub3c4\ud558\ub294 \ubc14\ub97c \uba85\ud655\ud788 \ub4dc\ub7ec\ub0c4 let { size: { // size\ub294 \uc5ec\uae30, width, height }, items: [item1, item2], // items\ub294 \uc5ec\uae30\uc5d0 \ud560\ub2f9\ud568 title = \"Menu\" // \ubd84\ud574\ud558\ub824\ub294 \uac1d\uccb4\uc5d0 title \ud504\ub85c\ud37c\ud2f0\uac00 \uc5c6\uc73c\ubbc0\ub85c \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud568 } = options; alert(title); // Menu alert(width); // 100 alert(height); // 200 alert(item1); // Cake alert(item2); // Donut","title":"\uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring)"},{"location":"javascript/#function-argument-with-destructuring-assignment","text":"let options = { title: \"My menu\", items: [\"Item1\", \"Item2\"] }; function showMenu({ title = \"Untitled\", width: w = 100, // width\ub294 w\uc5d0, height: h = 200, // height\ub294 h\uc5d0, items: [item1, item2] // items\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub294 item1\uc5d0, \ub450 \ubc88\uc9f8 \uc694\uc18c\ub294 item2\uc5d0 \ud560\ub2f9\ud568 }) { alert( `${title} ${w} ${h}` ); // My Menu 100 200 alert( item1 ); // Item1 alert( item2 ); // Item2 } showMenu(options); showMenu({}); // \ubaa8\ub4e0 \uc778\uc218\uc5d0 \uae30\ubcf8\uac12\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4. showMenu(); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. function showMenu({ title = \"Menu\", width = 100, height = 200 } = {}) { alert( `${title} ${width} ${height}` ); } showMenu(); // Menu 100 200 // \uc5d0\ub7ec \uc548\ub0a8","title":"function argument with destructuring assignment"},{"location":"javascript/#promise","text":"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Producing code\uc640 Consuming code \uc0ac\uc774\uc758 \ube44\ub3d9\uae30\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uc7a5\uce58 \ud504\ub77c\ubbf8\uc2a4\uac00 \ub300\uae30 \uc0c1\ud0dc\uc77c \ub54c, .then/catch/finally \ud578\ub4e4\ub7ec\ub294 \ud504\ub77c\ubbf8\uc2a4 \uc644\ub8cc\ub97c \ub300\uae30 \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ubbf8 \ucc98\ub9ac\uc0c1\ud0dc\ub77c\uba74 \ud578\ub4e4\ub7ec\uac00 \uc989\uac01 \uc2e4\ud589 \ub0b4\ubd80\uc801\uc73c\ub85c state , result \uc815\ubcf4 \uc720\uc9c0 executor \ud568\uc218\uc5d0\uc11c resolve(Object) \ud638\ucd9c\uc2dc state => fulfiled executor \ud568\uc218\uc5d0\uc11c reject(Error) \ud638\ucd9c\uc2dc state => rejected \ud55c\ubc88 resolve \ub610\ub294 reject \ud638\ucd9c\ub418\uba74, \uc7ac\uc2e4\ud589 X let promise = new Promise(function(resolve, reject) { // \ud504\ub77c\ubbf8\uc2a4\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uba74 executor \ud568\uc218\ub294 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589 // 1\ucd08 \ub4a4\uc5d0 \uc77c\uc774 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\ub2e4\ub294 \uc2e0\ud638\uac00 \uc804\ub2ec\ub418\uba74\uc11c result\ub294 'done' setTimeout(() => resolve(\"done\"), 1000); // or setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); });","title":"Promise"},{"location":"javascript/#then","text":"Promise\uac00 \uc644\ub8cc\ub418\uae38 \ub300\uae30\ud558\uace0 resolve, reject\ub97c \uc218\ud589 let promise = new Promise(function(resolve, reject) { setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); }); // reject \ud568\uc218\ub294 .then\uc758 \ub450 \ubc88\uc9f8 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. promise.then( result => alert(result), // \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c error => alert(error) // 1\ucd08 \ud6c4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\"\ub97c \ucd9c\ub825 );","title":".then"},{"location":"javascript/#catch","text":".catch(f) \uacfc .then(null,f) \ub3d9\uc77c\ud55c \ub3d9\uc791\uc744 \uc218\ud589\ud558\uba70, \uc5d0\ub7ec\ub97c \ucc98\ub9ac let promise = new Promise((resolve, reject) => { setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000); }); // .catch(f)\ub294 promise.then(null, f)\uacfc \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4 promise.catch(alert); // 1\ucd08 \ub4a4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\" \ucd9c\ub825","title":".catch"},{"location":"javascript/#finally","text":"\uc5d0\ub7ec \uc720\ubb34\uc640 \uad00\uacc4\uc5c6\uc774 \uc2e4\ud589\ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589 new Promise((resolve, reject) => { setTimeout(() => resolve(\"\uacb0\uacfc\"), 2000) }) .finally(() => alert(\"\ud504\ub77c\ubbf8\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")) .then(result => alert(result)); // <-- .then\uc5d0\uc11c result\ub97c \ub2e4\ub8f0 \uc218 \uc788\uc74c","title":".finally"},{"location":"javascript/#promise-chaining","text":"Promise chaining\uc774\ub780 promise \ub300\uae30\ud568\uc218\ub4e4\uc758 \uc5f0\uc1c4 \uc2e4\ud589\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ud578\ub4e4\ub7ec\ub97c \ub4f1\ub85d\ud588\uc744 \uacbd\uc6b0\uc5d0\ub9cc Promise \ub300\uae30\ud568\uc218\ub4e4\uc744 \uc5f0\uc18d\uc801 \uc2e4\ud589\ub428 new Promise(function(resolve, reject) { setTimeout(() => resolve(1), 1000); // (*) }).then(function(result) { // (**) alert(result); // 1 return result * 2; }).then(function(result) { // (***) alert(result); // 2 return result * 2; }).then(function(result) { alert(result); // 4 return result * 2; }); Promise chaining\uc5d0\uc11c \uc2e0\uaddc promise\ub97c \ubc18\ud658\ud558\uc5ec chaining\ud560 \uc218 \uc788\uc74c. new Promise(function(resolve, reject) { setTimeout(() => resolve(1), 1000); }).then(function(result) { alert(result); // 1 return new Promise((resolve, reject) => { // (*) setTimeout(() => resolve(result * 2), 1000); }); }).then(function(result) { // (**) alert(result); // 2 return new Promise((resolve, reject) => { setTimeout(() => resolve(result * 2), 1000); }); }).then(function(result) { alert(result); // 4 });","title":"Promise chaining"},{"location":"javascript/#thenable","text":".then \uc774\ub77c\ub294 \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\ub294 \ubaa8\ub450 thenable\uac1d\uccb4\ub77c\uace0 \ubd80\ub974\uba70, promise\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud568. class Thenable { constructor(num) { this.num = num; } then(resolve, reject) { alert(resolve); // function() { \ub124\uc774\ud2f0\ube0c \ucf54\ub4dc } // 1\ucd08 \ud6c4 this.num*2\uc640 \ud568\uaed8 \uc774\ud589\ub428 setTimeout(() => resolve(this.num * 2), 1000); // (**) } } new Promise(resolve => resolve(1)) .then(result => { return new Thenable(result); // (*) }) .then(alert); // 1000\ubc00\ub9ac \ucd08 \ud6c4 2\ub97c \ubcf4\uc5ec\uc90c","title":"thenable"},{"location":"javascript/#fetch","text":"\ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucd94\uac00 \uc815\ubcf4\ub97c \ubc1b\uc544\uc624\ub294 \ub3d9\uc791\uc744 \uc218\ud589\ud568; javascript \ub0b4\uc5d0\uc11c promise\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub3d9\uc791\ud568 AJAX(Asynchronous JavaScript And XML) https://ko.javascript.info/fetch let promise = fetch(url, [options]); url \u2013 \uc811\uadfc\ud558\uace0\uc790 \ud558\ub294 URL options \u2013 \uc120\ud0dd \ub9e4\uac1c\ubcc0\uc218, method\ub098 header \ub4f1\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc74c let response = await fetch(url); if (response.ok) { // HTTP \uc0c1\ud0dc \ucf54\ub4dc\uac00 200~299\uc77c \uacbd\uc6b0 // \uc751\ub2f5 \ubaac\ubb38\uc744 \ubc1b\uc2b5\ub2c8\ub2e4(\uad00\ub828 \uba54\uc11c\ub4dc\ub294 \uc544\ub798\uc5d0\uc11c \uc124\uba85). let json = await response.json(); } else { alert(\"HTTP-Error: \" + response.status); }","title":"fetch"},{"location":"javascript/#throw-an-error-in-promise","text":"// case 1) Throw an error new Promise((resolve, reject) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 2) Throw an error new Promise((resolve, reject) => { reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")); }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 3) Throw an error new Promise((resolve, reject) => { resolve(\"ok\"); }).then((result) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); // \ud504\ub77c\ubbf8\uc2a4\uac00 \uac70\ubd80\ub428 }).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd! // case 4) // \uc2e4\ud589 \uc21c\uc11c: catch -> then new Promise((resolve, reject) => { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); }).catch(function(error) { alert(\"\uc5d0\ub7ec\uac00 \uc798 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\uc774 \uc774\uc5b4\uc9d1\ub2c8\ub2e4.\"); }).then(() => alert(\"\ub2e4\uc74c \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub429\ub2c8\ub2e4.\"));","title":"Throw an error in promise"},{"location":"javascript/#mutilple-promises","text":"\ub2e4\uc218\uc758 promise\uc5d0 \ub300\ud55c \ub2e8\uc77c handler \ucc98\ub9ac Promise.all([ new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1 new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2 new Promise(resolve => setTimeout(() => resolve(3), 1000)) // 3 ]).then(alert); // \ud504\ub77c\ubbf8\uc2a4 \uc804\uccb4\uac00 \ucc98\ub9ac\ub418\uba74 1, 2, 3\uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. \uac01 \ud504\ub77c\ubbf8\uc2a4\ub294 \ubc30\uc5f4\uc744 \uad6c\uc131\ud558\ub294 \uc694\uc18c\uac00 \ub429\ub2c8\ub2e4. let urls = [ 'https://api.github.com/users/iliakan', 'https://api.github.com/users/remy', 'https://api.github.com/users/jeresig' ]; // fetch\ub97c \uc0ac\uc6a9\ud574 url\uc744 \ud504\ub77c\ubbf8\uc2a4\ub85c \ub9e4\ud551\ud569\ub2c8\ub2e4. let requests = urls.map(url => fetch(url)); // Promise.all\uc740 \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. Promise.all(requests) .then(responses => responses.forEach( response => alert(`${response.url}: ${response.status}`) )); Promise.all : \uc5b4\ub290 \ud558\ub098\uc758 promise\uac00 \uac70\uc808\ub418\uba74, reject handler \uc218\ud589 Promise.allSettled : \ubaa8\ub4e0 promise \ucc98\ub9ac \ub300\uae30, \uac01 promise \uc0c1\ud0dc \ubc18\ud658 \uc751\ub2f5\uc774 \uc131\uacf5\ud560 \uacbd\uc6b0 \u2013 {status:\"fulfilled\", value:result} \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \u2013 {status:\"rejected\", reason:error} Promise.race : \uac00\uc7a5 \uba3c\uc800 \ucc98\ub9ac\ub41c promise \uacb0\uacfc \ubc18\ud658 Promise.resolve/reject : \ub9ce\uc774 \uc548\uc4f0\uc784","title":"Mutilple promises"},{"location":"javascript/#promisify","text":"function promisify(f) { return function (...args) { // \ub798\ud37c \ud568\uc218\ub97c \ubc18\ud658\ud568 return new Promise((resolve, reject) => { function callback(err, result) { // f\uc5d0 \uc0ac\uc6a9\ud560 \ucee4\uc2a4\ud140 \ucf5c\ubc31 if (err) { reject(err); } else { resolve(result); } } args.push(callback); // \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ucee4\uc2a4\ud140 \ucf5c\ubc31\uc744 \ud568\uc218 f\uc758 \uc778\uc218 \ub05d\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4. f.call(this, ...args); // \uae30\uc874 \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. }); }; }; let loadScriptPromise = promisify(loadScript); loadScriptPromise(...).then(...);","title":"promisify"},{"location":"javascript/#microtask-queue","text":"javascript\uc758 \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c internal work queue\ub85c \uc644\ub8cc\ub41c promise\uc758 handler\ub97c \ucc98\ub9ac\ud568 FIFO, first-in-first-out \uc2e4\ud589\ub420 \uac83\uc774 \uc5c6\uc744 \ub300 task queue\uac00 \uc791\ub3d9\ub428","title":"Microtask queue"},{"location":"javascript/#async-and-await","text":"async \uac00 \ud568\uc218 \uc55e\uc5d0 \ubd99\uc73c\uba74, \ud568\uc218\ub294 resolved promise\ub97c \ubc18\ud658 async function f() { // return Promise.resolve(1);\uc640 \ub3d9\uc77c\ud55c \uacb0\uacfc return 1; } f().then(alert); // 1 await \uc740 async \ud568\uc218 \ub0b4\uc5d0\uc11c promise\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\ud55c\ub2e4. await \uc740 \uc77c\ubc18\ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ubd88\uac00 promise chaining \ub300\uccb4 \uc0ac\uc6a9 await \ub294 thenable \uac1d\uccb4\ub3c4 \uc218\uc2e0 class\uc5d0 await \uc120\uc5b8 \uac00\ub2a5 async function f() { let promise = new Promise((resolve, reject) => { setTimeout(() => resolve(\"\uc644\ub8cc!\"), 1000) }); let result = await promise; // \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bc (*) alert(result); // \"\uc644\ub8cc!\" } f(); (async () => { let response = await fetch('/article/promise-chaining/user.json'); let user = await response.json(); ... })(); // .then \ub300\uc2e0 await \uc0ac\uc6a9 async function showAvatar() { // JSON \uc77d\uae30 let response = await fetch('/article/promise-chaining/user.json'); let user = await response.json(); // github \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc77d\uae30 let githubResponse = await fetch(`https://api.github.com/users/${user.name}`); let githubUser = await githubResponse.json(); // \uc544\ubc14\ud0c0 \ubcf4\uc5ec\uc8fc\uae30 let img = document.createElement('img'); img.src = githubUser.avatar_url; img.className = \"promise-avatar-example\"; document.body.append(img); // 3\ucd08 \ub300\uae30 await new Promise((resolve, reject) => setTimeout(resolve, 3000)); img.remove(); return githubUser; } showAvatar();","title":"Async and Await"},{"location":"javascript/#async","text":"class Waiter { async wait() { return await Promise.resolve(1); } } new Waiter() .wait() .then(alert); // 1","title":"async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc"},{"location":"javascript/#async-await-error-handling","text":"// case 1 async function f() { await Promise.reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")); } // case 2 async function f() { throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); } // case 3 - try..catch async function f() { try { let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url'); let user = await response.json(); } catch(err) { // fetch\uc640 response.json\uc5d0\uc11c \ubc1c\ud589\ud55c \uc5d0\ub7ec \ubaa8\ub450\ub97c \uc5ec\uae30\uc11c \uc7a1\uc2b5\ub2c8\ub2e4. alert(err); } } f(); // case 4 async function f() { let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url'); } f().catch(alert); // TypeError: failed to fetch // (*) // case 5 - await Promise.all // \ud504\ub77c\ubbf8\uc2a4 \ucc98\ub9ac \uacb0\uacfc\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. let results = await Promise.all([ fetch(url1), fetch(url2), ... ]);","title":"async &amp; await error handling"},{"location":"javascript/#file-readwrite","text":"https://velog.io/@93jm/Node.js-File-System%EC%9D%98-%EC%82%AC%EC%9A%A9%EA%B3%BC-async-await-%EC%B2%98%EB%A6%AC","title":"File Read/Write"},{"location":"javascript/#decorator-wrapping-function","text":"function slow(x) { // CPU \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\uc774 \uc5ec\uae30\uc5d0 \uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`); return x; } function cachingDecorator(func) { let cache = new Map(); return function(x) { if (cache.has(x)) { // cache\uc5d0 \ud574\ub2f9 \ud0a4\uac00 \uc788\uc73c\uba74 return cache.get(x); // \ub300\uc751\ud558\ub294 \uac12\uc744 cache\uc5d0\uc11c \uc77d\uc5b4\uc635\ub2c8\ub2e4. } // let result = func(x); // \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d4 func\ub97c \ud638\ucd9c\ud558\uace0, let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. cache.set(x, result); // \uadf8 \uacb0\uacfc\ub97c \uce90\uc2f1(\uc800\uc7a5)\ud569\ub2c8\ub2e4. return result; }; } slow = cachingDecorator(slow); alert( slow(1) ); // slow(1)\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4. alert( \"\ub2e4\uc2dc \ud638\ucd9c: \" + slow(1) ); // \ub3d9\uc77c\ud55c \uacb0\uacfc \uc704\uc5d0\uc11c \uad6c\ud604\ud55c \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\ub294 this \uac00 undefined \uc774\uae30 \ub54c\ubb38\uc5d0 \uac1d\uccb4 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9\ud558\uae30\uc5d4 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4.","title":"Decorator (wrapping function)"},{"location":"javascript/#call","text":"function sayHi() { alert(this.name); } let user = { name: \"John\" }; let admin = { name: \"Admin\" }; // call\uc744 \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uac1d\uccb4\uac00 'this'\uac00 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4. sayHi.call( user ); // this = John sayHi.call( admin ); // this = Admin decorator \ub2e4\uc2dc \uc791\uc131 let worker = { someMethod() { return 1; }, slow(x) { alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`); return x * this.someMethod(); // (*) } }; function cachingDecorator(func) { let cache = new Map(); return function(x) { if (cache.has(x)) { return cache.get(x); } let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. cache.set(x, result); return result; }; } worker.slow = cachingDecorator(worker.slow); // \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9 alert( worker.slow(2) ); // \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.","title":"\uac1d\uccb4\uc758 call\ud568\uc218 \uc0ac\uc6a9\ud558\uae30"},{"location":"javascript/#_24","text":"func.call(context, ...args) // \uc804\uac1c \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud574 \uc778\uc218\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uacfc func.apply(context, args) // call\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4. func.bind(context) // context (\uac1d\uccb4)\ub97c func \ud568\uc218\uc640 \uc5f0\uacb0\ud568. func\uc758 this\uac00 context\uac00 \ub428","title":"\ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218"},{"location":"javascript/#object-property","text":"object\uc758 property\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc218\uc815\uac00\ub2a5\ud568 value writable enumerable configurable let user = {}; Object.defineProperty(user, \"name\", { value: \"John\" }); let descriptor = Object.getOwnPropertyDescriptor(user, 'name'); alert( JSON.stringify(descriptor, null, 2 ) ); /* { \"value\": \"John\", \"writable\": false, \"enumerable\": false, \"configurable\": false } */ // property write \uc18d\uc131 \ub044\uae30 Object.defineProperty(user, \"name\", { writable: false }); user.name = \"Pete\"; // Error: Cannot assign to read only property 'name'","title":"object property \uc18d\uc131 \uc124\uc815"},{"location":"javascript/#getter-setter-properties","text":"let obj = { get propName() { // getter, obj.propName\uc744 \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc }, set propName(value) { // setter, obj.propName = value\ub97c \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc } // get, set \ub458\ub2e4 \uc815\uc758\ub418\uc5b4\uc57c \uc815\uc0c1 \ub3d9\uc791 }; // \uc608\uc81c let user = { name: \"John\", surname: \"Smith\" }; Object.defineProperty(user, 'fullName', { get() { return `${this.name} ${this.surname}`; }, set(value) { [this.name, this.surname] = value.split(\" \"); } }); alert(user.fullName); // John Smith for(let key in user) alert(key); // name, surname","title":"getter, setter properties"},{"location":"javascript/#nodejs","text":"","title":"nodejs"},{"location":"javascript/#import-package","text":"require: CommonJS \ud0a4\uc6cc\ub4dc import: ES6(ES2015) \ud0a4\uc6cc\ub4dc","title":"import package"},{"location":"javascript/#nodejs-getting-start","text":"https://www.nextree.co.kr/p8574/","title":"nodejs getting start"},{"location":"python3/","text":"Python3 handbook Python3 handbook Reference Variables String String formatting f-string (Literal String Interpolation) %-string str.format() Byte Condition (if/elif/else) while / for function and lambda express built-in functions Input Math list tuple set (\uc9d1\ud569) dict (dictionary) = map Iterable Generators (yield) Decorator Comprehesion Useful libraries or simple implementation Prefix Tree (Trie) itertools functools LRU (least recently used) caching for memoization (dynamic programming) reduce heapq (Min heap) collections deque Counter Type Hint (Type Annotation) Variable Type Annotation Function Type Annotation Type Module Final (Constraint), Union (Multiple Types) Optional Callable (Function Type Annotation) Abstraction Type Annotation User Type Annotation Type Check Environment Variables File Create, Write Exist Copy Get files Exception Reference https://note.nkmk.me/en/python-list-clear-pop-remove-del/ https://freedeveloper.tistory.com/271 # summary https://seongbindb.tistory.com/54 # summary https://wikidocs.net/book/1553 Variables a = 5. # 5.0 a = 1e9 # 100000000.0 a = 0.3 + 0.6 import sys sys.maxsize # max int String a = \"hello\" b = 'world' c = \"\"\"hello\\nworld\"\"\" d = a+b # helloworld c = [\"goodbye\", \"world\", \"!\"] \" \".join(c) # goodbye world ! a.startswith(\"Hello\") txt = \"welcome to the jungle\" x = txt.split() # ['welcome', 'to', 'the', 'jungle'] String formatting f-string (Literal String Interpolation) \ub2e4\ub978 formatting \ubc29\ubc95\ubcf4\ub2e4 \uc9c1\uad00\uc801\uc784 name = 'Song' sex = 'male' f'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.' F'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.' x = 10 y = 3 f'x + y = {x+y} | x * y = {x*y}' # 'x + y = 13 | x * y = 30' tuple = ('Hi, I am', 'song', 123) f'tuple: {tuple}' # \"tuple: ('Hi, I am', 'song', 123)\" %-string 'x + y = %d | x * y = %d' %(x+y, x*y) # 'x + y = 13 | x * y = 30' # Positional argument 'Hey %s, there is a 0x%x error!' % (name, errno) # 'Hey Bob, there is a 0xbadc0ffee error!' # keyward argument 'Hey %(name)s, there is a 0x%(errno)x error!' % {\"name\": name, \"errno\": errno } # 'Hey Bob, there is a 0xbadc0ffee error!' str.format() 'x + y = {} | x * y = {}'.format(x+y, x*y) # 'x + y = 13 | x * y = 30' 'Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno) # 'Hey Bob, there is a 0xbadc0ffee error!' REF> - https://docs.python.org/3/library/string.html#string-formatting - https://realpython.com/python-string-formatting \"First, thou shalt count to {0}\" # References first positional argument \"Bring me a {}\" # Implicitly references the first positional argument \"From {} to {}\" # Same as \"From {0} to {1}\" \"My quest is {name}\" # References keyword argument 'name' \"Weight in tons {0.weight}\" # 'weight' attribute of first positional arg \"Units destroyed: {players[0]}\" # First element of keyword argument 'players'. \"Harold's a clever {0!s}\" # Calls str() on the argument first \"Bring out the holy {name!r}\" # Calls repr() on the argument first \"More {!a}\" # Calls ascii() on the argument first format_spec ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type] fill ::= <any character> align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit+ grouping_option ::= \"_\" | \",\" precision ::= digit+ type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" Byte b'\\xde\\xad\\xbe\\xef'.hex() # 'deadbeef' bytes.fromhex('deadbeef') # b'\\xde\\xad\\xbe\\xef' Condition (if/elif/else) # \ube44\uad50 \uc5f0\uc0b0 x == y x != y x > y x < y x >= y x <= y # \ub17c\ub9ac \uc5f0\uc0b0 x and y x or y not x x in [1, 2, 3] x not in [1, 2, 3] # if/elif/else x = 100 if x >= 100: pass elif x >= 200: print(\">=200\") else: print(\"<100\") if x >= 100: pass else: print(\"x >= 100\") r = \">=100\" if x >= 100 else \"<100\" # list \uc0dd\uc131\uc2dc \uc870\uac74\ubb38 a = [1,2,3,4,5,5,5] remove_set = {3,5} result = [i for i in a if i not in remove_set] while / for i = 0 while i < 10: i++ # for i in ITERATABLE_OBJECT: e.g. list, tuple, set, dict for i in range(5): # 0,1,2,3,4 pass for i in range(1, 10, 2): # 1,3,5,7,9 pass for i in range(1, 10, 2): # 1 break # break the loop function and lambda express # function declaration def add(a,b): return a + b # call a function print(add(3,7)) print(add(b=3, a=7)) print((lambda a, b: a+b)(3, 7)) built-in functions a = [6,2,3,4,5] sum(a) # \ud569 min(a) # \uc791\uc740 \uc218 \uc120\ud0dd max(a) # \ud070 \uc218 \uc120\ud0dd eval(\"(3+3) * 10\") # \ubb38\uc790 \uc218\uc2dd \uacc4\uc0b0 sorted(a) # \uc624\ub984\ucc28\uc21c \uc815\ub82c sorted(a, reverse=True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c a.sort() # \uc815\ub82c b = [('A', 1),('D', 0),('B', 2)] sorted(jobs, key = lambda x: x[0]) # \uccab\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c sorted(b, key = lambda x: x[1], reverse=True) # \ub450\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c b.sort(key = lambda x: x[1], reverse=True) # sort \ucc38\uace0: https://docs.python.org/ko/3/howto/sorting.html#sortinghowto # ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c # map(FUNC, ITERABLE) a = [1.2, 2.5, 3.7, 4.6] for i in range(len(a)): a[i] = int(a[i]) a = [1.2, 2.5, 3.7, 4.6] a = list(map(int, a)) a # [1, 2, 3, 4] # ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\ud558\uace0, \uacb0\uacfc\ub97c \ubcd1\ud569 # reduce(FUNC, ITERABLE) from functools import reduce data = [1, 2, 3, 4, 5] def sum(a, b): return a + b reduce(sum, data) # 15 Input # Example1 >>> a = input().split() 10 20 (\uc785\ub825) # a=['10', '20'] >>> a = map(int, input().split()) 10 20 (\uc785\ub825) >>> a <map object at 0x03DFB0D0> >>> list(a) [10, 20] # Example2 import sys sys.stdin.readline().rstrip() Math a = 7 b = 3 a / b # \ub098\ub204\uae30 a % b # \ub098\uba38\uc9c0 a // b # \ubaab a ** b # \uac70\ub4ed\uc81c\uacf1; a\uc758 b\uc2b9 import math math.log10(5) # log10 math.log2(5) # log2 math.log(2) # log e \uc790\uc5f0\ub85c\uadf8 \ubc11 math.ceil(3.1) # \uc62c\ub9bc\ud568\uc218 math.floor(2.5) # \ub0b4\ub9bc\ud568\uc218 math.factorial(a) # !a math.sqrt(a) # \uc81c\uacf1\uadfc math.pow(a) # a\uc758 \uc81c\uacf1 math.trunc(f) # \uc18c\uc218\uc810\uc744 \uc790\ub974\ub294 \ud568\uc218 math.gcd(a, b) # a, b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218 math.radians(t) # \uac01\ub3c4 -> \ub77c\ub514\uc548 math.degrees(t) # \ub77c\ub514\uc548 -> \uac01\ub3c4 math.fabs(x) # x\uc758 \uc808\ub300\uac12; \ub0b4\uc7a5\ud568\uc218 abs\uc640 \ub2ec\ub9ac \uc2e4\uc218 \uac00\ub2a5 math.exp(x) # e\uc758 x\uc2b9 round(a,4) # \ubc18\uc62c\ub9bc list a = [1,2,3,4,5,6] a[-1] # 6 a[-3] # 4 a[1:4] # [2,3,4] # \ucd08\uae30\ud654 array = [i for i in range(20) if i % 2 == 1] # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] m = 3 n = 4 array = [[0] * m for _ in range(n) ] # [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] array[2][0] = 1 # [[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0]]s a = [1,4,3] a.append(2) a.sort() # \uc624\ub984\ucc28\uc21c \uc815\ub82c a.sort(reverse = True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c a.reverse() # \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c \ub4a4\uc9d1\uae30 a.insert(2,3) # \ud2b9\uc815 \uc778\ub371\uc2a4\uc5d0 \ub370\uc774\ud130 \ucd94\uac00 a.count(3) # \ub370\uc774\ud130 \uac1c\uc218 a.remove(1) # \ub370\uc774\ud130 \uc0ad\uc81c # \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uace0\ub824\ud574\uc11c remove\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ucd94\ucc9c (?) a.pop(0) # \ub370\uc774\ud130 \uc0ad\uc81c (index\uac00 \uc5c6\uc73c\uba74, \ub9c8\uc9c0\ub9c9 \ub370\uc774\ud130 \uc0ad\uc81c) a.clear() # \ub370\uc774\ud130 \ubaa8\ub450 \uc0ad\uc81c del a[1] # \ub370\uc774\ud130 \uc0ad\uc81c del a[1:4] # \ubc94\uc704 \uc0ad\uc81c del a[:] # \ubaa8\ub450 \uc0ad\uc81c del a[::step] # step \uac04\uaca9\uc5d0 \uc788\ub294 \ub370\uc774\ud130 \uc0ad\uc81c tuple list\uc640 \ub3d9\uc77c immutable value: \uc218\uc815 x \uc18c\uad04\ud638 \uc0ac\uc6a9 a = (10, 20) a[0] = 20 # error set (\uc9d1\ud569) # \ucd08\uae30\ud654 a = set([1,1,2,3,4,4,5]) b = {1,2,5,6} a | b # {1, 2, 3, 4, 5, 6} a & b # {1, 2, 5} a - b # {3, 4} a.add(7) a.update([8, 9]) a.remove(7) # {1, 2, 3, 4, 5, 8, 9} dict (dictionary) = map mapping immutable key to mutable value not duplicatable key value access through keys >>> a = {1: 5, 2: 3} # int \uc0ac\uc6a9 >>> a = {(1,5): 5, (3,3): 3} # tuple\uc0ac\uc6a9 >>> a = { 3.6: 5, \"abc\": 3} # float \uc0ac\uc6a9 >>> a = { True: 5, \"abc\": 3} # bool \uc0ac\uc6a9 d = dict() d = dict( alice = 5, bob = 20, tony= 15, suzy = 30) d = {} d = {'abc' : 1, 'def' : 2} d['abc'] = 5 # nested list (tuple) to a dict name_and_ages = [['alice', 5], ['Bob', 13]] name_and_ages = [('alice', 5), ('Bob', 13)] name_and_ages = (('alice', 5), ('Bob', 13)) name_and_ages = (['alice', 5], ['Bob', 13]) dict(name_and_ages) # \uc704 \ub3d9\uc77c\ud55c \uacb0\uacfc # deepcopy import copy a = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} b = copy.deepcopy(a) b['alice'].append(5) # b {'alice': [1, 2, 3, 5], 'bob': 20, 'tony': 15, 'suzy': 30} # a {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # update a = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} a.update({'bob':99, 'tony':99, 'kim': 30}) # a {'alice': [1, 2, 3], 'bob': 99, 'tony': 99, 'suzy': 30, 'kim': 30} # loop for key in a: # key loop print(key, a[key]) for val in a.values(): # value loop print(val) for key, val in a.items(): # key, value loop print(\"key = {key}, value={value}\".format(key=key,value=val)) # check a key available 'alice' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # True 'teacher' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # False # delete del a['alice'] Iterable Generators (yield) Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly: def generater(): mylist = range(3) for i in mylist: yield i * i iterable = generater() # Generater \uc0dd\uc131 print(iterable) # <generator object generater at 0xb7555c34> for i in iterable: print(i) Decorator Comprehesion REF: https://wikidocs.net/16064 words = \"\ub098\ub294 \ud30c\uc774\uc36c\uc744 \uacf5\ubd80\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubb34\ucc99 \uc2ec\ud50c\ud558\uace0 \uba85\ub8cc\ud569\ub2c8\ub2e4.\".split() # List representation [len(word) for word in words if len(word)> 3] # Set representation {len(word) for word in words if len(word)> 3} # dict (hash) # {key\ud45c\ud604\uc2dd : value\ud45c\ud604\uc2dd for item in iterable} country_capital = {'\ub300\ud55c\ubbfc\uad6d':'\uc11c\uc6b8', '\uc601\uad6d' :'\ub7f0\ub358', '\ubbf8\uad6d' :'\uc6cc\uc2f1\ud134', '\uc77c\ubcf8' :'\ub3c4\ucfc4'} capital_country = {capital: country for country, capital in country_capital.items()} Useful libraries or simple implementation Prefix Tree (Trie) class Trie(object): def __init__(self): self.child = {} def insert(self, word): current = self.child for l in word: if l not in current: current[l] = {} current = current[l] current['#']=1 def search(self, word): current = self.child for l in word: if l not in current: return False current = current[l] return '#' in current def startsWith(self, prefix): current = self.child for l in prefix: if l not in current: return False current = current[l] return True ob1 = Trie() ob1.insert(\"apple\") print(ob1.search(\"apple\")) print(ob1.search(\"app\")) print(ob1.startsWith(\"app\")) ob1.insert(\"app\") print(ob1.search(\"app\")) itertools https://docs.python.org/ko/3/library/itertools.html permutations (\uc21c\uc5f4) combinations (\uc870\ud569) product (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \uc21c\uc5f4) combinations_with_replacement (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc870\ud569) from itertools import permutations, combinations, product, combinations_with_replacement # \ub370\uce74\ub974\ud2b8 \uacf1(cartesian product) - \uc911\ubcf5\ud5c8\uc6a9 \uc21c\uc5f4 product('ABCD', repeat=2) # AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD # \uc21c\uc5f4 permutations('ABCD', 2) # AB AC AD BA BC BD CA CB CD DA DB DC # \uc870\ud569 (\uc911\ubcf5X) combinations('ABCD', 2) # AB AC AD BC BD CD # \uc870\ud569 (\uc911\ubcf5\ud5c8\uc6a9) combinations_with_replacement('ABCD', 2) # AA AB AC AD BB BC BD CC CD DD functools https://docs.python.org/ko/3/library/functools.html LRU (least recently used) caching for memoization (dynamic programming) functools\uc758 lru_cache decorator\ub97c \uc0ac\uc6a9\ud574 memoization \uad6c\ud604 from functools import lru_cache # \ub3d9\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(dynamic programming) \uae30\ubc95\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 # \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud53c\ubcf4\ub098\uce58 \uc218\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \uc608: @lru_cache(maxsize=None) def fib(n): if n < 2: return n return fib(n-1) + fib(n-2) >>> [fib(n) for n in range(16)] [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] >>> fib.cache_info() CacheInfo(hits=28, misses=16, maxsize=None, currsize=16) #\ubc84\uc804 3.2\uc5d0 \ucd94\uac00. reduce \uc704\uc5d0\uc11c \uc5b8\uae09\ud568. heapq (Min heap) \ucd5c\uc18c \ud799 PriorityQueue O(NlogN) import heapq heaplist = [] heapq.heappush(heaplist, 4) heapq.heappush(heaplist, 1) heapq.heappush(heaplist, 7) heapq.heappush(heaplist, 3) # [1, 3, 7, 4] a = heapq.heappop(heaplist) # [3, 4, 7] print(a) # 1 print(heaplist) # [3, 4, 7] # list -> priority queue a = [10, 4, 111, 40] heapq.heapify(a) # min heap order\ub85c \uc815\ub82c # [4, 10, 111, 40] # max heap nums = [4, 1, 7, 3, 8, 5] heap = [] for num in nums: heapq.heappush(heap, (-num, num)) # (\uc6b0\uc120 \uc21c\uc704, \uac12) while heap: print(heapq.heappop(heap)[1]) # index 1 collections deque from collections import deque q = deque() q.append('a') q.append('b') q.append('c') print(\"Initial queue\") print(q) print(\"\\nElements dequeued from the queue\") print(q.popleft()) print(q.popleft()) print(q.popleft()) print(\"\\nQueue after removing elements\") print(q) # Uncommenting q.popleft() # will raise an IndexError # as queue is now empty Counter A Counter is a dict subclass for counting hashable objects (e.g. dict). # A Python program to show different ways to create # Counter from collections import Counter # With sequence of items print(Counter(['B','B','A','B','C','A','B','B','A','C'])) # with dictionary print(Counter({'A':3, 'B':5, 'C':2})) # with keyword arguments print(Counter(A=3, B=5, C=2)) # output # Counter({'B': 5, 'A': 3, 'C': 2}) # Counter({'B': 5, 'A': 3, 'C': 2}) # Counter({'B': 5, 'A': 3, 'C': 2}) coun = Counter() coun.update([1, 2, 3, 1, 2, 1, 1, 2]) # Counter({1: 4, 2: 3, 3: 1}) coun.update([1, 2, 4]) # Counter({1: 5, 2: 4, 3: 1, 4: 1}) # Python program to demonstrate that counts in # Counter can be 0 and negative c1 = Counter(A=4, B=3, C=10) c2 = Counter(A=10, B=3, C=4) c1.subtract(c2) # Counter({'c': 6, 'B': 0, 'A': -6}) c1 - c2 ## Counter({'c': 6, 'B': 0, 'A': -6}) Type Hint (Type Annotation) REF: https://www.daleseo.com/python-type-annotations/ def greeting(name: str) -> str: return 'Hello ' + name Variable Type Annotation name: str = \"John Doe\" age: int = 25 emails: list: [\"john1@doe.com\", \"john2@doe.com\"] address: dict = { \"state\": \"NM\", \"zip\": \"80556\" } Function Type Annotation def stringify(num: int) -> str: return str(num) def plus(num1: int, num2: float = 3.5) -> float: return num1 + num2 def greet(name: str) -> None: return \"Hi! \" + str def repeat(message: str, times: int = 2) -> list: return [message] * times Type Module from typing import List, Set, Dict, Tuple nums: List[int] = [1] unique_nums: Set[int] = {6, 7} vision: Dict[str, float] = {'left': 1.0, 'right': 0.9} john: Tuple[int, str, List[float]] = (25, \"John Doe\", [1.0, 0.9]) Final (Constraint), Union (Multiple Types) from typing import Final, Union TIME_OUT: Final[int] = 10 def toString(num: Union[int, float]) -> str: return str(num) toString(1) toString(1.5) Optional Optional\uc740 None\uc774 \ud5c8\uc6a9\ub418\ub294 \ud568\uc218\uc758 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0c0\uc785\uc744 \uba85\uc2dc\ud560 \ub54c \uc720\uc6a9 from typing import Optional def repeat(message: str, times: Optional[int] = None) -> list: if times: return [message] * times else: return [message] Callable (Function Type Annotation) from typing import Callable def repeat(greet: Callable[[str], str], name: str, times: int = 2) -> None: for _ in range(times): print(greet(name)) # Lamda greet: Callable[[str], str] = lambda name: f\"Hi, {name}!\" Abstraction Type Annotation from typing import Iterable, List def toStrings(nums: Iterable[int]) -> List[str]: return [str(x) for x in nums] Other types: Sequence , Mapping , MutableMapping User Type Annotation class User: ... def find_user(id: str) -> User: ... def create_user(user: User) -> User: ... Type Check pip install mypy mypy our_file.py our_directory Environment Variables >>> import os >>> user = os.environ['USER'] >>> user 'willing' File Create, Write try: # w: write, +: newly with open('docs/readme.txt', 'w+') as f: f.write('Create a new text file!') except FileNotFoundError: print(\"The 'docs' directory does not exist\") f = open('docs/readme.txt', 'w+') f.write(\"write data\") f.close() Exist import os.path from os import path path.exists(\"guru99.txt\") Copy shutil.copyfile(original, target) # copy a file to a target file. shutil.copy(src, dest) # copy a file to a directory. Get files import os import glob from pprint import pprint as pp file_info = {os.path.realpath(p) : os.stat(p).st_size for p in glob.glob('*.*')} pp(file_info) {'/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.log': 68, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.txt': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.log': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.txt': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/c.log': 68, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/err.log': 13, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/exceptional.py': 566, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/words.py': 910} Exception https://docs.python.org/3/library/exceptions.html","title":"Python3 handbook"},{"location":"python3/#python3-handbook","text":"Python3 handbook Reference Variables String String formatting f-string (Literal String Interpolation) %-string str.format() Byte Condition (if/elif/else) while / for function and lambda express built-in functions Input Math list tuple set (\uc9d1\ud569) dict (dictionary) = map Iterable Generators (yield) Decorator Comprehesion Useful libraries or simple implementation Prefix Tree (Trie) itertools functools LRU (least recently used) caching for memoization (dynamic programming) reduce heapq (Min heap) collections deque Counter Type Hint (Type Annotation) Variable Type Annotation Function Type Annotation Type Module Final (Constraint), Union (Multiple Types) Optional Callable (Function Type Annotation) Abstraction Type Annotation User Type Annotation Type Check Environment Variables File Create, Write Exist Copy Get files Exception","title":"Python3 handbook"},{"location":"python3/#reference","text":"https://note.nkmk.me/en/python-list-clear-pop-remove-del/ https://freedeveloper.tistory.com/271 # summary https://seongbindb.tistory.com/54 # summary https://wikidocs.net/book/1553","title":"Reference"},{"location":"python3/#variables","text":"a = 5. # 5.0 a = 1e9 # 100000000.0 a = 0.3 + 0.6 import sys sys.maxsize # max int","title":"Variables"},{"location":"python3/#string","text":"a = \"hello\" b = 'world' c = \"\"\"hello\\nworld\"\"\" d = a+b # helloworld c = [\"goodbye\", \"world\", \"!\"] \" \".join(c) # goodbye world ! a.startswith(\"Hello\") txt = \"welcome to the jungle\" x = txt.split() # ['welcome', 'to', 'the', 'jungle']","title":"String"},{"location":"python3/#string-formatting","text":"","title":"String formatting"},{"location":"python3/#f-string-literal-string-interpolation","text":"\ub2e4\ub978 formatting \ubc29\ubc95\ubcf4\ub2e4 \uc9c1\uad00\uc801\uc784 name = 'Song' sex = 'male' f'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.' F'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.' x = 10 y = 3 f'x + y = {x+y} | x * y = {x*y}' # 'x + y = 13 | x * y = 30' tuple = ('Hi, I am', 'song', 123) f'tuple: {tuple}' # \"tuple: ('Hi, I am', 'song', 123)\"","title":"f-string (Literal String Interpolation)"},{"location":"python3/#-string","text":"'x + y = %d | x * y = %d' %(x+y, x*y) # 'x + y = 13 | x * y = 30' # Positional argument 'Hey %s, there is a 0x%x error!' % (name, errno) # 'Hey Bob, there is a 0xbadc0ffee error!' # keyward argument 'Hey %(name)s, there is a 0x%(errno)x error!' % {\"name\": name, \"errno\": errno } # 'Hey Bob, there is a 0xbadc0ffee error!'","title":"%-string"},{"location":"python3/#strformat","text":"'x + y = {} | x * y = {}'.format(x+y, x*y) # 'x + y = 13 | x * y = 30' 'Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno) # 'Hey Bob, there is a 0xbadc0ffee error!' REF> - https://docs.python.org/3/library/string.html#string-formatting - https://realpython.com/python-string-formatting \"First, thou shalt count to {0}\" # References first positional argument \"Bring me a {}\" # Implicitly references the first positional argument \"From {} to {}\" # Same as \"From {0} to {1}\" \"My quest is {name}\" # References keyword argument 'name' \"Weight in tons {0.weight}\" # 'weight' attribute of first positional arg \"Units destroyed: {players[0]}\" # First element of keyword argument 'players'. \"Harold's a clever {0!s}\" # Calls str() on the argument first \"Bring out the holy {name!r}\" # Calls repr() on the argument first \"More {!a}\" # Calls ascii() on the argument first format_spec ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type] fill ::= <any character> align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit+ grouping_option ::= \"_\" | \",\" precision ::= digit+ type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"","title":"str.format()"},{"location":"python3/#byte","text":"b'\\xde\\xad\\xbe\\xef'.hex() # 'deadbeef' bytes.fromhex('deadbeef') # b'\\xde\\xad\\xbe\\xef'","title":"Byte"},{"location":"python3/#condition-ifelifelse","text":"# \ube44\uad50 \uc5f0\uc0b0 x == y x != y x > y x < y x >= y x <= y # \ub17c\ub9ac \uc5f0\uc0b0 x and y x or y not x x in [1, 2, 3] x not in [1, 2, 3] # if/elif/else x = 100 if x >= 100: pass elif x >= 200: print(\">=200\") else: print(\"<100\") if x >= 100: pass else: print(\"x >= 100\") r = \">=100\" if x >= 100 else \"<100\" # list \uc0dd\uc131\uc2dc \uc870\uac74\ubb38 a = [1,2,3,4,5,5,5] remove_set = {3,5} result = [i for i in a if i not in remove_set]","title":"Condition (if/elif/else)"},{"location":"python3/#while-for","text":"i = 0 while i < 10: i++ # for i in ITERATABLE_OBJECT: e.g. list, tuple, set, dict for i in range(5): # 0,1,2,3,4 pass for i in range(1, 10, 2): # 1,3,5,7,9 pass for i in range(1, 10, 2): # 1 break # break the loop","title":"while / for"},{"location":"python3/#function-and-lambda-express","text":"# function declaration def add(a,b): return a + b # call a function print(add(3,7)) print(add(b=3, a=7)) print((lambda a, b: a+b)(3, 7))","title":"function and lambda express"},{"location":"python3/#built-in-functions","text":"a = [6,2,3,4,5] sum(a) # \ud569 min(a) # \uc791\uc740 \uc218 \uc120\ud0dd max(a) # \ud070 \uc218 \uc120\ud0dd eval(\"(3+3) * 10\") # \ubb38\uc790 \uc218\uc2dd \uacc4\uc0b0 sorted(a) # \uc624\ub984\ucc28\uc21c \uc815\ub82c sorted(a, reverse=True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c a.sort() # \uc815\ub82c b = [('A', 1),('D', 0),('B', 2)] sorted(jobs, key = lambda x: x[0]) # \uccab\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c sorted(b, key = lambda x: x[1], reverse=True) # \ub450\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c b.sort(key = lambda x: x[1], reverse=True) # sort \ucc38\uace0: https://docs.python.org/ko/3/howto/sorting.html#sortinghowto # ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c # map(FUNC, ITERABLE) a = [1.2, 2.5, 3.7, 4.6] for i in range(len(a)): a[i] = int(a[i]) a = [1.2, 2.5, 3.7, 4.6] a = list(map(int, a)) a # [1, 2, 3, 4] # ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\ud558\uace0, \uacb0\uacfc\ub97c \ubcd1\ud569 # reduce(FUNC, ITERABLE) from functools import reduce data = [1, 2, 3, 4, 5] def sum(a, b): return a + b reduce(sum, data) # 15","title":"built-in functions"},{"location":"python3/#input","text":"# Example1 >>> a = input().split() 10 20 (\uc785\ub825) # a=['10', '20'] >>> a = map(int, input().split()) 10 20 (\uc785\ub825) >>> a <map object at 0x03DFB0D0> >>> list(a) [10, 20] # Example2 import sys sys.stdin.readline().rstrip()","title":"Input"},{"location":"python3/#math","text":"a = 7 b = 3 a / b # \ub098\ub204\uae30 a % b # \ub098\uba38\uc9c0 a // b # \ubaab a ** b # \uac70\ub4ed\uc81c\uacf1; a\uc758 b\uc2b9 import math math.log10(5) # log10 math.log2(5) # log2 math.log(2) # log e \uc790\uc5f0\ub85c\uadf8 \ubc11 math.ceil(3.1) # \uc62c\ub9bc\ud568\uc218 math.floor(2.5) # \ub0b4\ub9bc\ud568\uc218 math.factorial(a) # !a math.sqrt(a) # \uc81c\uacf1\uadfc math.pow(a) # a\uc758 \uc81c\uacf1 math.trunc(f) # \uc18c\uc218\uc810\uc744 \uc790\ub974\ub294 \ud568\uc218 math.gcd(a, b) # a, b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218 math.radians(t) # \uac01\ub3c4 -> \ub77c\ub514\uc548 math.degrees(t) # \ub77c\ub514\uc548 -> \uac01\ub3c4 math.fabs(x) # x\uc758 \uc808\ub300\uac12; \ub0b4\uc7a5\ud568\uc218 abs\uc640 \ub2ec\ub9ac \uc2e4\uc218 \uac00\ub2a5 math.exp(x) # e\uc758 x\uc2b9 round(a,4) # \ubc18\uc62c\ub9bc","title":"Math"},{"location":"python3/#list","text":"a = [1,2,3,4,5,6] a[-1] # 6 a[-3] # 4 a[1:4] # [2,3,4] # \ucd08\uae30\ud654 array = [i for i in range(20) if i % 2 == 1] # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] m = 3 n = 4 array = [[0] * m for _ in range(n) ] # [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] array[2][0] = 1 # [[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0]]s a = [1,4,3] a.append(2) a.sort() # \uc624\ub984\ucc28\uc21c \uc815\ub82c a.sort(reverse = True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c a.reverse() # \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c \ub4a4\uc9d1\uae30 a.insert(2,3) # \ud2b9\uc815 \uc778\ub371\uc2a4\uc5d0 \ub370\uc774\ud130 \ucd94\uac00 a.count(3) # \ub370\uc774\ud130 \uac1c\uc218 a.remove(1) # \ub370\uc774\ud130 \uc0ad\uc81c # \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uace0\ub824\ud574\uc11c remove\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ucd94\ucc9c (?) a.pop(0) # \ub370\uc774\ud130 \uc0ad\uc81c (index\uac00 \uc5c6\uc73c\uba74, \ub9c8\uc9c0\ub9c9 \ub370\uc774\ud130 \uc0ad\uc81c) a.clear() # \ub370\uc774\ud130 \ubaa8\ub450 \uc0ad\uc81c del a[1] # \ub370\uc774\ud130 \uc0ad\uc81c del a[1:4] # \ubc94\uc704 \uc0ad\uc81c del a[:] # \ubaa8\ub450 \uc0ad\uc81c del a[::step] # step \uac04\uaca9\uc5d0 \uc788\ub294 \ub370\uc774\ud130 \uc0ad\uc81c","title":"list"},{"location":"python3/#tuple","text":"list\uc640 \ub3d9\uc77c immutable value: \uc218\uc815 x \uc18c\uad04\ud638 \uc0ac\uc6a9 a = (10, 20) a[0] = 20 # error","title":"tuple"},{"location":"python3/#set","text":"# \ucd08\uae30\ud654 a = set([1,1,2,3,4,4,5]) b = {1,2,5,6} a | b # {1, 2, 3, 4, 5, 6} a & b # {1, 2, 5} a - b # {3, 4} a.add(7) a.update([8, 9]) a.remove(7) # {1, 2, 3, 4, 5, 8, 9}","title":"set (\uc9d1\ud569)"},{"location":"python3/#dict-dictionary-map","text":"mapping immutable key to mutable value not duplicatable key value access through keys >>> a = {1: 5, 2: 3} # int \uc0ac\uc6a9 >>> a = {(1,5): 5, (3,3): 3} # tuple\uc0ac\uc6a9 >>> a = { 3.6: 5, \"abc\": 3} # float \uc0ac\uc6a9 >>> a = { True: 5, \"abc\": 3} # bool \uc0ac\uc6a9 d = dict() d = dict( alice = 5, bob = 20, tony= 15, suzy = 30) d = {} d = {'abc' : 1, 'def' : 2} d['abc'] = 5 # nested list (tuple) to a dict name_and_ages = [['alice', 5], ['Bob', 13]] name_and_ages = [('alice', 5), ('Bob', 13)] name_and_ages = (('alice', 5), ('Bob', 13)) name_and_ages = (['alice', 5], ['Bob', 13]) dict(name_and_ages) # \uc704 \ub3d9\uc77c\ud55c \uacb0\uacfc # deepcopy import copy a = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} b = copy.deepcopy(a) b['alice'].append(5) # b {'alice': [1, 2, 3, 5], 'bob': 20, 'tony': 15, 'suzy': 30} # a {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # update a = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} a.update({'bob':99, 'tony':99, 'kim': 30}) # a {'alice': [1, 2, 3], 'bob': 99, 'tony': 99, 'suzy': 30, 'kim': 30} # loop for key in a: # key loop print(key, a[key]) for val in a.values(): # value loop print(val) for key, val in a.items(): # key, value loop print(\"key = {key}, value={value}\".format(key=key,value=val)) # check a key available 'alice' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # True 'teacher' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # False # delete del a['alice']","title":"dict (dictionary) = map"},{"location":"python3/#iterable-generators-yield","text":"Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly: def generater(): mylist = range(3) for i in mylist: yield i * i iterable = generater() # Generater \uc0dd\uc131 print(iterable) # <generator object generater at 0xb7555c34> for i in iterable: print(i)","title":"Iterable Generators (yield)"},{"location":"python3/#decorator","text":"","title":"Decorator"},{"location":"python3/#comprehesion","text":"REF: https://wikidocs.net/16064 words = \"\ub098\ub294 \ud30c\uc774\uc36c\uc744 \uacf5\ubd80\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubb34\ucc99 \uc2ec\ud50c\ud558\uace0 \uba85\ub8cc\ud569\ub2c8\ub2e4.\".split() # List representation [len(word) for word in words if len(word)> 3] # Set representation {len(word) for word in words if len(word)> 3} # dict (hash) # {key\ud45c\ud604\uc2dd : value\ud45c\ud604\uc2dd for item in iterable} country_capital = {'\ub300\ud55c\ubbfc\uad6d':'\uc11c\uc6b8', '\uc601\uad6d' :'\ub7f0\ub358', '\ubbf8\uad6d' :'\uc6cc\uc2f1\ud134', '\uc77c\ubcf8' :'\ub3c4\ucfc4'} capital_country = {capital: country for country, capital in country_capital.items()}","title":"Comprehesion"},{"location":"python3/#useful-libraries-or-simple-implementation","text":"","title":"Useful libraries or simple implementation"},{"location":"python3/#prefix-tree-trie","text":"class Trie(object): def __init__(self): self.child = {} def insert(self, word): current = self.child for l in word: if l not in current: current[l] = {} current = current[l] current['#']=1 def search(self, word): current = self.child for l in word: if l not in current: return False current = current[l] return '#' in current def startsWith(self, prefix): current = self.child for l in prefix: if l not in current: return False current = current[l] return True ob1 = Trie() ob1.insert(\"apple\") print(ob1.search(\"apple\")) print(ob1.search(\"app\")) print(ob1.startsWith(\"app\")) ob1.insert(\"app\") print(ob1.search(\"app\"))","title":"Prefix Tree (Trie)"},{"location":"python3/#itertools","text":"https://docs.python.org/ko/3/library/itertools.html permutations (\uc21c\uc5f4) combinations (\uc870\ud569) product (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \uc21c\uc5f4) combinations_with_replacement (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc870\ud569) from itertools import permutations, combinations, product, combinations_with_replacement # \ub370\uce74\ub974\ud2b8 \uacf1(cartesian product) - \uc911\ubcf5\ud5c8\uc6a9 \uc21c\uc5f4 product('ABCD', repeat=2) # AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD # \uc21c\uc5f4 permutations('ABCD', 2) # AB AC AD BA BC BD CA CB CD DA DB DC # \uc870\ud569 (\uc911\ubcf5X) combinations('ABCD', 2) # AB AC AD BC BD CD # \uc870\ud569 (\uc911\ubcf5\ud5c8\uc6a9) combinations_with_replacement('ABCD', 2) # AA AB AC AD BB BC BD CC CD DD","title":"itertools"},{"location":"python3/#functools","text":"https://docs.python.org/ko/3/library/functools.html","title":"functools"},{"location":"python3/#lru-least-recently-used-caching-for-memoization-dynamic-programming","text":"functools\uc758 lru_cache decorator\ub97c \uc0ac\uc6a9\ud574 memoization \uad6c\ud604 from functools import lru_cache # \ub3d9\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(dynamic programming) \uae30\ubc95\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 # \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud53c\ubcf4\ub098\uce58 \uc218\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \uc608: @lru_cache(maxsize=None) def fib(n): if n < 2: return n return fib(n-1) + fib(n-2) >>> [fib(n) for n in range(16)] [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] >>> fib.cache_info() CacheInfo(hits=28, misses=16, maxsize=None, currsize=16) #\ubc84\uc804 3.2\uc5d0 \ucd94\uac00.","title":"LRU (least recently used) caching for memoization (dynamic programming)"},{"location":"python3/#reduce","text":"\uc704\uc5d0\uc11c \uc5b8\uae09\ud568.","title":"reduce"},{"location":"python3/#heapq-min-heap","text":"\ucd5c\uc18c \ud799 PriorityQueue O(NlogN) import heapq heaplist = [] heapq.heappush(heaplist, 4) heapq.heappush(heaplist, 1) heapq.heappush(heaplist, 7) heapq.heappush(heaplist, 3) # [1, 3, 7, 4] a = heapq.heappop(heaplist) # [3, 4, 7] print(a) # 1 print(heaplist) # [3, 4, 7] # list -> priority queue a = [10, 4, 111, 40] heapq.heapify(a) # min heap order\ub85c \uc815\ub82c # [4, 10, 111, 40] # max heap nums = [4, 1, 7, 3, 8, 5] heap = [] for num in nums: heapq.heappush(heap, (-num, num)) # (\uc6b0\uc120 \uc21c\uc704, \uac12) while heap: print(heapq.heappop(heap)[1]) # index 1","title":"heapq (Min heap)"},{"location":"python3/#collections","text":"","title":"collections"},{"location":"python3/#deque","text":"from collections import deque q = deque() q.append('a') q.append('b') q.append('c') print(\"Initial queue\") print(q) print(\"\\nElements dequeued from the queue\") print(q.popleft()) print(q.popleft()) print(q.popleft()) print(\"\\nQueue after removing elements\") print(q) # Uncommenting q.popleft() # will raise an IndexError # as queue is now empty","title":"deque"},{"location":"python3/#counter","text":"A Counter is a dict subclass for counting hashable objects (e.g. dict). # A Python program to show different ways to create # Counter from collections import Counter # With sequence of items print(Counter(['B','B','A','B','C','A','B','B','A','C'])) # with dictionary print(Counter({'A':3, 'B':5, 'C':2})) # with keyword arguments print(Counter(A=3, B=5, C=2)) # output # Counter({'B': 5, 'A': 3, 'C': 2}) # Counter({'B': 5, 'A': 3, 'C': 2}) # Counter({'B': 5, 'A': 3, 'C': 2}) coun = Counter() coun.update([1, 2, 3, 1, 2, 1, 1, 2]) # Counter({1: 4, 2: 3, 3: 1}) coun.update([1, 2, 4]) # Counter({1: 5, 2: 4, 3: 1, 4: 1}) # Python program to demonstrate that counts in # Counter can be 0 and negative c1 = Counter(A=4, B=3, C=10) c2 = Counter(A=10, B=3, C=4) c1.subtract(c2) # Counter({'c': 6, 'B': 0, 'A': -6}) c1 - c2 ## Counter({'c': 6, 'B': 0, 'A': -6})","title":"Counter"},{"location":"python3/#type-hint-type-annotation","text":"REF: https://www.daleseo.com/python-type-annotations/ def greeting(name: str) -> str: return 'Hello ' + name","title":"Type Hint (Type Annotation)"},{"location":"python3/#variable-type-annotation","text":"name: str = \"John Doe\" age: int = 25 emails: list: [\"john1@doe.com\", \"john2@doe.com\"] address: dict = { \"state\": \"NM\", \"zip\": \"80556\" }","title":"Variable Type Annotation"},{"location":"python3/#function-type-annotation","text":"def stringify(num: int) -> str: return str(num) def plus(num1: int, num2: float = 3.5) -> float: return num1 + num2 def greet(name: str) -> None: return \"Hi! \" + str def repeat(message: str, times: int = 2) -> list: return [message] * times","title":"Function Type Annotation"},{"location":"python3/#type-module","text":"from typing import List, Set, Dict, Tuple nums: List[int] = [1] unique_nums: Set[int] = {6, 7} vision: Dict[str, float] = {'left': 1.0, 'right': 0.9} john: Tuple[int, str, List[float]] = (25, \"John Doe\", [1.0, 0.9])","title":"Type Module"},{"location":"python3/#final-constraint-union-multiple-types","text":"from typing import Final, Union TIME_OUT: Final[int] = 10 def toString(num: Union[int, float]) -> str: return str(num) toString(1) toString(1.5)","title":"Final (Constraint), Union (Multiple Types)"},{"location":"python3/#optional","text":"Optional\uc740 None\uc774 \ud5c8\uc6a9\ub418\ub294 \ud568\uc218\uc758 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0c0\uc785\uc744 \uba85\uc2dc\ud560 \ub54c \uc720\uc6a9 from typing import Optional def repeat(message: str, times: Optional[int] = None) -> list: if times: return [message] * times else: return [message]","title":"Optional"},{"location":"python3/#callable-function-type-annotation","text":"from typing import Callable def repeat(greet: Callable[[str], str], name: str, times: int = 2) -> None: for _ in range(times): print(greet(name)) # Lamda greet: Callable[[str], str] = lambda name: f\"Hi, {name}!\"","title":"Callable (Function Type Annotation)"},{"location":"python3/#abstraction-type-annotation","text":"from typing import Iterable, List def toStrings(nums: Iterable[int]) -> List[str]: return [str(x) for x in nums] Other types: Sequence , Mapping , MutableMapping","title":"Abstraction Type Annotation"},{"location":"python3/#user-type-annotation","text":"class User: ... def find_user(id: str) -> User: ... def create_user(user: User) -> User: ...","title":"User Type Annotation"},{"location":"python3/#type-check","text":"pip install mypy mypy our_file.py our_directory","title":"Type Check"},{"location":"python3/#environment-variables","text":">>> import os >>> user = os.environ['USER'] >>> user 'willing'","title":"Environment Variables"},{"location":"python3/#file","text":"","title":"File"},{"location":"python3/#create-write","text":"try: # w: write, +: newly with open('docs/readme.txt', 'w+') as f: f.write('Create a new text file!') except FileNotFoundError: print(\"The 'docs' directory does not exist\") f = open('docs/readme.txt', 'w+') f.write(\"write data\") f.close()","title":"Create, Write"},{"location":"python3/#exist","text":"import os.path from os import path path.exists(\"guru99.txt\")","title":"Exist"},{"location":"python3/#copy","text":"shutil.copyfile(original, target) # copy a file to a target file. shutil.copy(src, dest) # copy a file to a directory.","title":"Copy"},{"location":"python3/#get-files","text":"import os import glob from pprint import pprint as pp file_info = {os.path.realpath(p) : os.stat(p).st_size for p in glob.glob('*.*')} pp(file_info) {'/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.log': 68, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.txt': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.log': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.txt': 0, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/c.log': 68, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/err.log': 13, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/exceptional.py': 566, '/Users/Blidkaga/Documents/CodeLab/Python_Basic/words.py': 910}","title":"Get files"},{"location":"python3/#exception","text":"https://docs.python.org/3/library/exceptions.html","title":"Exception"},{"location":"rust/","text":"Rust A language empowering everyone to build reliable and efficient software. Note \uc774 \ubb38\uc11c\ub294 rust-first-steps , rust-lang.org , rust-doc \uc744 \ubcf4\uace0 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4. Rust Why Rust? Performance Reliability Productivity Roadamp to improve Rust \ud2b9\uc131 \ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131 Rust module system Rust standard libary and useful crates How to use crates? Terms Latest version Rust installation Cargo Cargo versioning Cargo.toml (TOML file for cargo config) Cargo.lock Useful development tool Rust build tools Rustup & cargo command completion Rust Cookbook Helloworld with cargo How to add external crates Enabling rust backtrace Rust macro println! , print! todo! panic! dbg! Prelude (imported std libraries) Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c) References and Borrowing Comments Document comments Constants and Variables Built-in scalar data types Char type Compound Types Tuple Type Array Type &str\uacfc String Type Functions Diverging functions Associated function indication :: closure Call chaining using closure Statements and expressions Control flow if..else : loop , while and for match Result type Reference methods Field Init Shorthand Struct Update Syntax Tuple Structs Generics Generic Type Generic functions Generic Implementations (Generic methods) Bounds Where clause Associated types Phantom type parameters Traits To be considered collections Box, stack and heap String hash map Useful code or crates Read stdin Modules Macro Declarative Macros Procedural Macros Links for macro Testing Rust Attributes Scope Attribute arguments Frequently Used Attributes Custom cfg derive attribute Keywords crate Good answer to understand Associated items Rust RFC FFI (Foreign Function Interface) Calling foreign functions Calling Rust code from C \uac00\ubcc0 \uc778\uc790 \ud568\uc218 (variadic functions) Logging lib.rs and main.rs Why Rust? Performance Reliability Productivity Performance Rust is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages. Reliability Rust\u2019s rich type system and ownership model guarantee memory-safety and thread-safety \u2014 enabling you to eliminate many classes of bugs at compile-time. Productivity Rust has great documentation, a friendly compiler with useful error messages, and top-notch tooling \u2014 an integrated package manager and build tool, smart multi-editor support with auto-completion and type inspections, an auto-formatter, and more. Roadamp to improve Building tools; \uc9c1\uad00\uc801\uc774\uace0 \uac04\ub2e8\ud55c building, packaging tool \uc9c0\uc6d0 Web\u00adAssembly (Writing Web Apps); Binary instruction set in web browsers Working with servers (server-side code) Embedded system\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \ud5a5\uc0c1 Rust \ud2b9\uc131 Open-source high-level and low-level system programming language Type safe : The compiler assures that no operation will be applied to a variable of a wrong type. Memory safe : Rust pointers (known as references) always refer to valid memory. Data race free : Rust's borrow checker guarantees thread-safety by ensuring that multiple parts of a program can't mutate the same value at the same time. Zero-cost abstractions : Rust allows the use of high-level concepts, like iteration, interfaces, and functional programming, with minimal to no performance costs. The abstractions perform as well, as if you wrote the underlying code by hand. Minimal runtime : Rust has a very minimal and optional runtime. The language also has no garbage collector to manage memory efficiently. In this way Rust is most similar to languages like C and C++. Targets bare metal : Rust can target embedded and \"bare metal\" programming, making it suitable to write an operating system kernel or device drivers. \ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131 Variable\uacfc function type\uc744 \uadf9\ub3c4\ub85c \uc81c\uc5b4\ud558\uc5ec gabage collection\uc774 \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e6 Rust module system Crates : It's the smallest piece of code the Rust compiler can run. Modules : A number of modules become a crate; Related code items or items that are used together Path : Paths to access and use the code or items in Rust Third-party crate registry: crates.io Rust standard libary and useful crates std - The Rust standard library. In the Rust exercises, you'll notice the following modules: std::collections - Definitions for collection types, such as HashMap. std::env - Functions for working with your environment. std::fmt - Functionality to control output format. std::fs - Functions for working with the file system. std::io - Definitions and functionality for working with input/output. std::path - Definitions and functions that support working with file system path data. structopt - A third-party crate for easily parsing command-line arguments. chrono - A third-party crate to handle date and time data. regex - A third-party crate to work with regular expressions. serde - A third-party crate of serialization and deserialization operations for Rust data structures. How to use crates? use std::fmt Terms Wasm (WebAssembly) WebAssembly (abbreviated Wasm ) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications. WebAssembly is a new type of code that can be run in modern web browsers \u2014 it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together. Emscripten SDK - compile wasm code and generate javascript stub and wasm binary. Doc : \ud83d\udd17 WebAssembly Latest version Version 1.60.0 Rust installation # Install rust curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # Update rust rustup update # Uninstall rust rustup self uninstall vscode : \ud83d\udd17 ext install matklad.rust-analyzer vim : \ud83d\udd17 rust.vim All tools including rustc , cargo , and rustup are installed to the ~/.cargo/bin directory. Cargo cargo is the rust build tool and package manager. cargo --version : check the rust version cargo new --vcs=git : create new project with git init cargo new cargo build : build your project with cargo run : run your project with cargo test : test your project with cargo check : checks your code to make sure it compiles but doesn\u2019t produce an executable cargo doc : build documentation for your project with cargo doc --open : \ud604\uc7ac crate\uc758 html \ubb38\uc11c \uc0dd\uc131 cargo publish : publish a library to crates.io with Add dependent crates to a project by adding the crate name to the Cargo.toml file. cargo fmt : reformats your code according to the community code style. cargo fix : Automatically fix lint warnings reported by rustc cargo install : $HOME/.cargo/bin \uc5d0 crate binary\ub97c \uc124\uce58 cargo install cargo-generate : make a new Rust project by leveraging a pre-existing git repository as a template. e.g. manual : \ud83d\udd17 cargo doc Cargo versioning Cargo\ub294 \ubc84\uc804\uc744 \uba85\uc2dc\ud558\ub294 \ud45c\uc900\uc5d0 \ud574\ub2f9\ud558\ub294 Semantic Versioning(semver) \uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4. # Example rand = \"0.8.3\" The number 0.8.3 is actually shorthand for ^0.8.3, which means any version that is at least 0.8.3 but below 0.9.0. Cargo.toml (TOML file for cargo config) Cargo.toml : TOML\ub85c \uc815\uc758\ub41c cargo configuration file TOML's syntax primarily consists of key = \"value\" pairs, [section names], and # comments. TOML's syntax somewhat resembles that of .INI files, but it includes a formal specification, whereas the INI file format suffers from many competing variants. Its specification includes a list of supported data types: String, Integer, Float, Boolean, Datetime, Array, and Table. # This is a TOML document. title = \"TOML Example\" [owner] name = \"Tom Preston-Werner\" dob = 1979-05-27T07:32:00-08:00 # First class dates [database] server = \"192.168.1.1\" ports = [ 8000, 8001, 8002 ] connection_max = 5000 enabled = true [servers] # Indentation (tabs and/or spaces) is allowed but not required [servers.alpha] ip = \"10.0.0.1\" dc = \"eqdc10\" [servers.beta] ip = \"10.0.0.2\" dc = \"eqdc10\" [clients] data = [ [\"gamma\", \"delta\"], [1, 2] ] # Line breaks are OK when inside arrays hosts = [ \"alpha\", \"omega\" ] Cargo.lock go.sum \uacfc \uac19\uc774 \ub2e4\uc6b4\ub85c\ub4dc\ud55c crate (package)\uc5d0 \ub300\ud55c version\uacfc \uc815\ubcf4\ub97c \uba85\uc138\ud558\uc5ec, \uc774\ud6c4 \ub3d9\uc77c\ud55c crate version\uc73c\ub85c build\uc758 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud568. cargo update : crate\uc758 minor version\ub9cc \uc5c5\ub370\uc774\ud2b8\ud568; major version\uc744 \ubcc0\uacbd\ud558\ub824\uba74, Cargo.toml\uc758 major version\uc744 \uc5c5\ub370\uc774\ud2b8\ud574\uc57c \ud55c\ub2e4. Useful development tool rustup component add rustfmt rustup component add clippy cargo fmt : rustfmt ; Automatic Formatting development tool cargo fix : Automatically fix lint warnings reported by rustc cargo clippy : clippy ; A collection of lints to analyze your code to catch common mistakes and improve your code. Rust build tools rustc : Rust compiler rustup : Rust toolchain installer; Rust tool manager rustc --version : check rust version rustc RUST_FILE.rs : build the rust binary \ub2e4\uc74c tool \ud655\uc778 \ud544\uc694 rustc , rustdoc , rustfmt , rust-gdb , rust-lldb , rustup Rustup & cargo command completion Rust build tool\uc5d0 \ub300\ud55c tab completion mkdir -p ~/.local/share/bash-completion/completions rustup completions bash rustup >> ~/.local/share/bash-completion/completions/rustup rustup completions bash cargo >> ~/.local/share/bash-completion/completions/cargo source ~/.local/share/bash-completion/completions/rustup source ~/.local/share/bash-completion/completions/cargo Rust Cookbook Rust crate\uc758 \uc885\ub958\ub97c \ubd84\ub958\ud55c cookbook\uc5d0\uc11c \ud544\uc694\ud55c library\ub97c \uac00\uc7a5 \uba3c\uc800 \ucc3e\uc790! \ud83d\udd17 Rust Cookbook Helloworld with cargo # create new project cargo new hello-rust cd hello-rust tree #. #\u251c\u2500\u2500 Cargo.toml # for the metadata and dependencies of the project #\u2514\u2500\u2500 src # rust code # \u2514\u2500\u2500 main.rs # fn main() is the starting point of all rust appliciations. cat src/main.rs # fn main() { # println!(\"Hello, world!\"); # } # Building and running cargo run # Compiling hello-rust v0.1.0 (/home/neoul/projects/programming-note/rust/hello-rust) # Finished dev [unoptimized + debuginfo] target(s) in 0.54s # Running `target/debug/hello-rust` # Hello, world! tree #. #\u251c\u2500\u2500 Cargo.lock # [FIXME] what is it? #\u251c\u2500\u2500 Cargo.toml #\u251c\u2500\u2500 src #\u2502 \u2514\u2500\u2500 main.rs #\u2514\u2500\u2500 target # \u251c\u2500\u2500 CACHEDIR.TAG # # \u2514\u2500\u2500 debug # \u251c\u2500\u2500 build # \u251c\u2500\u2500 deps # \u2502 \u251c\u2500\u2500 hello_rust-542ed0184760343f # \u2502 \u2514\u2500\u2500 hello_rust-542ed0184760343f.d # \u251c\u2500\u2500 examples # \u251c\u2500\u2500 hello-rust # \u251c\u2500\u2500 hello-rust.d # \u2514\u2500\u2500 incremental How to add external crates \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec \uc0ac\uc6a9\ubc95 # Edit Cargo.toml [dependencies] ferris-says = \"0.2\" // in rust code use ferris_says::say; cargo build : Cargo will install our dependency for us. Enabling rust backtrace Rust display the backtrace if running with RUST_BACKTRACE=1 . $ ./main .. $ RUST_BACKTRACE=1 ./main thread 'main' panicked at 'not yet implemented: To Do!', main.rs:2:5 stack backtrace: 0: rust_begin_unwind ... 2: main::main 3: core::ops::function::FnOnce::call_once note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace. Rust macro Rust macro\ub294 \uac1c\uc218\uac00 \uac00\ubcc0\uc801\uc778 \uc785\ub825 \uc778\uc218\ub97c \ucde8\ud558\ub294 \ud568\uc218 println! , print! todo! panic! dbg! println! , print! \uac00\ubcc0 \uc778\uc218\ub97c \ubc1b\uc544 stdout \uc5d0 \ucd9c\ub825 // - If it called a function instead, it would be entered as println (without the `!`). // - \"Hello, world!\": string representation of the string // - {}\uc5d0 \uc778\uc218\uc758 \uac12 \ub300\uccb4 \uc0bd\uc785; placeholder\ub77c \ubd80\ub984 println!(\"Hello, {}!\", \"world\"); todo! \uc644\uc131\ub418\uc9c0 \uc54a\uc740 \ud568\uc218\uc758 prototype \uc810\uac80 \ubc0f \uc120\uc5b8, \ud638\ucd9c\uc2dc exception \ubc1c\uc0dd // todo! - Display \"Hello, world!\" with an exception. fn main() { todo!(\"Display the message by using the println!() macro\"); } panic! The call to panic! causes the error message contained in the last two lines. fn main() { panic!(\"crash and burn\"); } dbg! Another way to print out a value using the Debug format is to use the dbg! macro, which takes ownership of an expression, prints the file and line number of where that dbg! macro call occurs in your code along with the resulting value of that expression, and returns ownership of the value. Note: print message to stderr . #[derive(Debug)] struct Rectangle { width: u32, height: u32, } fn main() { let scale = 2; let rect = Rectangle { width: dbg!(30 * scale), height: 50, }; let rect = dbg!(rect); println!( \"The area of the rectangle {:?} is {} square pixels.\", rect, area(&rect) ); } fn area(rect :&Rectangle) -> u32 { return rect.width * rect.height; } // [src/main.rs:16] 30 * scale = 60 // [src/main.rs:20] rect = Rectangle { // width: 60, // height: 50, // } // The area of the rectangle Rectangle { width: 60, height: 50 } is 3000 square pixels. Prelude (imported std libraries) The prelude is the list of things that Rust automatically imports into every Rust program. \ud83d\udd17 Module std::prelude For example ... std::result::Result::{self, Ok, Err} , a type for functions that may succeed or fail. Like Option, its variants are exported as well. std::string::{String, ToString} , heap-allocated strings. std::vec::Vec , a growable, heap-allocated vector. Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c) Rust\uc758 \ubaa8\ub4e0 \uac12\uc740 owner\ub77c\ub294 \ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \ud558\ub098\uc758 \uac12\uc740 \ud558\ub098\uc758 owner \ubcc0\uc218\uc5d0\ub9cc \uc885\uc18d\ub420 \uc218 \uc788\uc74c \ub9cc\uc57d, copy trait\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba74, deep copy\ub97c \uc218\ud589\ud558\ub098 \uc544\ub2cc \uacbd\uc6b0 ownership move\uac00 \uc77c\uc5b4\ub0a8(?) ownership move: \ub2e4\uc218\uc758 \ubcc0\uc218\uac00 \ud558\ub098\uc758 \uac12\uc744 \uac00\ub9ac\ud0ac \uc218 \uc5c6\uc73c\uba70, ownership move (\uc18c\uc720\uad8c \uc774\uc804)\uac00 \uc218\ud589\ub428 owner\uac00 \uc885\uc18d \ubc94\uc704 (curly bracket)\uc744 \ubc97\uc5b4\ub098\uba74, drop (free)\ub428 (C++ RAII \ud328\ud134) let s1 = String::from(\"hello\"); let s2 = s1; // String\uc740 copy trait\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc544 ownership move\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774\ud6c4 s1\uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc624\ub958 \ubc1c\uc0dd // error[E0382]: use of moved value: `rect` \ubc1c\uc0dd \ud568\uc218\uc5d0 \uac12\uc744 \uc778\uc790\ub85c \ub118\uae38 \uacbd\uc6b0 ownership\ub3c4 \ubcc0\uacbd\ub428 deep copy: copy trait\uc774 \uad6c\ud604\ub41c structure\ub098 built-in scalar\ub294 deep copy\ub97c \uc218\ud589\ud568 shallow copy: rust\uc5d0\uc11c\ub294 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc74c heap\uc5d0 \ud560\ub2f9\ub418\ub294 \uac00\ubcc0 (mutable)\uc758 structure\ub294 \ubcf4\ud1b5 reference\ub85c ownership \uad00\ub9ac\ub97c \ud68c\ud53c Here are some of the types that implement Copy: All the integer types, such as u32 . The Boolean type, bool , with values true and false. All the floating point types, such as f64 . The character type, char . Tuples , if they only contain types that also implement Copy. For example, (i32, i32) implements Copy, but (i32, String) does not. https://velog.io/@timothy160620/Learning-Rust https://showx123.tistory.com/81 References and Borrowing fn main() { let mut s = String::from(\"hello\"); change(&mut s); } fn change(some_string: &mut String) { some_string.push_str(\", world\"); } Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, * . We\u2019ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15. Comments In Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line. // Hello, world. Document comments Rust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. Documentation comments use three slashes, /// , instead of two and support Markdown notation for formatting the text. /// Adds one to the number given. /// /// # Examples /// /// ``` /// let arg = 5; /// let answer = my_crate::add_one(arg); /// /// assert_eq!(6, answer); /// ``` pub fn add_one(x: i32) -> i32 { x + 1 } Another style of doc comment, //! , is used to describe the crate introduction. //! # My Crate //! //! `my_crate` is a collection of utilities to make performing certain //! calculations more convenient. [FIXME] document comments \ub2e4\uc2dc \uc77d\uae30 Constants and Variables A value is not assigned, it is binded to a variable. python\uacfc \uac19\uc740 bind \uac1c\ub150\uc744 \ucc28\uc6a9\ud568 Constants must be computed at compile time. The equal sign ( = ) tells Rust we want to bind something to the variable now. // \ud568\uc218 \uc120\uc5b8 fn func() // \ubcc0\uc218 \uc120\uc5b8 let a_number; // \ubcc0\uc218\uc5d0 \uac12 \ubc14\uc778\ub529; variable binding to a value // variable binding == value assginment (\uac12\ud560\ub2f9) let a_number = 10; // \uac12\uc774 \ubc14\uc778\ub529\ub41c \ubcc0\uc218\ub294 \uac12 re-\ubc14\uc778\ub529 \ubd88\uac00\ub2a5!! a_number = 11; // mut (mutable, \ubcc0\ud560 \uc218 \uc788\ub294)\ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0 let mut b_number = 10; // variable binding \ubcc0\uacbd \uac00\ub2a5 b_number = 11; // variable shadowing (\ubcc0\uc218 \uc100\ub3c4\uc789) // let\uc73c\ub85c \ub3d9\uc77c\uba85\uc758 \ubcc0\uc218\ub97c \uacc4\uc18d \uc120\uc5b8\ud560 \uc218 \uc788\uc74c // \uc774\uac83\uc73c\ub85c \ubcc0\uc218\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uacfc \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c let x = 5; let x = x + 1; let x = x * 2; println!(\"The value of x is: {}\", x); // The value of x is: 12 // shardowing\uc73c\ub85c \ubcc0\uc218\uc758 type\uc774 \ubcc0\uacbd\ub418\ub294 \uac83\ucc98\ub7fc \ub3d9\uc791\uc2dc\ud0ac \uc218 \uc788\ub2e4. let spaces = \" \"; let spaces = spaces.len(); // space\ub294 interger\uac00 \ub428 // \ub9cc\uc57d, mut\ub97c \uc0ac\uc6a9\ud558\uac8c\ub418\uba74, type \ubcc0\uacbd\uc740 \ubd88\ud5c8 let mut spaces = \" \"; spaces = spaces.len(); // cause an error // constant (\uc0c1\uc218) // - constants use uppercase with underscores. // - constants must be computed at compile time. const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3; Built-in scalar data types Rust\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 scalar data type\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. i8, i16, i32, i64 // signed integer number (default: i32) u8, u16, u32, u64 // unsigned integer number isize, usize // architecture-dependent number f32, f64 // floating point number (default f64) bool // true, false boolean value char // A 21-bit integer represent a character // that's padded to be 32 bits wide for unicode &str // a string slice consists of characters. // This is immutable string data! (Read-only) String // It is mutable string data allocated to the heap area. Rust is a statically typed language. \ub530\ub77c\uc11c compiler\uac00 \ubaa8\ub4e0 \ubcc0\uc218\uc758 \uc815\ud655\ud55c data type\uc744 \uc54c\uc544\uc57c \ud568 let VAR: TYPE \uc73c\ub85c variable\uc758 type\uc744 \uba85\uc2dc println! \uc0ac\uc6a9\uc2dc data type suffix\ub97c \ucd94\uac00\ud574 compiler\uac00 type\uc744 \uc778\uc9c0\ud558\ub3c4\ub85d \uc785\ub825\ud574\uc57c \ud568. String is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text. This is not a built-in type. // Integer literal let _i = 1000; // i32 assigned by default let _i: i32 = 1000i32; // suffix for type direction let _i: i32 = 98_222; // = 98222 Decimal for visual separation let _i: i32 = 0xff; // Hex let _i: i32 = 0o77; // Octal let _i: i32 = 0b1111_0000; // Binary let _i: u8 = b'A'; // Byte (u8 only) // Float literal let _number_64 = 4.0; // compiler infers the value to use the default type f64 let _number_32: f32 = 5.0; // type f32 specified via annotation // All of the primitive number types in Rust support mathematical operations // like addition, subtraction, multiplication, and division. // When we call the println macro, we add the data type suffix // to each literal number to inform Rust about the data type. // Addition, Subtraction, and Multiplication println!(\"1 + 2 = {} and 8 - 5 = {} and 15 * 3 = {}\", 1u32 + 2, 8i32 - 5, 15 * 3); // Integer and Floating point division println!(\"9 / 2 = {} but 9.0 / 2.0 = {}\", 9u32 / 2, 9.0 / 2.0); // integer types let sum = 5 + 10; // addition let difference = 95.5 - 4.3; // subtraction let product = 4 * 30; // multiplication let quotient = 56.7 / 32.2; // division let remainder = 43 % 5; // remainder // floating point types let x = 2.0; // f64 let y: f32 = 3.0; // f32 // boolean type let t = true; let f: bool = false; // with explicit type annotation // character let c = 'z'; let z = '\u2124'; let heart_eyed_cat = '\ud83d\ude3b'; Char type Rust\u2019s char type is four bytes in size and represents a Unicode Scalar Value. Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. char type is a 21-bit integer represent a character that's padded to be 32 bits wide for unicode. Char literals use single quotes. 'C' Storing UTF-8 Encoded Text with Strings Compound Types Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays. Tuple Type Tuples have a fixed length: once declared, they cannot grow or shrink in size. let tup: (i32, f64, u8) = (500, 6.4, 1); // [Tuple destructuring] // To get the individual values out of a tuple ... let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {}\", y); // The value of y is: 6.4 // [Access a tuple element directly] let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2; \u2753 The tuple without any values, (), is a special type that has only one value, also written (). The type is called the unit type and the value is called the unit value. Expressions implicitly return the unit value if they don\u2019t return any other value. Array Type Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length. Arrays are useful when you want your data allocated on the stack rather than the heap. Flexible size array\uac00 \ud544\uc694\ud558\ub2e4\uba74 Vec<T> \ub97c \uc0ac\uc6a9 let a = [1, 2, 3, 4, 5]; let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; let a: [i32; 5] = [1, 2, 3, 4, 5]; // [Type; Length] let a = [3; 5]; // [3, 3, 3, 3, 3]\uc73c\ub85c \ucd08\uae30\ud654 // [Access an array element] let first = a[0]; let second = a[1]; // mutable\ud574\uc57c Arrary element \ubcc0\uacbd \uac00\ub2a5\ud568 let mut a = [1, 2, 3, 4, 5]; a[1] = 100; &str\uacfc String Type &str as a pointer to immutable string data. String literals are all of type &str. Functions fn keyward\ub97c \uc0ac\uc6a9 All letters of function names and variables are lowercase and underscores ( _ ) separate words. A set of parentheses and curly brackets are followed to the function name. In function signatures, you must declare the type of each parameter that you want to input. The function returns a concrete type: The Rust compiler needs to know how much space every function's return type requires. fn main() { another_function(5); print_labeled_measurement(5, 'h'); } fn another_function(x: i32) { println!(\"The value of x is: {}\", x); } fn print_labeled_measurement(value: i32, unit_label: char) { println!(\"The measurement is: {}{}\", value, unit_label); } fn four() -> i32 { 4; // error because it becomes a statement } fn five() -> i32 { 5 // no semicolon; return the value as an expression } fn six() -> i32 { // \uba85\uc2dc\uc801 \ubc18\ud658 return 6; // ok } fn seven() -> i32 { return 7 // ok } fn main() { let x = five(); println!(\"The value of x is: {}\", x); } Diverging functions Diverging functions never return. They are marked using ! , which is an empty type. server\ub4f1\uc758 non-terminated app\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub420 \ub4ef ... fn foo() -> ! { panic!(\"This call never returns.\"); } Associated function indication :: let mut guess = String::new(); The :: syntax in the ::new line indicates that new is an associated function of the String type. An associated function is a function that\u2019s implemented on a type, in this case String. closure Closures are functions that can capture the enclosing environment. For example, a closure that captures the x variable: |val| val + x capturing and bollowing : closure \ud568\uc218\uac00 variable\uc5d0 \ud560\ub2f9\ub420 \ub54c \ub3d9\uc77c namespace\uc5d0 \uc788\ub294 \ubcc0\uc218\ub97c capture\ud558\uc5ec \uc0ac\uc6a9\ud568 by reference: &T by mutable reference: &mut T by value: T move \uc0ac\uc6a9\uc2dc variable\uc758 ownership\uc744 \uac00\uc838\uac10 e.g. let contains = move |needle| haystack.contains(needle); input & output parameter\ub85c \uc0ac\uc6a9\uac00\ub2a5 type bound\uc5d0 \uc544\ub798\uc640 \uac19\uc740 argument function\uc758 trait\uc744 \uc9c0\uc815\ud574\uc57c \ud568 Fn : the closure uses the captured value by reference ( &T ) FnMut : the closure uses the captured value by mutable reference ( &mut T ) FnOnce : the closure uses the captured value by value ( T ) iterator \ub3d9\uc791\uc744 \uad6c\ud604\ud560 \ub54c \uc0ac\uc6a9 e.g. Iterator::any // Increment via closures and functions. fn function(i: i32) -> i32 { i + 1 } // Closures are anonymous, here we are binding them to references // Annotation is identical to function annotation but is optional // as are the `{}` wrapping the body. These nameless functions // are assigned to appropriately named variables. let closure_annotated = |i: i32| -> i32 { i + 1 }; let closure_inferred = |i| i + 1; let mut i = 1; i = function(i); // 2 i = closure_annotated(i); // 3 i = closure_inferred(i); // 4 println!(\"closure example i: {}\", i); // let i = 1; // Call the function and closures. println!(\"function: {}\", function(i)); // 5 println!(\"closure_annotated: {}\", closure_annotated(i)); // 5 println!(\"closure_inferred: {}\", closure_inferred(i)); // 5 // A closure taking no arguments which returns an `i32`. // The return type is inferred. let one = || 1; println!(\"closure returning one: {}\", one()); use std::mem; let color = String::from(\"green\"); // bollow immutable reference of the color variable. let print = || println!(\"`color`: {}\", color); print(); let _reborrow = &color; print(); // A move or reborrow is allowed after the final use of `print` let _color_moved = color; // print(); // \ud638\ucd9c \ubd88\uac00; color already moved to _color_moved let mut count = 0; // bollow mutable count reference. let mut inc = || { count += 1; println!(\"`count`: {}\", count); }; // Call the closure using a mutable borrow. inc(); // The closure no longer needs to borrow `&mut count`. Therefore, it is // possible to reborrow without an error let _count_reborrowed = &mut count; // `consume` consumes the variable so this can only be called once. let movable = Box::new(3); let consume = || { println!(\"`movable`: {:?}\", movable); mem::drop(movable); }; consume(); // consume(); // \ud638\ucd9c \ubd88\uac00; The bollowed variable is not available. // ^ TODO: Try uncommenting this line. // move \uc0ac\uc6a9\uc2dc ownership\uc744 \uac00\uc838\uac10 let haystack = vec![1, 2, 3]; let contains = move |needle| haystack.contains(needle); println!(\"{}\", contains(&1)); // Functional approach let sum_of_squared_odd_numbers: u32 = (0..).map(|n| n * n) // All natural numbers squared .take_while(|&n_squared| n_squared < upper) // Below upper limit .filter(|&n_squared| is_odd(n_squared)) // That are odd .fold(0, |acc, n_squared| acc + n_squared); // Sum them println!(\"functional Approach: {}\", sum_of_squared_odd_numbers); Call chaining using closure // call chaining using closure fn is_odd(n: u32) -> bool { n % 2 == 1 } let upper = 1000; let sum_of_squared_odd_numbers: u32 = (0..) .map(|n| n * n) // All natural numbers squared .take_while(|&n_squared| n_squared < upper) // Below upper limit .filter(|&n_squared| is_odd(n_squared)) // That are odd .fold(0, |acc, n_squared| acc + n_squared); // Sum them println!(\"functional Approach: {}\", sum_of_squared_odd_numbers); Statements and expressions Rust\ub294 Statement\uc640 expression\uc758 \uad6c\ubd84\uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ud655\ud568. Statements are instructions that perform some action and do not return a value. Expressions evaluate to a resulting value and return the result value. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value. javascript\uc640 \uc720\uc0ac\ud558\uac8c \uc138\ubbf8\ucf5c\ub860( ; ) \uc5c6\uc774 function \ub9c8\uc9c0\ub9c9 \ubb38\uc7a5\uc774 \ub05d\ub098\uba74, \uadf8 \ub9c8\uc9c0\ub9c9 \uacb0\uacfc\ub97c \ubc18\ud658\ud568 (as an expression) Expressions in rust: function call, value, {} (\ube14\ub85d) fn main() { // error \ubc1c\uc0dd let y\ub294 return value \uc5c6\uc74c // expression\uc774 \uc544\ub2c8\ubbc0\ub85c x\uc5d0 binding \ubd88\uac00 let x = (let y = 6); // 4\ub85c \ud310\uc815\ub41c {} \uc548\uc758 \uac12\uc774 y\uc5d0 \ud560\ub2f9 // x + 1\uc5d0\ub294 \uc138\ubbf8\ucf5c\ub860(;) \uc774 \uc5c6\uc73c\uba70 expression\uc73c\ub85c \ud310\uc815, \uac12\uc744 \ubc18\ud658 let y = { let x = 3; x + 1 }; println!(\"The value of y is: {}\", y); } Control flow if..else : condition\uc740 \ubc18\ub4dc\uc2dc boolean\uc744 \ubc18\ud658\ud574\uc57c \ud568 parenthesis () \ub294 \uc0ac\uc6a9\uc548\ud568 arms : \uac08\ub798?; condition\uc5d0 \ub530\ub77c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ube14\ub85d\uc744 \ub9d0\ud568 let \ud560\ub2f9 \uc5f0\uc0b0 ( = )\uc5d0 if..else \uc0ac\uc6a9 \uac00\ub2a5 let number = 6; if number % 4 == 0 { println!(\"number is divisible by 4\"); } else if number % 3 == 0 { println!(\"number is divisible by 3\"); } else if number % 2 == 0 { println!(\"number is divisible by 2\"); } else { println!(\"number is not divisible by 4, 3, or 2\"); } if number { // error - expected bool, found integral variable println!(\"number was three\"); } // let number = if condition > 4 { if condition > 8 { 11 } else { 5 } } else { 3 }; println!(\"The value of number is: {}\", number); // 5 loop , while and for loop { println!(\"again!\"); // ... break; } let mut number = 3; while number != 0 { println!(\"{}!\", number); number = number - 1; println!(\"LIFTOFF!!!\"); } let a = [10, 20, 30, 40, 50]; for element in a.iter() { // for\ubb38 \ub0b4\uc5d0\uc11c element \uc0ad\uc81c\ud574\ub3c4 panic X println!(\"the value is: {}\", element); } // range for number in (1..4).rev() { println!(\"{}!\", number); } println!(\"LIFTOFF!!!\"); match fn main() { // Destructuring values in match // - rust\ub294 \ubcf5\uc7a1\ud55c type\uc744 match\ub85c wrapping structure\ub97c \ubc97\uaca8\ub0b4\uc5b4 \ucc98\ub9ac\ud568 // - destructuring type\uc774 \ub2e4\ub97c \uacbd\uc6b0 match, if let \ud560\ub2f9 \ubd88\uac00 // - destructuring let member = 13; match member { 1 => println!(\"1\"), 2 | 3 | 4 => println!(\"2,3,4\"), 5..=10 => println!(\"5..10\"), _ => println!(\"_\") } // tuple let triple = (0, 1, -3); match triple { (0, y, z) => println!(\"{},{}\", y, z), (1, ..) => println!(\"first is 1\"), // .. ignore the rest _ => println!(\"??\") } // arrays/slices let array = [3, -2, 6]; match array { [0, second, third] => { println!(\"second {}, thrid {}\", second, third); } [1, _, third] => println!(\"thrid {}\", third), // ignore a value with _ // The code below would not compile // [-1, second] => println!(\"compile error\"), // store middle values to another array/slice [3, middle @.., last] => println!(\"{:?} {:?}\", middle, last), _ => () } // enums #[allow(dead_code)] #[derive(Debug)] enum Color { Red, Blue, Green, RGB(u32, u32, u32), CMYK(u32, u32, u32, u32) } let color = Color::RGB(122, 17, 40); match color { Color::Red => println!(\"The color is Red!\"), Color::Blue => println!(\"The color is Blue!\"), Color::Green => println!(\"The color is Green!\"), Color::RGB(r, g, b) => println!(\"Red: {}, green: {}, and blue: {}!\", r, g, b), Color::CMYK(c, m, y, k) => println!(\"Cyan: {}, magenta: {}, yellow: {}, key (black): {}!\", c, m, y, k), // all matching case must be in the scope. } // pointers/ref // dereference in matching let reference: &u32 = &4; match reference { &val => println!(\"{:?}\", val) // if matched, it drops `&` } // To avoid the `&`, you dereference before matching. match *reference { val => println!(\"{:?}\", val) } let _not_a_reference = 3; let ref _is_a_reference = 3; // &i32; explicit reference let value = 5; let mut mut_value = 6; let rr = match value { // create the reference of r ref r => r }; println!(\"{:?}, {:?}\", value, rr); match mut_value { ref mut m => { // Got a reference. Gotta dereference it before we can add anything to it. *m += 10; println!(\"We added 10. `mut_value`: {:?}\", m); }, } // structs #[allow(dead_code)] struct Foo { x: (u32, u32), y: u32 } let foo = Foo {x: (10, 20), y: 30}; match foo { Foo { x: (1, b), y: c } => println!(\"b={:?} c={:?}\", b, c), Foo {y, ..} => println!(\"y={:?}, others=Don't Care\", y) // match any values } // Guards let pair = (3, 1); match pair { (x, y) if x == y => println!(\"Twins!\"), (x, _) if x%2 == 1 => println!(\"The first odd!\"), _ => println!(\"no correlation ...\") } // binding to a value with inclusive range let num = 3; // @1..=10 inclusive range \uc0ac\uc6a9\ud574\uc57c \ud568 // exclusive range = @1..10 match num { n @1..=10 => println!(\"num in 1..10 {}\", n), n => println!(\"num {}\", n) } // binding to an enum variant value #[allow(dead_code)] fn some_number() -> Option<u32> { Some(42) } match some_number() { Some(n @ 42) => println!(\"Binding to an enum variant with value {:?}\", n), Some(n) => println!(\"Binding to an enum variant {:?}\", n), _ => () } // match assign let option = Some(10); let i = match option { Some(i) => i, _ => panic!(\"?\"), }; println!(\"{}\", i); // if let let num = Some(7); let letter: Option<i32> = None; // let emotion: Option<i32> = None; if let Some(i) = num { println!(\"i = {}\", i); } else { println!(\"destructuring failed ...\"); } // match any enum value using if let if let None = letter { println!(\"letter is None\"); } if let Color::Blue = color { println!(\"Blue\"); } else if let Color::RGB(x, _, z @1..=100) = color { println!(\"x={}, z={}\", x, z); } else { println!(\"{:?}\", color); } // while let let mut optional = Some(0); while let Some(i) = optional { if i > 9 { optional = None; } else { optional = Some(i+ 1); } } optional = Some(0); loop { // while let\uacfc \ub3d9\uc77c \ub3d9\uc791 match optional { Some(i) => { if i > 9 { optional = None; } else { optional = Some(i+1); } }, _ => break } } } Result type Rust\ub294 result type\uc740 \uc5f4\uac70\ud615(enumerations)\uc758 \uc5d0\ub7ec\ucc98\ub9ac \uc815\ubcf4 variants: enumeration data // io::Result pub type Result<T> = Result<T, Error>; // std::result::Result Enum std::result::Result pub enum Result<T, E> { Ok(T), Err(E), } Reference methods Rust\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 struct\uc640 method\ub97c \uc815\uc758\ud55c\ub2e4. #[derive(Debug)] struct Rectangle { width: u32, height: u32, } impl Rectangle { // method definition in implement block fn area(&self) -> u32 { self.width * self.height } // Associated Functions fn square(size: u32) -> Rectangle { Rectangle{ width: size, height: size, } } } fn main() { let scale = 2; let rect = Rectangle { width: dbg!(30 * scale), height: 50, }; // dbg! return the ownership of the input object let rect = dbg!(rect); println!( \"The area of the rectangle {:?} is {} square pixels.\", rect, rect.area() ); let square = Rectangle::square(100); let rect1 = Rectangle { height: 50, width: 30 }; let rect2 = Rectangle { height: 40, width: 10 }; let rect3 = Rectangle { height: 45, width: 60 }; println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2)); println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3)); println!(\"Can square hold rect1? {}\", square.can_hold(&rect1)); } The &self is actually short for self: &Self . mutable \uc120\uc5b8\uc2dc, &mut self , field \uc218\uc815 \uac00\ub2a5 Note that the entire instance must be mutable; Rust doesn\u2019t allow us to mark only certain fields as mutable. Associated Function\uc740 self\uac00 \uc5c6\ub294 \uad00\ub828 \ud568\uc218 (class \ud568\uc218\uc640 \uc720\uc0ac), \uc0dd\uc131\uc790 \ud568\uc218\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9 Associated Function\uc740 struct\uc5d0 \ub300\ud55c namespace syntax( :: )\ub85c \uc811\uadfc/\uc0ac\uc6a9 \uac00\ub2a5 \ub2e4\uc218\uc758 impl block \uc0ac\uc6a9 \uac00\ub2a5 Field Init Shorthand \uc0dd\uc131\ud568\uc218\uc5d0\uc11c field name\uacfc function argument\uc744 \ub3d9\uc77c\ud558\uac8c \uc785\ub825\ud558\uc5ec \uc9e7\uac8c \uc4f0\ub294 \ubc29\ubc95 fn build_user(email: String, username: String) -> User { User { email, // field init shorthand username, active: true, sign_in_count: 1, } } Struct Update Syntax \uc55e\uc11c \uc0ac\uc6a9\ud55c \uc778\uc2a4\ud134\uc2a4\uc758 \uac12\uc744 \uc0ac\uc6a9\ud574 \uad6c\uc870\uccb4 \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ubc29\ubc95 fn main() { // --snip-- let user1 = User { // init ... }; let user2 = User { email: String::from(\"another@example.com\"), ..user1 // user1\uc758 \uac12\uc73c\ub85c structure update }; } Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the \u201cWays Variables and Data Interact: Move\u201d section. In this example, we can no longer use user1 after creating user2 because the String in the username field of user1 was moved into user2. The types of active and sign_in_count are types that implement the Copy trait, so the behavior we discussed in the \u201cStack-Only Data: Copy\u201d section would apply. Tuple Structs Tuple\uacfc \uc720\uc0ac\ud55c \uad6c\uc870\uccb4\ub85c filed name\uc774 \uc5c6\uc774 field type\ub9cc\uc744 \uc815\uc758\ud55c \uad6c\uc870\uccb4 Named tuple struct Color(i32, i32, i32); struct Point(i32, i32, i32); fn main() { let black = Color(0, 0, 0); let origin = Point(0, 0, 0); } Generics Generics is the topic of generalizing types and functionalities to broader cases. This is extremely useful for reducing code duplication in many ways, but can call for rather involved syntax. Generic type : Generic type parameter <T> \uac00 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 type Concrete type : generic type parameter\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 (type\uc774 \uba85\uc2dc\ub41c) \ubaa8\ub4e0 type Generic bounds : Generic type\uc774 \uac00\uc838\uc57c \ud560 type\uc758 \ud2b9\uc131\uc744 \uaddc\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9 <T: Bounds> ; \uc8fc\ub85c trait\uc774 bound\ub85c \uc4f0\uc784 e.g. fn printme<T: std::fmt::Debug> (x: T) It places further constraints on the kind of the Generic types. where can also be used to apply bounds in some cases to be more expressive. Multiple generic bounds : Multiple bounds for a single type can be applied with a + . Like normal, different types are separated with , . e.g. fn compare_prints<T: Debug + Display>(t: &T) Associated types : trait generics\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 type\uc744 \uc815\uc758\ud558\uc5ec \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95 Good Aricle: Using Generic Types in Rust The combination of generics and traits in Rust gives us the same kind of flexibility that we are seeking in a dynamically typed language, but without any of the runtime tradeoffs. Generic Type struct A; // A concrete type struct Single(A); // A concrete type; a tuple structure struct SingleGen<T>(T); // A generic type let _char: SingleGen<char> = SingleGen('a'); let _t = SingleGen(A); // Uses `A` defined at the top. let _i32 = SingleGen(6); // Uses `i32`. let _char = SingleGen('a'); // Uses `char`. Generic functions fn foo<T>(arg: T) { ... } fn bar(s: SGen<A>) { ... } // not a generic function generic::<char>(SGen('a')); // call with explicitly specified type parameters generic(SGen('c')); // call with implicitly specified type parameters Generic Implementations (Generic methods) struct S; // Concrete type `S` struct GenericVal<T>(T); // Generic type `GenericVal` // implementation \uc120\uc5b8\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 type\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc74c impl GenericVal<f32> {} // Specify `f32` impl GenericVal<S> {} // Specify `S` as defined above // `<T>` Must precede the type to remain generic impl<T> GenericVal<T> {} impl<T> Point<T> { fn x(&self) -> &T { &self.x } } // NewStruct doesn't use any generic types, // so we don't need to specify any here. struct NewStruct {} impl NewStruct { // We can still, however, define our own generic parameters // on an individual method as desired fn x<T>(&self, foo: T) -> T { foo } } Bounds Where clause Where clause\ub294 generic bound\uc5d0\uc11c \uc120\ud589 \ud45c\ud604\ub418\ub294 \ubcf5\uc7a1\ud55c type \uc815\uc758\ub97c \ud6c4\uc704\uc5d0 \ud45c\ud604\ud558\uc5ec \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95 // \uc120\ud589 \ud45c\ud604 impl<K:Hash+Eq,V> HashMap<K, V> {} // \ud6c4\uc704 \ud45c\ud604 with where impl<K,V> HashMap<K, V> where K : Hash + Eq {} impl <A: TraitB + TraitC, D: TraitE + TraitF> MyTrait<A, D> for YourType {} // Expressing bounds with a `where` clause impl <A, D> MyTrait<A, D> for YourType where A: TraitB + TraitC, D: TraitE + TraitF {} Rust RFC for where Associated types The use of \"Associated types\" improves the overall readability of code by moving inner types locally into a trait as output types. Syntax for the trait definition is as follows: // TRAIT = TRAIT_HEADER '{' TRAIT_ITEM* '}' // TRAIT_ITEM = // ... <existing productions> // | 'const' IDENT ':' TYPE [ '=' CONST_EXP ] ';' // | 'type' IDENT [ ':' BOUNDS ] [ WHERE_CLAUSE ] [ '=' TYPE ] ';' // | 'lifetime' LIFETIME_IDENT ';' trait Graph { type N: Show + Hash; type E: Show + Hash; ... } impl Graph for MyGraph { // Both MyNode and MyEdge must implement Show and Hash type N = MyNode; type E = MyEdge; ... } fn print_nodes<G: Graph>(g: &G) { // here, can assume G::N implements Show ... } https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md Phantom type parameters phantom-data Phantom type parameters Traits A trait is a collection of methods defined for an unknown type: Self . They can access other methods declared in the same trait. Traits can be implemented for any data type. Derive: Operation overloading Fn , FnMut , and FnOnce traits for types that can be invoked like functions + , += , - , * , / ... for operator traits Drop : The Drop trait only has one method: drop , which is called automatically when an object goes out of scope. The main use of the Drop trait is to free the resources that the implementor instance owns. Box , Vec , String , File , and Process : the types implemented the Drop trait Iterators : The Iterator trait is used to implement iterators over collections such as arrays. fn next(&mut self) -> Option<Self::Item> \uad6c\ud604\ud574\uc57c \ud568 dyn Trait: https://doc.rust-lang.org/rust-by-example/trait/dyn.html impl Trait: https://doc.rust-lang.org/rust-by-example/trait/impl_trait.html Copy Trait: \ud560\ub2f9\uc2dc resource move\uac00 \uc544\ub2cc copy Clone Trait: .clone() \uc73c\ub85c \uba85\uc2dc\uc801\uc73c\ub85c copy Supertraits: Rust doesn't have \"inheritance\", but you can define a trait as being a superset of another trait. Disambiguating overlapping traits https://cotigao.medium.com/dyn-impl-and-trait-objects-rust-fd7280521bea https://modoocode.com/334 To be considered Integer Overflow: https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow \uc5ed\ucc38\uc870 \uac15\uc81c(deref coercion) collections Box, stack and heap All values in Rust are stack allocated by default. Values can be boxed (allocated on the heap) by creating a Box<T> . A box is a smart pointer to a heap allocated value of type T . When a box goes out of scope, its destructor is called, the inner object is destroyed, and the memory on the heap is freed. use std::mem; #[derive(Debug)] #[allow(dead_code)] struct Point { x: f64, y: f64, } #[derive(Debug)] #[allow(dead_code)] struct Rectangle { top_left: Point, bottom_right: Point, } fn origin() -> Point { Point { x: 0f64, y: 0f64 } } fn boxed_origin() -> Box<Point> { // allocate a point to heap return Box::new(Point { x: 0.0, y: 0.0 }); } // stack allocated variables let point: Point = origin(); let rectangle: Rectangle = Rectangle { top_left: origin(), bottom_right: Point { x: 100.0, y: 100.0 }, }; // heap allocated variables let box_point: Box<Point> = Box::new(origin()); let box_rectangle: Box<Rectangle> = Box::new(Rectangle { top_left: origin(), bottom_right: Point { x: 200.0, y: 200.0 }, }); // inner box in stack let doubleIndirectBox: Box<Box<Point>> = Box::new(boxed_origin()); println!(\"{point:?}\"); println!( \"Point occupies {} bytes on the stack\", mem::size_of_val(&point) ); println!( \"Rectangle occupies {} bytes on the stack\", mem::size_of_val(&rectangle) ); // box size == pointer size println!( \"Boxed point occupies {} bytes on the stack\", mem::size_of_val(&box_point) ); println!( \"Boxed rectangle occupies {} bytes on the stack\", mem::size_of_val(&box_rectangle) ); println!( \"Boxed box occupies {} bytes on the stack\", mem::size_of_val(&doubleIndirectBox) ); // Copy the data contained in `boxed_point` into `unboxed_point` let unboxed_point: Point = *box_point; println!( \"Unboxed point occupies {} bytes on the stack\", mem::size_of_val(&unboxed_point) ); String to_string() : Display trait\uc774 \uad6c\ud604\ub41c \ubaa8\ub4e0 type\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5 + \uc5f0\uc0b0\ub3d9\uc791 \ucd94\ucc9c X String\uc758 index \uc811\uadfc \uae08\uc9c0\ub428 \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() \uacfc \uac19\uc774 \ubb38\uc790\uc18c(grapheme)\ub85c \uc811\uadfc\ud574\uc57c \ud568 let data = \"initial contents\"; let s = data.to_string(); // the method also works on a literal directly: let s = \"initial contents\".to_string(); let s = String::from(\"initial contents\"); // \uc704\uc640 \ub3d9\uc77c let mut s = String::from(\"foo\"); s.push_str(\"bar\"); let mut s = String::from(\"lo\"); s.push('l'); let s1 = String::from(\"Hello, \"); let s2 = String::from(\"world!\"); let s3 = s1 + &s2; // s1\uc740 \uc5ec\uae30\uc11c \uc774\ub3d9\ub418\uc5b4 \ub354\uc774\uc0c1 \uc4f8 \uc218 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\uc138\uc694 let s1 = String::from(\"tic\"); let s2 = String::from(\"tac\"); let s3 = String::from(\"toe\"); let s = format!(\"{}-{}-{}\", s1, s2, s3); for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() { // \ubb38\uc790\uc18c \ubc18\ud658 println!(\"{}\", c); } for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\".bytes() { // byte \ubc18\ud658 println!(\"{}\", b); } hash map Useful code or crates Read stdin use std::io; // ... // Read a string from stdin let mut index = String::new(); io::stdin() .read_line(&mut index) .expect(\"Failed to read line\"); let index: usize = index .trim() .parse() .expect(\"Index entered was not a number\"); Modules Rust provides a powerful module system that can be used to hierarchically split code in logical units (modules), and manage visibility (public/private) between them. A module is a collection of items: functions, structs, traits, impl blocks, and even other modules. Rust\uc758 module\uc774\ub780 \ucf54\ub4dc\ub97c \uacc4\uce35\ud654/\uc870\uc9c1\ud654 (namespace)\ud558\uace0, pub(public) \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc811\uadfc\uc131 \uc81c\uc5b4\ud558\uc5ec, \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \ubc29\ubc95 mod my_mod { // module my_mod pub fn public_func() { // ... \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \uac00\ub2a5 } fn private_func() { // ... module \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \ubd88\uac00 // ... \uac19\uc740 module \ub0b4\uc5d0\uc120 \uc811\uadfc \uac00\ub2a5 } pub mod nested_mod { // module nested_mod pub(in crate::my_mod) fn nested_ { // ... crate::my_mode\uc5d0\uc11c\ub9cc public function } pub(self) fn fname { // ... pub(self) == private } pub(super) fn fname { // ... parent module\uc5d0\uc11c\ub9cc \ubcf4\uc784 } } pub(crate) fn public_function_in_crate() { // ... \uc18d\ud55c crate\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5 } } Macro Rust macro system\uc758 macro \uc885\ub958\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Declarative Macros Procedural Macros Function-like macros Derive mode macros Attribute macros Declarative Macros \ud754\ud788 \uc0ac\uc6a9\ud558\ub294 \"\uc120\uc5b8\uc801\" \ud615\ud0dc\uc758 \ub9e4\ud06c\ub85c\ub85c Rust\uc758 Declarative Macro\ub294 \ub2e8\uc21c \ubb38\uc790\uc5f4 \uce58\ud658\uc774 \uc544\ub2c8\ub77c Rust Abstract Syntax Tree\ub97c \uc9c1\uc811 \uc81c\uc5b4\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. macro_rules allows users to define syntax extension in a declarative way. MacroRule = MacroMatcher => MacroTranscriber \ub85c \uad6c\uc131, MacroRule \uc740 ; \uc73c\ub85c \uad6c\ubd84 Each macro by example has a name, and one or more rules. Each rule has two parts: a matcher, describing the syntax that it matches, and a transcriber, describing the syntax that will replace a successfully matched invocation. Both the matcher and the transcriber must be surrounded by delimiters. Macros can expand to expressions, statements, items (including traits, impls, and foreign items), types, or patterns. Transcribing : \ucc98\uc74c match\ub41c MacroMatcher\uc758 MacroTranscriber\ub85c code \ubcc0\ud658\ud558\uace0 \ubabb\ucc3e\uac70\ub098 \uc624\ub958 \ubc1c\uc0dd\uc2dc \uc911\ub2e8 () , [] , {} \ubaa8\ub4e0 \uad04\ud638\ub294 MacroMatch, MacroRule\uc5d0\uc11c \ubaa8\ub450 \uc0ac\uc6a9\uac00\ub2a5 Procedural Macros \ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 macro \ud568\uc218\ub97c \uc2e4\ud589\uc2dc\ucf1c \ucf54\ub4dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ub9e4\ud06c\ub85c \ub85c #[proc_macro] \ub85c \uc120\uc5b8\ub41c macro \ud568\uc218\ub294 \ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 TokenStream\uc744 \ubc1b\uc544 TokenStream\uc744 \ucd9c\ub825\ud558\uace0, \uadf8 \ucd9c\ub825\ub41c TokenStream\uc73c\ub85c \ucf54\ub4dc\ub97c \uce58\ud658\ud574 \ucef4\ud30c\uc77c\ud558\ub294 \ub9e4\ud06c\ub85c\uc774\ub2e4. Procedural Macro\ub97c \uc0ac\uc6a9\ud574 \uc6d0\ubcf8 \ucf54\ub4dc\uc5d0\ub294 \uc5c6\ub294 \ud568\uc218\ub97c \uc0dd\uc131\ud558\uac70\ub098 (function generation), macro\ub85c \uc815\uc758\ub41c namespace block\uc744 TokenStream\uc73c\ub85c \ubc1b\uc544 \ud574\ub2f9 block\uc744 \uce58\ud658\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791\uc744 \ud1b5\ud574 compile time\uc5d0 Python\uc758 decorator\uc640 \uac19\uc740 \ud568\uc218\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub2e4. \ucd94\uac00 \uc815\ubcf4\ub294 good article for rust macro \uc5d0 \ub108\ubb34 \uc798 \uc124\uba85\ub418\uc5b4 \uc788\uc5b4 \uc0dd\ub7b5\ud55c\ub2e4. Links for macro good article for rust macro macros-by-example Rust by example Testing #[test] \ud568\uc218\uac00 test\ud568\uc218\uc784\uc744 \uc120\uc5b8 cargo test -- --nocapture --test-threads=1 cargo test -- -h \uc73c\ub85c testing option \ud655\uc778\ud574\ubcf4\uae30 cargo test TESTNAME : \ub2e8\uc77c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \uc2e4\ud589 cargo test -- --ignored : #[ignore] \ub85c \uc124\uc815\ub41c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \ud14c\uc2a4\ud2b8 unit test\ub294 mod test \ub9cc\ub4e4\uace0, #[cfg(test)] cfg attribute\ub97c \uc124\uc815\ud558\uc5ec \uad6c\uc131; cargo test \uc2dc\uc5d0\ub9cc \ucef4\ud30c\uc77c/\uc2e4\ud589 #[derive(Debug, PartialEq, Eq)] pub struct Rectangle { length: u32, width: u32, } impl Rectangle { pub fn can_hold(&self, other: &Rectangle) -> bool { self.length > other.length && self.width > other.width } } #[allow(dead_code)] fn add_two(a: i32) -> i32 { if a > 100 { panic!(\"value must be less than or equal to 100.\"); } a + 2 } #[cfg(test)] mod tests { use super::*; #[test] fn larger_can_hold_smaller() { let larger = Rectangle { length: 8, width: 7 }; let smaller = Rectangle { length: 5, width: 1 }; assert!(larger.can_hold(&smaller), \"{:?}\", larger); } #[test] fn smaller_cannot_hold_larger() { let larger = Rectangle { length: 8, width: 7 }; let smaller = Rectangle { length: 5, width: 1 }; assert!(!smaller.can_hold(&larger), \"{:?}\", smaller); } #[test] fn it_adds_two() { // assert_eq!\uc640 assert_ne!\ub294 // \uac01\uac01 ==\uacfc != \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud558\ubbc0\ub85c // PartialEq\uc640 Debug \ud2b8\ub808\uc787\uc744 \uad6c\ud604\ud574 \ud568 assert_eq!(4, add_two(2)); assert_ne!(4, add_two(3)); } #[test] #[should_panic] fn greater_than_100() { add_two(200); } #[test] #[should_panic(expected = \"value must be less than or equal to 100\")] fn greater_than_100_2() { add_two(200); } } Rust Attributes rust-by-example sjquant.tistory.com An attribute is metadata applied to some module , crate or item . This metadata can be used to/for: conditional compilation of code set crate name, version and type (binary or library) disable lints (warnings) enable compiler features (macros, glob imports, etc.) link to a foreign library mark functions as unit tests mark functions that will be part of a benchmark Scope #![crate_attribute] for a whole crate #[item_attribute] : for a module or item \ub2e4\ub978 \ubb38\uc11c\uc5d0\uc11c\ub294 #![Attr] : InnerAttribute\ub85c \uc120\uc5b8\ub41c \ubc94\uc704 \ub0b4\uc5d0 \uc801\uc6a9 #[Attr] : OuterAttribute\ub85c \uc120\uc5b8\uc774\ud6c4 \uc624\ub294 module, item\uc5d0 \uc801\uc6a9 Attribute arguments Attribute\ub294 Argument\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c #[attribute = \"value\"] #[attribute(key = \"value\")] #[attribute(value)] #[attribute(value, value2, value3, value4, value5)] Frequently Used Attributes #[allow(dead_code)] : used to disable linting of the following code block; the compiler option? #![crate_name = \"rary\"] : The library is named \"rary\" #![crate_type = \"lib\"] : This crate is a library; When the crate_type attribute is used, we no longer need to pass the --crate-type flag to rustc. #[cfg(target_os = \"linux\")] This function only gets compiled if the target OS is linux #[cfg(not(target_os = \"linux\"))] : And this function only gets compiled if the target OS is not linux \u2757 cfg! , unlike #[cfg] , it is a macro that does not remove any code and only evaluates to true or false. if cfg!(target_os = \"linux\") { println!(\"Yes. It's definitely linux!\"); } else { println!(\"Yes. It's definitely *not* linux!\"); } #[test] : used for functional test #[cfg_attr(a, b)] : \ub9cc\uc57d #[cfg(a)]\ub97c \ub9cc\uc871\ud558\uba74 #[b] attribute\ub97c \uc801\uc6a9 Custom cfg \uc0ac\uc6a9\uc790 cfg \ub3c4 \ub9cc\ub4e4 \uc218 \uc788\uc74c! #[cfg(mine)] fn cond_function() { println!(\"mine cond!!!\"); } #[cfg(not(mine))] fn cond_function() { println!(\"not mine cond!!!\"); } fn main() { cond_function(); } rustc --cfg mine main.rs && ./main RUSTFLAGS='--cfg mine' cargo run derive attribute \ud2b9\uc815\ud55c Trait\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uad6c\ud604(impl)\uc744 \uac04\ud3b8\ud558\uac8c \uc81c\uacf5 \uae30\ubcf8\uc801\uc778 \uad6c\ud604\uc740 \uc774\ubbf8 \uc815\ud574\uc838 \uc788\uc73c\uba70, \uc774\ub7f0 Trait\uc744 derivable \ud558\ub2e4\uace0 \ud568 derivable Trait: Eq , PartialEq , Copy , Clone , Debug ...? #[derive(PartialEq, Clone)] struct Foo<T> { a: i32, b: T, } The following is a list of derivable traits: Comparison traits: Eq , PartialEq , Ord , PartialOrd . Clone , to create T from &T via a copy. Copy , to give a type 'copy semantics' instead of 'move semantics'. Hash , to compute a hash from &T . Default , to create an empty instance of a data type. Debug , to format a value using the {:?} formatter. Keywords crate // \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 crate \uc120\uc5b8 extern crate rand; extern crate my_crate as thing; // the alias of my_crate in my project extern crate std; // implicitly added to the root of every Rust project // item\uc758 visibility\ub97c \ud604\uc7ac crate\uc5d0 \ud3ec\ud568\ub41c module\ub85c\ub9cc \ud55c\uc815 pub(crate) enum CoolMarkerType { } // The root of the current crate crate::foo::bar Good answer to understand whats-the-difference-between-self-and-self Why is the Sized bound necessary in this trait? Associated items This following RFC extends traits with associated items, which make generic programming more convenient, scalable, and powerful. In particular, traits will consist of a set of methods, together with: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md Associated functions (already present as \"static\" functions) Associated consts Associated types Associated lifetimes Rust RFC https://github.com/rust-lang/rfcs/tree/master/text FFI (Foreign Function Interface) \ub2e4\ub978 \uc5b8\uc5b4 \ucf54\ub4dc\uc5d0\uc11c rust \ud568\uc218\ub97c \ud638\ucd9c\ud558\uac70\ub098, rust \ucf54\ub4dc\uc5d0\uc11c \uc678\ubd80 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ubc29\ubc95 Calling foreign functions \uc544\ub798\uc640 \uac19\uc774 libc \ub294 crate\uc73c\ub85c \uad6c\ud604(wrapping)\ub418\uc5b4 \uc788\uc74c [dependencies] libc = \"0.2.0\" \uc678\ubd80 \ud568\uc218 \ucf54\ub4dc\ub294 safe\ud558\ub2e4 \uac00\uc815\ud558\uace0, unsafe \ub85c \uac10\uc2f8 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\uc9c0 \uc54a\uc74c wrapping \ud568\uc218\ub97c \ub9cc\ub4dc\ub294\uac8c \uc77c\ubc18\uc801\uc784 \uc678\ubd80 \ud568\uc218\uac00 \uc790\uc6d0 \ud574\uc81c\ub97c \ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \uc9c1\uc811 Drop trait\uc73c\ub85c \uc790\uc6d0 \ud574\uc81c\ud574\uc57c \ud568 use libc::{c_int, size_t}; #[link(name = \"snappy\")] // \uc678\ubd80 library extern { // library\ub0b4 \ud568\uc218 \ubaa9\ub85d fn snappy_compress(input: *const u8, input_length: size_t, compressed: *mut u8, compressed_length: *mut size_t) -> c_int; fn snappy_uncompress(compressed: *const u8, compressed_length: size_t, uncompressed: *mut u8, uncompressed_length: *mut size_t) -> c_int; fn snappy_max_compressed_length(source_length: size_t) -> size_t; fn snappy_uncompressed_length(compressed: *const u8, compressed_length: size_t, result: *mut size_t) -> c_int; fn snappy_validate_compressed_buffer(compressed: *const u8, compressed_length: size_t) -> c_int; } pub fn validate_compressed_buffer(src: &[u8]) -> bool { unsafe { snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0 } } pub fn compress(src: &[u8]) -> Vec<u8> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen = snappy_max_compressed_length(srclen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); snappy_compress(psrc, srclen, pdst, &mut dstlen); dst.set_len(dstlen as usize); dst } } pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen: size_t = 0; snappy_uncompressed_length(psrc, srclen, &mut dstlen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 { dst.set_len(dstlen as usize); Some(dst) } else { None // SNAPPY_INVALID_INPUT } } } #[cfg(test)] mod tests { use super::*; #[test] fn valid() { let d = vec![0xde, 0xad, 0xd0, 0x0d]; let c: &[u8] = &compress(&d); assert!(validate_compressed_buffer(c)); assert!(uncompress(c) == Some(d)); } #[test] fn invalid() { let d = vec![0, 0, 0, 0]; assert!(!validate_compressed_buffer(&d)); assert!(uncompress(&d).is_none()); } #[test] fn empty() { let d = vec![]; assert!(!validate_compressed_buffer(&d)); assert!(uncompress(&d).is_none()); let c = compress(&d); assert!(validate_compressed_buffer(&c)); assert!(uncompress(&c) == Some(d)); } } fn main() { let x = unsafe { snappy_max_compressed_length(100) }; println!(\"max compressed length of a 100 byte buffer: {}\", x); } Calling Rust code from C lib\uc77c \uacbd\uc6b0 C\uc5d0\uc11c \uc27d\uac8c rust \ud568\uc218\uc5d0 \uc811\uadfc \uac00\ub2a5\ud568 #[no_mangle] // turns off Rust's name mangling pub extern \"C\" fn hello_from_rust() { // extern \"C\"\ub85c C\uc5d0\uc11c \ud638\ucd9c\uac00\ub2a5\ud55c \ud615\uc2dd\uc73c\ub85c \ud568\uc218\uba85 \uc720\uc9c0 println!(\"Hello from Rust!\"); } Cargo.toml\uc5d0 C dynamic library \uba85\uc2dc (staticlib\ub3c4 \uac00\ub2a5) [lib] crate-type = [\"cdylib\"] int main(void) { hello_from_rust(); return 0; } Compile with -L and -l options: gcc call_rust.c -o call_rust -lrust_from_c -L./target/debug export \ub418\ub294 \ud568\uc218\uc758 C header file\uc758 \uc790\ub3d9 \uc0dd\uc131: https://github.com/eqrion/cbindgen \uac00\ubcc0 \uc778\uc790 \ud568\uc218 (variadic functions) ... \uc0ac\uc6a9\ud574 \ud45c\ud604, unsafe \ub85c validation skip extern { fn foo(x: i32, ...); } fn main() { unsafe { foo(10, 20, 30, 40, 50); } } Logging https://crates.io/crates/log \uc740 logging abstraction interface \ub9cc\uc744 \uc81c\uacf5\ud560 \ubfd0 log output\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub530\ub77c\uc11c https://crates.io/crates/log \uc758 In executables \uc5d0 logger\ub97c import\ud574\uc57c \uc2e4\uc81c log\ub97c \ud654\uba74\uc5d0 \ucd9c\ub825\ud560 \uc218 \uc788\ub2e4. [dependencies] log = \"0.4\" env_logger = \"0.9.0\" # \uae30\ubcf8 logger mod foo { mod bar { pub fn run() { log::warn!(\"[bar] warn\"); log::info!(\"[bar] info\"); log::debug!(\"[bar] debug\"); } } pub fn run() { log::warn!(\"[foo] warn\"); log::info!(\"[foo] info\"); log::debug!(\"[foo] debug\"); bar::run(); } } fn main() { env_logger::init(); log::warn!(\"[root] warn\"); log::info!(\"[root] info\"); log::debug!(\"[root] debug\"); foo::run(); } RUST_LOG \ub85c env_logger output\uc744 \ub044\uac70\ub098 \ucf24 \uc218 \uc788\uc73c\uba70, logging\uc740 module\uc758 \uacc4\uce35 \uad6c\uc870\uc5d0 \ub530\ub77c logging\ud560 target module\uc744 logging level\uacfc \ud568\uaed8 RUST_LOG\uc5d0 \uc9c0\uc815\ud558\uba74, log\uac00 \ucd9c\ub825\ub41c\ub2e4. RUST_LOG=\"warn,test::foo=info,test::foo::bar=debug\" ./test # Rust binary \uc774\uc678 \uc0ac\uc6a9\uc790\uc758 \ud658\uacbd\ubcc0\uc218 \uc124\uc815\uc5d0 \ub530\ub77c log\ub97c \ucf1c\uac70\ub098, log \ud3ec\ub9f7, log \uc800\uc7a5\uc704\uce58\ub4f1\uc744 \ubcc0\uacbd \uac00\ub2a5\ud558\ub2e4. \ucc3e\uc544 \ubcf4\ub3c4\ub85d! // \uc6b0\uc120\uc21c\uc704 \uc704 ==> \uc544\ub798 //! [`error!`] //! [`warn!`] //! [`info!`] //! [`debug!`] //! [`trace!`] lib.rs and main.rs rust library \uc791\uc131\uc2dc main.rs\ub97c \ud1b5\ud574 \ub3d9\uc791\ud655\uc778 \uac00\ub2a5 https://stackoverflow.com/questions/26946646/package-with-both-a-library-and-a-binary","title":"Rust"},{"location":"rust/#rust","text":"A language empowering everyone to build reliable and efficient software. Note \uc774 \ubb38\uc11c\ub294 rust-first-steps , rust-lang.org , rust-doc \uc744 \ubcf4\uace0 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4. Rust Why Rust? Performance Reliability Productivity Roadamp to improve Rust \ud2b9\uc131 \ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131 Rust module system Rust standard libary and useful crates How to use crates? Terms Latest version Rust installation Cargo Cargo versioning Cargo.toml (TOML file for cargo config) Cargo.lock Useful development tool Rust build tools Rustup & cargo command completion Rust Cookbook Helloworld with cargo How to add external crates Enabling rust backtrace Rust macro println! , print! todo! panic! dbg! Prelude (imported std libraries) Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c) References and Borrowing Comments Document comments Constants and Variables Built-in scalar data types Char type Compound Types Tuple Type Array Type &str\uacfc String Type Functions Diverging functions Associated function indication :: closure Call chaining using closure Statements and expressions Control flow if..else : loop , while and for match Result type Reference methods Field Init Shorthand Struct Update Syntax Tuple Structs Generics Generic Type Generic functions Generic Implementations (Generic methods) Bounds Where clause Associated types Phantom type parameters Traits To be considered collections Box, stack and heap String hash map Useful code or crates Read stdin Modules Macro Declarative Macros Procedural Macros Links for macro Testing Rust Attributes Scope Attribute arguments Frequently Used Attributes Custom cfg derive attribute Keywords crate Good answer to understand Associated items Rust RFC FFI (Foreign Function Interface) Calling foreign functions Calling Rust code from C \uac00\ubcc0 \uc778\uc790 \ud568\uc218 (variadic functions) Logging lib.rs and main.rs","title":"Rust"},{"location":"rust/#why-rust","text":"Performance Reliability Productivity","title":"Why Rust?"},{"location":"rust/#performance","text":"Rust is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages.","title":"Performance"},{"location":"rust/#reliability","text":"Rust\u2019s rich type system and ownership model guarantee memory-safety and thread-safety \u2014 enabling you to eliminate many classes of bugs at compile-time.","title":"Reliability"},{"location":"rust/#productivity","text":"Rust has great documentation, a friendly compiler with useful error messages, and top-notch tooling \u2014 an integrated package manager and build tool, smart multi-editor support with auto-completion and type inspections, an auto-formatter, and more.","title":"Productivity"},{"location":"rust/#roadamp-to-improve","text":"Building tools; \uc9c1\uad00\uc801\uc774\uace0 \uac04\ub2e8\ud55c building, packaging tool \uc9c0\uc6d0 Web\u00adAssembly (Writing Web Apps); Binary instruction set in web browsers Working with servers (server-side code) Embedded system\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \ud5a5\uc0c1","title":"Roadamp to improve"},{"location":"rust/#rust_1","text":"Open-source high-level and low-level system programming language Type safe : The compiler assures that no operation will be applied to a variable of a wrong type. Memory safe : Rust pointers (known as references) always refer to valid memory. Data race free : Rust's borrow checker guarantees thread-safety by ensuring that multiple parts of a program can't mutate the same value at the same time. Zero-cost abstractions : Rust allows the use of high-level concepts, like iteration, interfaces, and functional programming, with minimal to no performance costs. The abstractions perform as well, as if you wrote the underlying code by hand. Minimal runtime : Rust has a very minimal and optional runtime. The language also has no garbage collector to manage memory efficiently. In this way Rust is most similar to languages like C and C++. Targets bare metal : Rust can target embedded and \"bare metal\" programming, making it suitable to write an operating system kernel or device drivers.","title":"Rust \ud2b9\uc131"},{"location":"rust/#rust_2","text":"Variable\uacfc function type\uc744 \uadf9\ub3c4\ub85c \uc81c\uc5b4\ud558\uc5ec gabage collection\uc774 \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e6","title":"\ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131"},{"location":"rust/#rust-module-system","text":"Crates : It's the smallest piece of code the Rust compiler can run. Modules : A number of modules become a crate; Related code items or items that are used together Path : Paths to access and use the code or items in Rust Third-party crate registry: crates.io","title":"Rust module system"},{"location":"rust/#rust-standard-libary-and-useful-crates","text":"std - The Rust standard library. In the Rust exercises, you'll notice the following modules: std::collections - Definitions for collection types, such as HashMap. std::env - Functions for working with your environment. std::fmt - Functionality to control output format. std::fs - Functions for working with the file system. std::io - Definitions and functionality for working with input/output. std::path - Definitions and functions that support working with file system path data. structopt - A third-party crate for easily parsing command-line arguments. chrono - A third-party crate to handle date and time data. regex - A third-party crate to work with regular expressions. serde - A third-party crate of serialization and deserialization operations for Rust data structures.","title":"Rust standard libary and useful crates"},{"location":"rust/#how-to-use-crates","text":"use std::fmt","title":"How to use crates?"},{"location":"rust/#terms","text":"Wasm (WebAssembly) WebAssembly (abbreviated Wasm ) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications. WebAssembly is a new type of code that can be run in modern web browsers \u2014 it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together. Emscripten SDK - compile wasm code and generate javascript stub and wasm binary. Doc : \ud83d\udd17 WebAssembly","title":"Terms"},{"location":"rust/#latest-version","text":"Version 1.60.0","title":"Latest version"},{"location":"rust/#rust-installation","text":"# Install rust curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # Update rust rustup update # Uninstall rust rustup self uninstall vscode : \ud83d\udd17 ext install matklad.rust-analyzer vim : \ud83d\udd17 rust.vim All tools including rustc , cargo , and rustup are installed to the ~/.cargo/bin directory.","title":"Rust installation"},{"location":"rust/#cargo","text":"cargo is the rust build tool and package manager. cargo --version : check the rust version cargo new --vcs=git : create new project with git init cargo new cargo build : build your project with cargo run : run your project with cargo test : test your project with cargo check : checks your code to make sure it compiles but doesn\u2019t produce an executable cargo doc : build documentation for your project with cargo doc --open : \ud604\uc7ac crate\uc758 html \ubb38\uc11c \uc0dd\uc131 cargo publish : publish a library to crates.io with Add dependent crates to a project by adding the crate name to the Cargo.toml file. cargo fmt : reformats your code according to the community code style. cargo fix : Automatically fix lint warnings reported by rustc cargo install : $HOME/.cargo/bin \uc5d0 crate binary\ub97c \uc124\uce58 cargo install cargo-generate : make a new Rust project by leveraging a pre-existing git repository as a template. e.g. manual : \ud83d\udd17 cargo doc","title":"Cargo"},{"location":"rust/#cargo-versioning","text":"Cargo\ub294 \ubc84\uc804\uc744 \uba85\uc2dc\ud558\ub294 \ud45c\uc900\uc5d0 \ud574\ub2f9\ud558\ub294 Semantic Versioning(semver) \uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4. # Example rand = \"0.8.3\" The number 0.8.3 is actually shorthand for ^0.8.3, which means any version that is at least 0.8.3 but below 0.9.0.","title":"Cargo versioning"},{"location":"rust/#cargotoml-toml-file-for-cargo-config","text":"Cargo.toml : TOML\ub85c \uc815\uc758\ub41c cargo configuration file TOML's syntax primarily consists of key = \"value\" pairs, [section names], and # comments. TOML's syntax somewhat resembles that of .INI files, but it includes a formal specification, whereas the INI file format suffers from many competing variants. Its specification includes a list of supported data types: String, Integer, Float, Boolean, Datetime, Array, and Table. # This is a TOML document. title = \"TOML Example\" [owner] name = \"Tom Preston-Werner\" dob = 1979-05-27T07:32:00-08:00 # First class dates [database] server = \"192.168.1.1\" ports = [ 8000, 8001, 8002 ] connection_max = 5000 enabled = true [servers] # Indentation (tabs and/or spaces) is allowed but not required [servers.alpha] ip = \"10.0.0.1\" dc = \"eqdc10\" [servers.beta] ip = \"10.0.0.2\" dc = \"eqdc10\" [clients] data = [ [\"gamma\", \"delta\"], [1, 2] ] # Line breaks are OK when inside arrays hosts = [ \"alpha\", \"omega\" ]","title":"Cargo.toml (TOML file for cargo config)"},{"location":"rust/#cargolock","text":"go.sum \uacfc \uac19\uc774 \ub2e4\uc6b4\ub85c\ub4dc\ud55c crate (package)\uc5d0 \ub300\ud55c version\uacfc \uc815\ubcf4\ub97c \uba85\uc138\ud558\uc5ec, \uc774\ud6c4 \ub3d9\uc77c\ud55c crate version\uc73c\ub85c build\uc758 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud568. cargo update : crate\uc758 minor version\ub9cc \uc5c5\ub370\uc774\ud2b8\ud568; major version\uc744 \ubcc0\uacbd\ud558\ub824\uba74, Cargo.toml\uc758 major version\uc744 \uc5c5\ub370\uc774\ud2b8\ud574\uc57c \ud55c\ub2e4.","title":"Cargo.lock"},{"location":"rust/#useful-development-tool","text":"rustup component add rustfmt rustup component add clippy cargo fmt : rustfmt ; Automatic Formatting development tool cargo fix : Automatically fix lint warnings reported by rustc cargo clippy : clippy ; A collection of lints to analyze your code to catch common mistakes and improve your code.","title":"Useful development tool"},{"location":"rust/#rust-build-tools","text":"rustc : Rust compiler rustup : Rust toolchain installer; Rust tool manager rustc --version : check rust version rustc RUST_FILE.rs : build the rust binary \ub2e4\uc74c tool \ud655\uc778 \ud544\uc694 rustc , rustdoc , rustfmt , rust-gdb , rust-lldb , rustup","title":"Rust build tools"},{"location":"rust/#rustup-cargo-command-completion","text":"Rust build tool\uc5d0 \ub300\ud55c tab completion mkdir -p ~/.local/share/bash-completion/completions rustup completions bash rustup >> ~/.local/share/bash-completion/completions/rustup rustup completions bash cargo >> ~/.local/share/bash-completion/completions/cargo source ~/.local/share/bash-completion/completions/rustup source ~/.local/share/bash-completion/completions/cargo","title":"Rustup &amp; cargo command completion"},{"location":"rust/#rust-cookbook","text":"Rust crate\uc758 \uc885\ub958\ub97c \ubd84\ub958\ud55c cookbook\uc5d0\uc11c \ud544\uc694\ud55c library\ub97c \uac00\uc7a5 \uba3c\uc800 \ucc3e\uc790! \ud83d\udd17 Rust Cookbook","title":"Rust Cookbook"},{"location":"rust/#helloworld-with-cargo","text":"# create new project cargo new hello-rust cd hello-rust tree #. #\u251c\u2500\u2500 Cargo.toml # for the metadata and dependencies of the project #\u2514\u2500\u2500 src # rust code # \u2514\u2500\u2500 main.rs # fn main() is the starting point of all rust appliciations. cat src/main.rs # fn main() { # println!(\"Hello, world!\"); # } # Building and running cargo run # Compiling hello-rust v0.1.0 (/home/neoul/projects/programming-note/rust/hello-rust) # Finished dev [unoptimized + debuginfo] target(s) in 0.54s # Running `target/debug/hello-rust` # Hello, world! tree #. #\u251c\u2500\u2500 Cargo.lock # [FIXME] what is it? #\u251c\u2500\u2500 Cargo.toml #\u251c\u2500\u2500 src #\u2502 \u2514\u2500\u2500 main.rs #\u2514\u2500\u2500 target # \u251c\u2500\u2500 CACHEDIR.TAG # # \u2514\u2500\u2500 debug # \u251c\u2500\u2500 build # \u251c\u2500\u2500 deps # \u2502 \u251c\u2500\u2500 hello_rust-542ed0184760343f # \u2502 \u2514\u2500\u2500 hello_rust-542ed0184760343f.d # \u251c\u2500\u2500 examples # \u251c\u2500\u2500 hello-rust # \u251c\u2500\u2500 hello-rust.d # \u2514\u2500\u2500 incremental","title":"Helloworld with cargo"},{"location":"rust/#how-to-add-external-crates","text":"\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec \uc0ac\uc6a9\ubc95 # Edit Cargo.toml [dependencies] ferris-says = \"0.2\" // in rust code use ferris_says::say; cargo build : Cargo will install our dependency for us.","title":"How to add external crates"},{"location":"rust/#enabling-rust-backtrace","text":"Rust display the backtrace if running with RUST_BACKTRACE=1 . $ ./main .. $ RUST_BACKTRACE=1 ./main thread 'main' panicked at 'not yet implemented: To Do!', main.rs:2:5 stack backtrace: 0: rust_begin_unwind ... 2: main::main 3: core::ops::function::FnOnce::call_once note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.","title":"Enabling rust backtrace"},{"location":"rust/#rust-macro","text":"Rust macro\ub294 \uac1c\uc218\uac00 \uac00\ubcc0\uc801\uc778 \uc785\ub825 \uc778\uc218\ub97c \ucde8\ud558\ub294 \ud568\uc218 println! , print! todo! panic! dbg!","title":"Rust macro"},{"location":"rust/#println-print","text":"\uac00\ubcc0 \uc778\uc218\ub97c \ubc1b\uc544 stdout \uc5d0 \ucd9c\ub825 // - If it called a function instead, it would be entered as println (without the `!`). // - \"Hello, world!\": string representation of the string // - {}\uc5d0 \uc778\uc218\uc758 \uac12 \ub300\uccb4 \uc0bd\uc785; placeholder\ub77c \ubd80\ub984 println!(\"Hello, {}!\", \"world\");","title":"println!, print!"},{"location":"rust/#todo","text":"\uc644\uc131\ub418\uc9c0 \uc54a\uc740 \ud568\uc218\uc758 prototype \uc810\uac80 \ubc0f \uc120\uc5b8, \ud638\ucd9c\uc2dc exception \ubc1c\uc0dd // todo! - Display \"Hello, world!\" with an exception. fn main() { todo!(\"Display the message by using the println!() macro\"); }","title":"todo!"},{"location":"rust/#panic","text":"The call to panic! causes the error message contained in the last two lines. fn main() { panic!(\"crash and burn\"); }","title":"panic!"},{"location":"rust/#dbg","text":"Another way to print out a value using the Debug format is to use the dbg! macro, which takes ownership of an expression, prints the file and line number of where that dbg! macro call occurs in your code along with the resulting value of that expression, and returns ownership of the value. Note: print message to stderr . #[derive(Debug)] struct Rectangle { width: u32, height: u32, } fn main() { let scale = 2; let rect = Rectangle { width: dbg!(30 * scale), height: 50, }; let rect = dbg!(rect); println!( \"The area of the rectangle {:?} is {} square pixels.\", rect, area(&rect) ); } fn area(rect :&Rectangle) -> u32 { return rect.width * rect.height; } // [src/main.rs:16] 30 * scale = 60 // [src/main.rs:20] rect = Rectangle { // width: 60, // height: 50, // } // The area of the rectangle Rectangle { width: 60, height: 50 } is 3000 square pixels.","title":"dbg!"},{"location":"rust/#prelude-imported-std-libraries","text":"The prelude is the list of things that Rust automatically imports into every Rust program. \ud83d\udd17 Module std::prelude For example ... std::result::Result::{self, Ok, Err} , a type for functions that may succeed or fail. Like Option, its variants are exported as well. std::string::{String, ToString} , heap-allocated strings. std::vec::Vec , a growable, heap-allocated vector.","title":"Prelude (imported std libraries)"},{"location":"rust/#rust-ownership","text":"Rust\uc758 \ubaa8\ub4e0 \uac12\uc740 owner\ub77c\ub294 \ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \ud558\ub098\uc758 \uac12\uc740 \ud558\ub098\uc758 owner \ubcc0\uc218\uc5d0\ub9cc \uc885\uc18d\ub420 \uc218 \uc788\uc74c \ub9cc\uc57d, copy trait\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba74, deep copy\ub97c \uc218\ud589\ud558\ub098 \uc544\ub2cc \uacbd\uc6b0 ownership move\uac00 \uc77c\uc5b4\ub0a8(?) ownership move: \ub2e4\uc218\uc758 \ubcc0\uc218\uac00 \ud558\ub098\uc758 \uac12\uc744 \uac00\ub9ac\ud0ac \uc218 \uc5c6\uc73c\uba70, ownership move (\uc18c\uc720\uad8c \uc774\uc804)\uac00 \uc218\ud589\ub428 owner\uac00 \uc885\uc18d \ubc94\uc704 (curly bracket)\uc744 \ubc97\uc5b4\ub098\uba74, drop (free)\ub428 (C++ RAII \ud328\ud134) let s1 = String::from(\"hello\"); let s2 = s1; // String\uc740 copy trait\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc544 ownership move\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774\ud6c4 s1\uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc624\ub958 \ubc1c\uc0dd // error[E0382]: use of moved value: `rect` \ubc1c\uc0dd \ud568\uc218\uc5d0 \uac12\uc744 \uc778\uc790\ub85c \ub118\uae38 \uacbd\uc6b0 ownership\ub3c4 \ubcc0\uacbd\ub428 deep copy: copy trait\uc774 \uad6c\ud604\ub41c structure\ub098 built-in scalar\ub294 deep copy\ub97c \uc218\ud589\ud568 shallow copy: rust\uc5d0\uc11c\ub294 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc74c heap\uc5d0 \ud560\ub2f9\ub418\ub294 \uac00\ubcc0 (mutable)\uc758 structure\ub294 \ubcf4\ud1b5 reference\ub85c ownership \uad00\ub9ac\ub97c \ud68c\ud53c Here are some of the types that implement Copy: All the integer types, such as u32 . The Boolean type, bool , with values true and false. All the floating point types, such as f64 . The character type, char . Tuples , if they only contain types that also implement Copy. For example, (i32, i32) implements Copy, but (i32, String) does not. https://velog.io/@timothy160620/Learning-Rust https://showx123.tistory.com/81","title":"Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c)"},{"location":"rust/#references-and-borrowing","text":"fn main() { let mut s = String::from(\"hello\"); change(&mut s); } fn change(some_string: &mut String) { some_string.push_str(\", world\"); } Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, * . We\u2019ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.","title":"References and Borrowing"},{"location":"rust/#comments","text":"In Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line. // Hello, world.","title":"Comments"},{"location":"rust/#document-comments","text":"Rust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. Documentation comments use three slashes, /// , instead of two and support Markdown notation for formatting the text. /// Adds one to the number given. /// /// # Examples /// /// ``` /// let arg = 5; /// let answer = my_crate::add_one(arg); /// /// assert_eq!(6, answer); /// ``` pub fn add_one(x: i32) -> i32 { x + 1 } Another style of doc comment, //! , is used to describe the crate introduction. //! # My Crate //! //! `my_crate` is a collection of utilities to make performing certain //! calculations more convenient. [FIXME] document comments \ub2e4\uc2dc \uc77d\uae30","title":"Document comments"},{"location":"rust/#constants-and-variables","text":"A value is not assigned, it is binded to a variable. python\uacfc \uac19\uc740 bind \uac1c\ub150\uc744 \ucc28\uc6a9\ud568 Constants must be computed at compile time. The equal sign ( = ) tells Rust we want to bind something to the variable now. // \ud568\uc218 \uc120\uc5b8 fn func() // \ubcc0\uc218 \uc120\uc5b8 let a_number; // \ubcc0\uc218\uc5d0 \uac12 \ubc14\uc778\ub529; variable binding to a value // variable binding == value assginment (\uac12\ud560\ub2f9) let a_number = 10; // \uac12\uc774 \ubc14\uc778\ub529\ub41c \ubcc0\uc218\ub294 \uac12 re-\ubc14\uc778\ub529 \ubd88\uac00\ub2a5!! a_number = 11; // mut (mutable, \ubcc0\ud560 \uc218 \uc788\ub294)\ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0 let mut b_number = 10; // variable binding \ubcc0\uacbd \uac00\ub2a5 b_number = 11; // variable shadowing (\ubcc0\uc218 \uc100\ub3c4\uc789) // let\uc73c\ub85c \ub3d9\uc77c\uba85\uc758 \ubcc0\uc218\ub97c \uacc4\uc18d \uc120\uc5b8\ud560 \uc218 \uc788\uc74c // \uc774\uac83\uc73c\ub85c \ubcc0\uc218\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uacfc \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c let x = 5; let x = x + 1; let x = x * 2; println!(\"The value of x is: {}\", x); // The value of x is: 12 // shardowing\uc73c\ub85c \ubcc0\uc218\uc758 type\uc774 \ubcc0\uacbd\ub418\ub294 \uac83\ucc98\ub7fc \ub3d9\uc791\uc2dc\ud0ac \uc218 \uc788\ub2e4. let spaces = \" \"; let spaces = spaces.len(); // space\ub294 interger\uac00 \ub428 // \ub9cc\uc57d, mut\ub97c \uc0ac\uc6a9\ud558\uac8c\ub418\uba74, type \ubcc0\uacbd\uc740 \ubd88\ud5c8 let mut spaces = \" \"; spaces = spaces.len(); // cause an error // constant (\uc0c1\uc218) // - constants use uppercase with underscores. // - constants must be computed at compile time. const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;","title":"Constants and Variables"},{"location":"rust/#built-in-scalar-data-types","text":"Rust\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 scalar data type\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. i8, i16, i32, i64 // signed integer number (default: i32) u8, u16, u32, u64 // unsigned integer number isize, usize // architecture-dependent number f32, f64 // floating point number (default f64) bool // true, false boolean value char // A 21-bit integer represent a character // that's padded to be 32 bits wide for unicode &str // a string slice consists of characters. // This is immutable string data! (Read-only) String // It is mutable string data allocated to the heap area. Rust is a statically typed language. \ub530\ub77c\uc11c compiler\uac00 \ubaa8\ub4e0 \ubcc0\uc218\uc758 \uc815\ud655\ud55c data type\uc744 \uc54c\uc544\uc57c \ud568 let VAR: TYPE \uc73c\ub85c variable\uc758 type\uc744 \uba85\uc2dc println! \uc0ac\uc6a9\uc2dc data type suffix\ub97c \ucd94\uac00\ud574 compiler\uac00 type\uc744 \uc778\uc9c0\ud558\ub3c4\ub85d \uc785\ub825\ud574\uc57c \ud568. String is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text. This is not a built-in type. // Integer literal let _i = 1000; // i32 assigned by default let _i: i32 = 1000i32; // suffix for type direction let _i: i32 = 98_222; // = 98222 Decimal for visual separation let _i: i32 = 0xff; // Hex let _i: i32 = 0o77; // Octal let _i: i32 = 0b1111_0000; // Binary let _i: u8 = b'A'; // Byte (u8 only) // Float literal let _number_64 = 4.0; // compiler infers the value to use the default type f64 let _number_32: f32 = 5.0; // type f32 specified via annotation // All of the primitive number types in Rust support mathematical operations // like addition, subtraction, multiplication, and division. // When we call the println macro, we add the data type suffix // to each literal number to inform Rust about the data type. // Addition, Subtraction, and Multiplication println!(\"1 + 2 = {} and 8 - 5 = {} and 15 * 3 = {}\", 1u32 + 2, 8i32 - 5, 15 * 3); // Integer and Floating point division println!(\"9 / 2 = {} but 9.0 / 2.0 = {}\", 9u32 / 2, 9.0 / 2.0); // integer types let sum = 5 + 10; // addition let difference = 95.5 - 4.3; // subtraction let product = 4 * 30; // multiplication let quotient = 56.7 / 32.2; // division let remainder = 43 % 5; // remainder // floating point types let x = 2.0; // f64 let y: f32 = 3.0; // f32 // boolean type let t = true; let f: bool = false; // with explicit type annotation // character let c = 'z'; let z = '\u2124'; let heart_eyed_cat = '\ud83d\ude3b';","title":"Built-in scalar data types"},{"location":"rust/#char-type","text":"Rust\u2019s char type is four bytes in size and represents a Unicode Scalar Value. Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. char type is a 21-bit integer represent a character that's padded to be 32 bits wide for unicode. Char literals use single quotes. 'C' Storing UTF-8 Encoded Text with Strings","title":"Char type"},{"location":"rust/#compound-types","text":"Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.","title":"Compound Types"},{"location":"rust/#tuple-type","text":"Tuples have a fixed length: once declared, they cannot grow or shrink in size. let tup: (i32, f64, u8) = (500, 6.4, 1); // [Tuple destructuring] // To get the individual values out of a tuple ... let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {}\", y); // The value of y is: 6.4 // [Access a tuple element directly] let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2; \u2753 The tuple without any values, (), is a special type that has only one value, also written (). The type is called the unit type and the value is called the unit value. Expressions implicitly return the unit value if they don\u2019t return any other value.","title":"Tuple Type"},{"location":"rust/#array-type","text":"Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length. Arrays are useful when you want your data allocated on the stack rather than the heap. Flexible size array\uac00 \ud544\uc694\ud558\ub2e4\uba74 Vec<T> \ub97c \uc0ac\uc6a9 let a = [1, 2, 3, 4, 5]; let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; let a: [i32; 5] = [1, 2, 3, 4, 5]; // [Type; Length] let a = [3; 5]; // [3, 3, 3, 3, 3]\uc73c\ub85c \ucd08\uae30\ud654 // [Access an array element] let first = a[0]; let second = a[1]; // mutable\ud574\uc57c Arrary element \ubcc0\uacbd \uac00\ub2a5\ud568 let mut a = [1, 2, 3, 4, 5]; a[1] = 100;","title":"Array Type"},{"location":"rust/#str-string-type","text":"&str as a pointer to immutable string data. String literals are all of type &str.","title":"&amp;str\uacfc String Type"},{"location":"rust/#functions","text":"fn keyward\ub97c \uc0ac\uc6a9 All letters of function names and variables are lowercase and underscores ( _ ) separate words. A set of parentheses and curly brackets are followed to the function name. In function signatures, you must declare the type of each parameter that you want to input. The function returns a concrete type: The Rust compiler needs to know how much space every function's return type requires. fn main() { another_function(5); print_labeled_measurement(5, 'h'); } fn another_function(x: i32) { println!(\"The value of x is: {}\", x); } fn print_labeled_measurement(value: i32, unit_label: char) { println!(\"The measurement is: {}{}\", value, unit_label); } fn four() -> i32 { 4; // error because it becomes a statement } fn five() -> i32 { 5 // no semicolon; return the value as an expression } fn six() -> i32 { // \uba85\uc2dc\uc801 \ubc18\ud658 return 6; // ok } fn seven() -> i32 { return 7 // ok } fn main() { let x = five(); println!(\"The value of x is: {}\", x); }","title":"Functions"},{"location":"rust/#diverging-functions","text":"Diverging functions never return. They are marked using ! , which is an empty type. server\ub4f1\uc758 non-terminated app\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub420 \ub4ef ... fn foo() -> ! { panic!(\"This call never returns.\"); }","title":"Diverging functions"},{"location":"rust/#associated-function-indication","text":"let mut guess = String::new(); The :: syntax in the ::new line indicates that new is an associated function of the String type. An associated function is a function that\u2019s implemented on a type, in this case String.","title":"Associated function indication ::"},{"location":"rust/#closure","text":"Closures are functions that can capture the enclosing environment. For example, a closure that captures the x variable: |val| val + x capturing and bollowing : closure \ud568\uc218\uac00 variable\uc5d0 \ud560\ub2f9\ub420 \ub54c \ub3d9\uc77c namespace\uc5d0 \uc788\ub294 \ubcc0\uc218\ub97c capture\ud558\uc5ec \uc0ac\uc6a9\ud568 by reference: &T by mutable reference: &mut T by value: T move \uc0ac\uc6a9\uc2dc variable\uc758 ownership\uc744 \uac00\uc838\uac10 e.g. let contains = move |needle| haystack.contains(needle); input & output parameter\ub85c \uc0ac\uc6a9\uac00\ub2a5 type bound\uc5d0 \uc544\ub798\uc640 \uac19\uc740 argument function\uc758 trait\uc744 \uc9c0\uc815\ud574\uc57c \ud568 Fn : the closure uses the captured value by reference ( &T ) FnMut : the closure uses the captured value by mutable reference ( &mut T ) FnOnce : the closure uses the captured value by value ( T ) iterator \ub3d9\uc791\uc744 \uad6c\ud604\ud560 \ub54c \uc0ac\uc6a9 e.g. Iterator::any // Increment via closures and functions. fn function(i: i32) -> i32 { i + 1 } // Closures are anonymous, here we are binding them to references // Annotation is identical to function annotation but is optional // as are the `{}` wrapping the body. These nameless functions // are assigned to appropriately named variables. let closure_annotated = |i: i32| -> i32 { i + 1 }; let closure_inferred = |i| i + 1; let mut i = 1; i = function(i); // 2 i = closure_annotated(i); // 3 i = closure_inferred(i); // 4 println!(\"closure example i: {}\", i); // let i = 1; // Call the function and closures. println!(\"function: {}\", function(i)); // 5 println!(\"closure_annotated: {}\", closure_annotated(i)); // 5 println!(\"closure_inferred: {}\", closure_inferred(i)); // 5 // A closure taking no arguments which returns an `i32`. // The return type is inferred. let one = || 1; println!(\"closure returning one: {}\", one()); use std::mem; let color = String::from(\"green\"); // bollow immutable reference of the color variable. let print = || println!(\"`color`: {}\", color); print(); let _reborrow = &color; print(); // A move or reborrow is allowed after the final use of `print` let _color_moved = color; // print(); // \ud638\ucd9c \ubd88\uac00; color already moved to _color_moved let mut count = 0; // bollow mutable count reference. let mut inc = || { count += 1; println!(\"`count`: {}\", count); }; // Call the closure using a mutable borrow. inc(); // The closure no longer needs to borrow `&mut count`. Therefore, it is // possible to reborrow without an error let _count_reborrowed = &mut count; // `consume` consumes the variable so this can only be called once. let movable = Box::new(3); let consume = || { println!(\"`movable`: {:?}\", movable); mem::drop(movable); }; consume(); // consume(); // \ud638\ucd9c \ubd88\uac00; The bollowed variable is not available. // ^ TODO: Try uncommenting this line. // move \uc0ac\uc6a9\uc2dc ownership\uc744 \uac00\uc838\uac10 let haystack = vec![1, 2, 3]; let contains = move |needle| haystack.contains(needle); println!(\"{}\", contains(&1)); // Functional approach let sum_of_squared_odd_numbers: u32 = (0..).map(|n| n * n) // All natural numbers squared .take_while(|&n_squared| n_squared < upper) // Below upper limit .filter(|&n_squared| is_odd(n_squared)) // That are odd .fold(0, |acc, n_squared| acc + n_squared); // Sum them println!(\"functional Approach: {}\", sum_of_squared_odd_numbers);","title":"closure"},{"location":"rust/#call-chaining-using-closure","text":"// call chaining using closure fn is_odd(n: u32) -> bool { n % 2 == 1 } let upper = 1000; let sum_of_squared_odd_numbers: u32 = (0..) .map(|n| n * n) // All natural numbers squared .take_while(|&n_squared| n_squared < upper) // Below upper limit .filter(|&n_squared| is_odd(n_squared)) // That are odd .fold(0, |acc, n_squared| acc + n_squared); // Sum them println!(\"functional Approach: {}\", sum_of_squared_odd_numbers);","title":"Call chaining using closure"},{"location":"rust/#statements-and-expressions","text":"Rust\ub294 Statement\uc640 expression\uc758 \uad6c\ubd84\uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ud655\ud568. Statements are instructions that perform some action and do not return a value. Expressions evaluate to a resulting value and return the result value. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value. javascript\uc640 \uc720\uc0ac\ud558\uac8c \uc138\ubbf8\ucf5c\ub860( ; ) \uc5c6\uc774 function \ub9c8\uc9c0\ub9c9 \ubb38\uc7a5\uc774 \ub05d\ub098\uba74, \uadf8 \ub9c8\uc9c0\ub9c9 \uacb0\uacfc\ub97c \ubc18\ud658\ud568 (as an expression) Expressions in rust: function call, value, {} (\ube14\ub85d) fn main() { // error \ubc1c\uc0dd let y\ub294 return value \uc5c6\uc74c // expression\uc774 \uc544\ub2c8\ubbc0\ub85c x\uc5d0 binding \ubd88\uac00 let x = (let y = 6); // 4\ub85c \ud310\uc815\ub41c {} \uc548\uc758 \uac12\uc774 y\uc5d0 \ud560\ub2f9 // x + 1\uc5d0\ub294 \uc138\ubbf8\ucf5c\ub860(;) \uc774 \uc5c6\uc73c\uba70 expression\uc73c\ub85c \ud310\uc815, \uac12\uc744 \ubc18\ud658 let y = { let x = 3; x + 1 }; println!(\"The value of y is: {}\", y); }","title":"Statements and expressions"},{"location":"rust/#control-flow","text":"","title":"Control flow"},{"location":"rust/#ifelse","text":"condition\uc740 \ubc18\ub4dc\uc2dc boolean\uc744 \ubc18\ud658\ud574\uc57c \ud568 parenthesis () \ub294 \uc0ac\uc6a9\uc548\ud568 arms : \uac08\ub798?; condition\uc5d0 \ub530\ub77c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ube14\ub85d\uc744 \ub9d0\ud568 let \ud560\ub2f9 \uc5f0\uc0b0 ( = )\uc5d0 if..else \uc0ac\uc6a9 \uac00\ub2a5 let number = 6; if number % 4 == 0 { println!(\"number is divisible by 4\"); } else if number % 3 == 0 { println!(\"number is divisible by 3\"); } else if number % 2 == 0 { println!(\"number is divisible by 2\"); } else { println!(\"number is not divisible by 4, 3, or 2\"); } if number { // error - expected bool, found integral variable println!(\"number was three\"); } // let number = if condition > 4 { if condition > 8 { 11 } else { 5 } } else { 3 }; println!(\"The value of number is: {}\", number); // 5","title":"if..else:"},{"location":"rust/#loop-while-and-for","text":"loop { println!(\"again!\"); // ... break; } let mut number = 3; while number != 0 { println!(\"{}!\", number); number = number - 1; println!(\"LIFTOFF!!!\"); } let a = [10, 20, 30, 40, 50]; for element in a.iter() { // for\ubb38 \ub0b4\uc5d0\uc11c element \uc0ad\uc81c\ud574\ub3c4 panic X println!(\"the value is: {}\", element); } // range for number in (1..4).rev() { println!(\"{}!\", number); } println!(\"LIFTOFF!!!\");","title":"loop, while and for"},{"location":"rust/#match","text":"fn main() { // Destructuring values in match // - rust\ub294 \ubcf5\uc7a1\ud55c type\uc744 match\ub85c wrapping structure\ub97c \ubc97\uaca8\ub0b4\uc5b4 \ucc98\ub9ac\ud568 // - destructuring type\uc774 \ub2e4\ub97c \uacbd\uc6b0 match, if let \ud560\ub2f9 \ubd88\uac00 // - destructuring let member = 13; match member { 1 => println!(\"1\"), 2 | 3 | 4 => println!(\"2,3,4\"), 5..=10 => println!(\"5..10\"), _ => println!(\"_\") } // tuple let triple = (0, 1, -3); match triple { (0, y, z) => println!(\"{},{}\", y, z), (1, ..) => println!(\"first is 1\"), // .. ignore the rest _ => println!(\"??\") } // arrays/slices let array = [3, -2, 6]; match array { [0, second, third] => { println!(\"second {}, thrid {}\", second, third); } [1, _, third] => println!(\"thrid {}\", third), // ignore a value with _ // The code below would not compile // [-1, second] => println!(\"compile error\"), // store middle values to another array/slice [3, middle @.., last] => println!(\"{:?} {:?}\", middle, last), _ => () } // enums #[allow(dead_code)] #[derive(Debug)] enum Color { Red, Blue, Green, RGB(u32, u32, u32), CMYK(u32, u32, u32, u32) } let color = Color::RGB(122, 17, 40); match color { Color::Red => println!(\"The color is Red!\"), Color::Blue => println!(\"The color is Blue!\"), Color::Green => println!(\"The color is Green!\"), Color::RGB(r, g, b) => println!(\"Red: {}, green: {}, and blue: {}!\", r, g, b), Color::CMYK(c, m, y, k) => println!(\"Cyan: {}, magenta: {}, yellow: {}, key (black): {}!\", c, m, y, k), // all matching case must be in the scope. } // pointers/ref // dereference in matching let reference: &u32 = &4; match reference { &val => println!(\"{:?}\", val) // if matched, it drops `&` } // To avoid the `&`, you dereference before matching. match *reference { val => println!(\"{:?}\", val) } let _not_a_reference = 3; let ref _is_a_reference = 3; // &i32; explicit reference let value = 5; let mut mut_value = 6; let rr = match value { // create the reference of r ref r => r }; println!(\"{:?}, {:?}\", value, rr); match mut_value { ref mut m => { // Got a reference. Gotta dereference it before we can add anything to it. *m += 10; println!(\"We added 10. `mut_value`: {:?}\", m); }, } // structs #[allow(dead_code)] struct Foo { x: (u32, u32), y: u32 } let foo = Foo {x: (10, 20), y: 30}; match foo { Foo { x: (1, b), y: c } => println!(\"b={:?} c={:?}\", b, c), Foo {y, ..} => println!(\"y={:?}, others=Don't Care\", y) // match any values } // Guards let pair = (3, 1); match pair { (x, y) if x == y => println!(\"Twins!\"), (x, _) if x%2 == 1 => println!(\"The first odd!\"), _ => println!(\"no correlation ...\") } // binding to a value with inclusive range let num = 3; // @1..=10 inclusive range \uc0ac\uc6a9\ud574\uc57c \ud568 // exclusive range = @1..10 match num { n @1..=10 => println!(\"num in 1..10 {}\", n), n => println!(\"num {}\", n) } // binding to an enum variant value #[allow(dead_code)] fn some_number() -> Option<u32> { Some(42) } match some_number() { Some(n @ 42) => println!(\"Binding to an enum variant with value {:?}\", n), Some(n) => println!(\"Binding to an enum variant {:?}\", n), _ => () } // match assign let option = Some(10); let i = match option { Some(i) => i, _ => panic!(\"?\"), }; println!(\"{}\", i); // if let let num = Some(7); let letter: Option<i32> = None; // let emotion: Option<i32> = None; if let Some(i) = num { println!(\"i = {}\", i); } else { println!(\"destructuring failed ...\"); } // match any enum value using if let if let None = letter { println!(\"letter is None\"); } if let Color::Blue = color { println!(\"Blue\"); } else if let Color::RGB(x, _, z @1..=100) = color { println!(\"x={}, z={}\", x, z); } else { println!(\"{:?}\", color); } // while let let mut optional = Some(0); while let Some(i) = optional { if i > 9 { optional = None; } else { optional = Some(i+ 1); } } optional = Some(0); loop { // while let\uacfc \ub3d9\uc77c \ub3d9\uc791 match optional { Some(i) => { if i > 9 { optional = None; } else { optional = Some(i+1); } }, _ => break } } }","title":"match"},{"location":"rust/#result-type","text":"Rust\ub294 result type\uc740 \uc5f4\uac70\ud615(enumerations)\uc758 \uc5d0\ub7ec\ucc98\ub9ac \uc815\ubcf4 variants: enumeration data // io::Result pub type Result<T> = Result<T, Error>; // std::result::Result Enum std::result::Result pub enum Result<T, E> { Ok(T), Err(E), }","title":"Result type"},{"location":"rust/#reference","text":"","title":"Reference"},{"location":"rust/#methods","text":"Rust\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 struct\uc640 method\ub97c \uc815\uc758\ud55c\ub2e4. #[derive(Debug)] struct Rectangle { width: u32, height: u32, } impl Rectangle { // method definition in implement block fn area(&self) -> u32 { self.width * self.height } // Associated Functions fn square(size: u32) -> Rectangle { Rectangle{ width: size, height: size, } } } fn main() { let scale = 2; let rect = Rectangle { width: dbg!(30 * scale), height: 50, }; // dbg! return the ownership of the input object let rect = dbg!(rect); println!( \"The area of the rectangle {:?} is {} square pixels.\", rect, rect.area() ); let square = Rectangle::square(100); let rect1 = Rectangle { height: 50, width: 30 }; let rect2 = Rectangle { height: 40, width: 10 }; let rect3 = Rectangle { height: 45, width: 60 }; println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2)); println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3)); println!(\"Can square hold rect1? {}\", square.can_hold(&rect1)); } The &self is actually short for self: &Self . mutable \uc120\uc5b8\uc2dc, &mut self , field \uc218\uc815 \uac00\ub2a5 Note that the entire instance must be mutable; Rust doesn\u2019t allow us to mark only certain fields as mutable. Associated Function\uc740 self\uac00 \uc5c6\ub294 \uad00\ub828 \ud568\uc218 (class \ud568\uc218\uc640 \uc720\uc0ac), \uc0dd\uc131\uc790 \ud568\uc218\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9 Associated Function\uc740 struct\uc5d0 \ub300\ud55c namespace syntax( :: )\ub85c \uc811\uadfc/\uc0ac\uc6a9 \uac00\ub2a5 \ub2e4\uc218\uc758 impl block \uc0ac\uc6a9 \uac00\ub2a5","title":"methods"},{"location":"rust/#field-init-shorthand","text":"\uc0dd\uc131\ud568\uc218\uc5d0\uc11c field name\uacfc function argument\uc744 \ub3d9\uc77c\ud558\uac8c \uc785\ub825\ud558\uc5ec \uc9e7\uac8c \uc4f0\ub294 \ubc29\ubc95 fn build_user(email: String, username: String) -> User { User { email, // field init shorthand username, active: true, sign_in_count: 1, } }","title":"Field Init Shorthand"},{"location":"rust/#struct-update-syntax","text":"\uc55e\uc11c \uc0ac\uc6a9\ud55c \uc778\uc2a4\ud134\uc2a4\uc758 \uac12\uc744 \uc0ac\uc6a9\ud574 \uad6c\uc870\uccb4 \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ubc29\ubc95 fn main() { // --snip-- let user1 = User { // init ... }; let user2 = User { email: String::from(\"another@example.com\"), ..user1 // user1\uc758 \uac12\uc73c\ub85c structure update }; } Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the \u201cWays Variables and Data Interact: Move\u201d section. In this example, we can no longer use user1 after creating user2 because the String in the username field of user1 was moved into user2. The types of active and sign_in_count are types that implement the Copy trait, so the behavior we discussed in the \u201cStack-Only Data: Copy\u201d section would apply.","title":"Struct Update Syntax"},{"location":"rust/#tuple-structs","text":"Tuple\uacfc \uc720\uc0ac\ud55c \uad6c\uc870\uccb4\ub85c filed name\uc774 \uc5c6\uc774 field type\ub9cc\uc744 \uc815\uc758\ud55c \uad6c\uc870\uccb4 Named tuple struct Color(i32, i32, i32); struct Point(i32, i32, i32); fn main() { let black = Color(0, 0, 0); let origin = Point(0, 0, 0); }","title":"Tuple Structs"},{"location":"rust/#generics","text":"Generics is the topic of generalizing types and functionalities to broader cases. This is extremely useful for reducing code duplication in many ways, but can call for rather involved syntax. Generic type : Generic type parameter <T> \uac00 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 type Concrete type : generic type parameter\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 (type\uc774 \uba85\uc2dc\ub41c) \ubaa8\ub4e0 type Generic bounds : Generic type\uc774 \uac00\uc838\uc57c \ud560 type\uc758 \ud2b9\uc131\uc744 \uaddc\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9 <T: Bounds> ; \uc8fc\ub85c trait\uc774 bound\ub85c \uc4f0\uc784 e.g. fn printme<T: std::fmt::Debug> (x: T) It places further constraints on the kind of the Generic types. where can also be used to apply bounds in some cases to be more expressive. Multiple generic bounds : Multiple bounds for a single type can be applied with a + . Like normal, different types are separated with , . e.g. fn compare_prints<T: Debug + Display>(t: &T) Associated types : trait generics\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 type\uc744 \uc815\uc758\ud558\uc5ec \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95 Good Aricle: Using Generic Types in Rust The combination of generics and traits in Rust gives us the same kind of flexibility that we are seeking in a dynamically typed language, but without any of the runtime tradeoffs.","title":"Generics"},{"location":"rust/#generic-type","text":"struct A; // A concrete type struct Single(A); // A concrete type; a tuple structure struct SingleGen<T>(T); // A generic type let _char: SingleGen<char> = SingleGen('a'); let _t = SingleGen(A); // Uses `A` defined at the top. let _i32 = SingleGen(6); // Uses `i32`. let _char = SingleGen('a'); // Uses `char`.","title":"Generic Type"},{"location":"rust/#generic-functions","text":"fn foo<T>(arg: T) { ... } fn bar(s: SGen<A>) { ... } // not a generic function generic::<char>(SGen('a')); // call with explicitly specified type parameters generic(SGen('c')); // call with implicitly specified type parameters","title":"Generic functions"},{"location":"rust/#generic-implementations-generic-methods","text":"struct S; // Concrete type `S` struct GenericVal<T>(T); // Generic type `GenericVal` // implementation \uc120\uc5b8\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 type\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc74c impl GenericVal<f32> {} // Specify `f32` impl GenericVal<S> {} // Specify `S` as defined above // `<T>` Must precede the type to remain generic impl<T> GenericVal<T> {} impl<T> Point<T> { fn x(&self) -> &T { &self.x } } // NewStruct doesn't use any generic types, // so we don't need to specify any here. struct NewStruct {} impl NewStruct { // We can still, however, define our own generic parameters // on an individual method as desired fn x<T>(&self, foo: T) -> T { foo } }","title":"Generic Implementations (Generic methods)"},{"location":"rust/#bounds","text":"","title":"Bounds"},{"location":"rust/#where-clause","text":"Where clause\ub294 generic bound\uc5d0\uc11c \uc120\ud589 \ud45c\ud604\ub418\ub294 \ubcf5\uc7a1\ud55c type \uc815\uc758\ub97c \ud6c4\uc704\uc5d0 \ud45c\ud604\ud558\uc5ec \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95 // \uc120\ud589 \ud45c\ud604 impl<K:Hash+Eq,V> HashMap<K, V> {} // \ud6c4\uc704 \ud45c\ud604 with where impl<K,V> HashMap<K, V> where K : Hash + Eq {} impl <A: TraitB + TraitC, D: TraitE + TraitF> MyTrait<A, D> for YourType {} // Expressing bounds with a `where` clause impl <A, D> MyTrait<A, D> for YourType where A: TraitB + TraitC, D: TraitE + TraitF {} Rust RFC for where","title":"Where clause"},{"location":"rust/#associated-types","text":"The use of \"Associated types\" improves the overall readability of code by moving inner types locally into a trait as output types. Syntax for the trait definition is as follows: // TRAIT = TRAIT_HEADER '{' TRAIT_ITEM* '}' // TRAIT_ITEM = // ... <existing productions> // | 'const' IDENT ':' TYPE [ '=' CONST_EXP ] ';' // | 'type' IDENT [ ':' BOUNDS ] [ WHERE_CLAUSE ] [ '=' TYPE ] ';' // | 'lifetime' LIFETIME_IDENT ';' trait Graph { type N: Show + Hash; type E: Show + Hash; ... } impl Graph for MyGraph { // Both MyNode and MyEdge must implement Show and Hash type N = MyNode; type E = MyEdge; ... } fn print_nodes<G: Graph>(g: &G) { // here, can assume G::N implements Show ... } https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md","title":"Associated types"},{"location":"rust/#phantom-type-parameters","text":"phantom-data Phantom type parameters","title":"Phantom type parameters"},{"location":"rust/#traits","text":"A trait is a collection of methods defined for an unknown type: Self . They can access other methods declared in the same trait. Traits can be implemented for any data type. Derive: Operation overloading Fn , FnMut , and FnOnce traits for types that can be invoked like functions + , += , - , * , / ... for operator traits Drop : The Drop trait only has one method: drop , which is called automatically when an object goes out of scope. The main use of the Drop trait is to free the resources that the implementor instance owns. Box , Vec , String , File , and Process : the types implemented the Drop trait Iterators : The Iterator trait is used to implement iterators over collections such as arrays. fn next(&mut self) -> Option<Self::Item> \uad6c\ud604\ud574\uc57c \ud568 dyn Trait: https://doc.rust-lang.org/rust-by-example/trait/dyn.html impl Trait: https://doc.rust-lang.org/rust-by-example/trait/impl_trait.html Copy Trait: \ud560\ub2f9\uc2dc resource move\uac00 \uc544\ub2cc copy Clone Trait: .clone() \uc73c\ub85c \uba85\uc2dc\uc801\uc73c\ub85c copy Supertraits: Rust doesn't have \"inheritance\", but you can define a trait as being a superset of another trait. Disambiguating overlapping traits https://cotigao.medium.com/dyn-impl-and-trait-objects-rust-fd7280521bea https://modoocode.com/334","title":"Traits"},{"location":"rust/#to-be-considered","text":"Integer Overflow: https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow \uc5ed\ucc38\uc870 \uac15\uc81c(deref coercion)","title":"To be considered"},{"location":"rust/#collections","text":"","title":"collections"},{"location":"rust/#box-stack-and-heap","text":"All values in Rust are stack allocated by default. Values can be boxed (allocated on the heap) by creating a Box<T> . A box is a smart pointer to a heap allocated value of type T . When a box goes out of scope, its destructor is called, the inner object is destroyed, and the memory on the heap is freed. use std::mem; #[derive(Debug)] #[allow(dead_code)] struct Point { x: f64, y: f64, } #[derive(Debug)] #[allow(dead_code)] struct Rectangle { top_left: Point, bottom_right: Point, } fn origin() -> Point { Point { x: 0f64, y: 0f64 } } fn boxed_origin() -> Box<Point> { // allocate a point to heap return Box::new(Point { x: 0.0, y: 0.0 }); } // stack allocated variables let point: Point = origin(); let rectangle: Rectangle = Rectangle { top_left: origin(), bottom_right: Point { x: 100.0, y: 100.0 }, }; // heap allocated variables let box_point: Box<Point> = Box::new(origin()); let box_rectangle: Box<Rectangle> = Box::new(Rectangle { top_left: origin(), bottom_right: Point { x: 200.0, y: 200.0 }, }); // inner box in stack let doubleIndirectBox: Box<Box<Point>> = Box::new(boxed_origin()); println!(\"{point:?}\"); println!( \"Point occupies {} bytes on the stack\", mem::size_of_val(&point) ); println!( \"Rectangle occupies {} bytes on the stack\", mem::size_of_val(&rectangle) ); // box size == pointer size println!( \"Boxed point occupies {} bytes on the stack\", mem::size_of_val(&box_point) ); println!( \"Boxed rectangle occupies {} bytes on the stack\", mem::size_of_val(&box_rectangle) ); println!( \"Boxed box occupies {} bytes on the stack\", mem::size_of_val(&doubleIndirectBox) ); // Copy the data contained in `boxed_point` into `unboxed_point` let unboxed_point: Point = *box_point; println!( \"Unboxed point occupies {} bytes on the stack\", mem::size_of_val(&unboxed_point) );","title":"Box, stack and heap"},{"location":"rust/#string","text":"to_string() : Display trait\uc774 \uad6c\ud604\ub41c \ubaa8\ub4e0 type\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5 + \uc5f0\uc0b0\ub3d9\uc791 \ucd94\ucc9c X String\uc758 index \uc811\uadfc \uae08\uc9c0\ub428 \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() \uacfc \uac19\uc774 \ubb38\uc790\uc18c(grapheme)\ub85c \uc811\uadfc\ud574\uc57c \ud568 let data = \"initial contents\"; let s = data.to_string(); // the method also works on a literal directly: let s = \"initial contents\".to_string(); let s = String::from(\"initial contents\"); // \uc704\uc640 \ub3d9\uc77c let mut s = String::from(\"foo\"); s.push_str(\"bar\"); let mut s = String::from(\"lo\"); s.push('l'); let s1 = String::from(\"Hello, \"); let s2 = String::from(\"world!\"); let s3 = s1 + &s2; // s1\uc740 \uc5ec\uae30\uc11c \uc774\ub3d9\ub418\uc5b4 \ub354\uc774\uc0c1 \uc4f8 \uc218 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\uc138\uc694 let s1 = String::from(\"tic\"); let s2 = String::from(\"tac\"); let s3 = String::from(\"toe\"); let s = format!(\"{}-{}-{}\", s1, s2, s3); for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() { // \ubb38\uc790\uc18c \ubc18\ud658 println!(\"{}\", c); } for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\".bytes() { // byte \ubc18\ud658 println!(\"{}\", b); }","title":"String"},{"location":"rust/#hash-map","text":"","title":"hash map"},{"location":"rust/#useful-code-or-crates","text":"","title":"Useful code or crates"},{"location":"rust/#read-stdin","text":"use std::io; // ... // Read a string from stdin let mut index = String::new(); io::stdin() .read_line(&mut index) .expect(\"Failed to read line\"); let index: usize = index .trim() .parse() .expect(\"Index entered was not a number\");","title":"Read stdin"},{"location":"rust/#modules","text":"Rust provides a powerful module system that can be used to hierarchically split code in logical units (modules), and manage visibility (public/private) between them. A module is a collection of items: functions, structs, traits, impl blocks, and even other modules. Rust\uc758 module\uc774\ub780 \ucf54\ub4dc\ub97c \uacc4\uce35\ud654/\uc870\uc9c1\ud654 (namespace)\ud558\uace0, pub(public) \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc811\uadfc\uc131 \uc81c\uc5b4\ud558\uc5ec, \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \ubc29\ubc95 mod my_mod { // module my_mod pub fn public_func() { // ... \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \uac00\ub2a5 } fn private_func() { // ... module \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \ubd88\uac00 // ... \uac19\uc740 module \ub0b4\uc5d0\uc120 \uc811\uadfc \uac00\ub2a5 } pub mod nested_mod { // module nested_mod pub(in crate::my_mod) fn nested_ { // ... crate::my_mode\uc5d0\uc11c\ub9cc public function } pub(self) fn fname { // ... pub(self) == private } pub(super) fn fname { // ... parent module\uc5d0\uc11c\ub9cc \ubcf4\uc784 } } pub(crate) fn public_function_in_crate() { // ... \uc18d\ud55c crate\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5 } }","title":"Modules"},{"location":"rust/#macro","text":"Rust macro system\uc758 macro \uc885\ub958\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Declarative Macros Procedural Macros Function-like macros Derive mode macros Attribute macros","title":"Macro"},{"location":"rust/#declarative-macros","text":"\ud754\ud788 \uc0ac\uc6a9\ud558\ub294 \"\uc120\uc5b8\uc801\" \ud615\ud0dc\uc758 \ub9e4\ud06c\ub85c\ub85c Rust\uc758 Declarative Macro\ub294 \ub2e8\uc21c \ubb38\uc790\uc5f4 \uce58\ud658\uc774 \uc544\ub2c8\ub77c Rust Abstract Syntax Tree\ub97c \uc9c1\uc811 \uc81c\uc5b4\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. macro_rules allows users to define syntax extension in a declarative way. MacroRule = MacroMatcher => MacroTranscriber \ub85c \uad6c\uc131, MacroRule \uc740 ; \uc73c\ub85c \uad6c\ubd84 Each macro by example has a name, and one or more rules. Each rule has two parts: a matcher, describing the syntax that it matches, and a transcriber, describing the syntax that will replace a successfully matched invocation. Both the matcher and the transcriber must be surrounded by delimiters. Macros can expand to expressions, statements, items (including traits, impls, and foreign items), types, or patterns. Transcribing : \ucc98\uc74c match\ub41c MacroMatcher\uc758 MacroTranscriber\ub85c code \ubcc0\ud658\ud558\uace0 \ubabb\ucc3e\uac70\ub098 \uc624\ub958 \ubc1c\uc0dd\uc2dc \uc911\ub2e8 () , [] , {} \ubaa8\ub4e0 \uad04\ud638\ub294 MacroMatch, MacroRule\uc5d0\uc11c \ubaa8\ub450 \uc0ac\uc6a9\uac00\ub2a5","title":"Declarative Macros"},{"location":"rust/#procedural-macros","text":"\ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 macro \ud568\uc218\ub97c \uc2e4\ud589\uc2dc\ucf1c \ucf54\ub4dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ub9e4\ud06c\ub85c \ub85c #[proc_macro] \ub85c \uc120\uc5b8\ub41c macro \ud568\uc218\ub294 \ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 TokenStream\uc744 \ubc1b\uc544 TokenStream\uc744 \ucd9c\ub825\ud558\uace0, \uadf8 \ucd9c\ub825\ub41c TokenStream\uc73c\ub85c \ucf54\ub4dc\ub97c \uce58\ud658\ud574 \ucef4\ud30c\uc77c\ud558\ub294 \ub9e4\ud06c\ub85c\uc774\ub2e4. Procedural Macro\ub97c \uc0ac\uc6a9\ud574 \uc6d0\ubcf8 \ucf54\ub4dc\uc5d0\ub294 \uc5c6\ub294 \ud568\uc218\ub97c \uc0dd\uc131\ud558\uac70\ub098 (function generation), macro\ub85c \uc815\uc758\ub41c namespace block\uc744 TokenStream\uc73c\ub85c \ubc1b\uc544 \ud574\ub2f9 block\uc744 \uce58\ud658\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791\uc744 \ud1b5\ud574 compile time\uc5d0 Python\uc758 decorator\uc640 \uac19\uc740 \ud568\uc218\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub2e4. \ucd94\uac00 \uc815\ubcf4\ub294 good article for rust macro \uc5d0 \ub108\ubb34 \uc798 \uc124\uba85\ub418\uc5b4 \uc788\uc5b4 \uc0dd\ub7b5\ud55c\ub2e4.","title":"Procedural Macros"},{"location":"rust/#links-for-macro","text":"good article for rust macro macros-by-example Rust by example","title":"Links for macro"},{"location":"rust/#testing","text":"#[test] \ud568\uc218\uac00 test\ud568\uc218\uc784\uc744 \uc120\uc5b8 cargo test -- --nocapture --test-threads=1 cargo test -- -h \uc73c\ub85c testing option \ud655\uc778\ud574\ubcf4\uae30 cargo test TESTNAME : \ub2e8\uc77c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \uc2e4\ud589 cargo test -- --ignored : #[ignore] \ub85c \uc124\uc815\ub41c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \ud14c\uc2a4\ud2b8 unit test\ub294 mod test \ub9cc\ub4e4\uace0, #[cfg(test)] cfg attribute\ub97c \uc124\uc815\ud558\uc5ec \uad6c\uc131; cargo test \uc2dc\uc5d0\ub9cc \ucef4\ud30c\uc77c/\uc2e4\ud589 #[derive(Debug, PartialEq, Eq)] pub struct Rectangle { length: u32, width: u32, } impl Rectangle { pub fn can_hold(&self, other: &Rectangle) -> bool { self.length > other.length && self.width > other.width } } #[allow(dead_code)] fn add_two(a: i32) -> i32 { if a > 100 { panic!(\"value must be less than or equal to 100.\"); } a + 2 } #[cfg(test)] mod tests { use super::*; #[test] fn larger_can_hold_smaller() { let larger = Rectangle { length: 8, width: 7 }; let smaller = Rectangle { length: 5, width: 1 }; assert!(larger.can_hold(&smaller), \"{:?}\", larger); } #[test] fn smaller_cannot_hold_larger() { let larger = Rectangle { length: 8, width: 7 }; let smaller = Rectangle { length: 5, width: 1 }; assert!(!smaller.can_hold(&larger), \"{:?}\", smaller); } #[test] fn it_adds_two() { // assert_eq!\uc640 assert_ne!\ub294 // \uac01\uac01 ==\uacfc != \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud558\ubbc0\ub85c // PartialEq\uc640 Debug \ud2b8\ub808\uc787\uc744 \uad6c\ud604\ud574 \ud568 assert_eq!(4, add_two(2)); assert_ne!(4, add_two(3)); } #[test] #[should_panic] fn greater_than_100() { add_two(200); } #[test] #[should_panic(expected = \"value must be less than or equal to 100\")] fn greater_than_100_2() { add_two(200); } }","title":"Testing"},{"location":"rust/#rust-attributes","text":"rust-by-example sjquant.tistory.com An attribute is metadata applied to some module , crate or item . This metadata can be used to/for: conditional compilation of code set crate name, version and type (binary or library) disable lints (warnings) enable compiler features (macros, glob imports, etc.) link to a foreign library mark functions as unit tests mark functions that will be part of a benchmark","title":"Rust Attributes"},{"location":"rust/#scope","text":"#![crate_attribute] for a whole crate #[item_attribute] : for a module or item \ub2e4\ub978 \ubb38\uc11c\uc5d0\uc11c\ub294 #![Attr] : InnerAttribute\ub85c \uc120\uc5b8\ub41c \ubc94\uc704 \ub0b4\uc5d0 \uc801\uc6a9 #[Attr] : OuterAttribute\ub85c \uc120\uc5b8\uc774\ud6c4 \uc624\ub294 module, item\uc5d0 \uc801\uc6a9","title":"Scope"},{"location":"rust/#attribute-arguments","text":"Attribute\ub294 Argument\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c #[attribute = \"value\"] #[attribute(key = \"value\")] #[attribute(value)] #[attribute(value, value2, value3, value4, value5)]","title":"Attribute arguments"},{"location":"rust/#frequently-used-attributes","text":"#[allow(dead_code)] : used to disable linting of the following code block; the compiler option? #![crate_name = \"rary\"] : The library is named \"rary\" #![crate_type = \"lib\"] : This crate is a library; When the crate_type attribute is used, we no longer need to pass the --crate-type flag to rustc. #[cfg(target_os = \"linux\")] This function only gets compiled if the target OS is linux #[cfg(not(target_os = \"linux\"))] : And this function only gets compiled if the target OS is not linux \u2757 cfg! , unlike #[cfg] , it is a macro that does not remove any code and only evaluates to true or false. if cfg!(target_os = \"linux\") { println!(\"Yes. It's definitely linux!\"); } else { println!(\"Yes. It's definitely *not* linux!\"); } #[test] : used for functional test #[cfg_attr(a, b)] : \ub9cc\uc57d #[cfg(a)]\ub97c \ub9cc\uc871\ud558\uba74 #[b] attribute\ub97c \uc801\uc6a9","title":"Frequently Used Attributes"},{"location":"rust/#custom-cfg","text":"\uc0ac\uc6a9\uc790 cfg \ub3c4 \ub9cc\ub4e4 \uc218 \uc788\uc74c! #[cfg(mine)] fn cond_function() { println!(\"mine cond!!!\"); } #[cfg(not(mine))] fn cond_function() { println!(\"not mine cond!!!\"); } fn main() { cond_function(); } rustc --cfg mine main.rs && ./main RUSTFLAGS='--cfg mine' cargo run","title":"Custom cfg"},{"location":"rust/#derive-attribute","text":"\ud2b9\uc815\ud55c Trait\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uad6c\ud604(impl)\uc744 \uac04\ud3b8\ud558\uac8c \uc81c\uacf5 \uae30\ubcf8\uc801\uc778 \uad6c\ud604\uc740 \uc774\ubbf8 \uc815\ud574\uc838 \uc788\uc73c\uba70, \uc774\ub7f0 Trait\uc744 derivable \ud558\ub2e4\uace0 \ud568 derivable Trait: Eq , PartialEq , Copy , Clone , Debug ...? #[derive(PartialEq, Clone)] struct Foo<T> { a: i32, b: T, } The following is a list of derivable traits: Comparison traits: Eq , PartialEq , Ord , PartialOrd . Clone , to create T from &T via a copy. Copy , to give a type 'copy semantics' instead of 'move semantics'. Hash , to compute a hash from &T . Default , to create an empty instance of a data type. Debug , to format a value using the {:?} formatter.","title":"derive attribute"},{"location":"rust/#keywords","text":"","title":"Keywords"},{"location":"rust/#crate","text":"// \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 crate \uc120\uc5b8 extern crate rand; extern crate my_crate as thing; // the alias of my_crate in my project extern crate std; // implicitly added to the root of every Rust project // item\uc758 visibility\ub97c \ud604\uc7ac crate\uc5d0 \ud3ec\ud568\ub41c module\ub85c\ub9cc \ud55c\uc815 pub(crate) enum CoolMarkerType { } // The root of the current crate crate::foo::bar","title":"crate"},{"location":"rust/#good-answer-to-understand","text":"whats-the-difference-between-self-and-self Why is the Sized bound necessary in this trait?","title":"Good answer to understand"},{"location":"rust/#associated-items","text":"This following RFC extends traits with associated items, which make generic programming more convenient, scalable, and powerful. In particular, traits will consist of a set of methods, together with: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md Associated functions (already present as \"static\" functions) Associated consts Associated types Associated lifetimes","title":"Associated items"},{"location":"rust/#rust-rfc","text":"https://github.com/rust-lang/rfcs/tree/master/text","title":"Rust RFC"},{"location":"rust/#ffi-foreign-function-interface","text":"\ub2e4\ub978 \uc5b8\uc5b4 \ucf54\ub4dc\uc5d0\uc11c rust \ud568\uc218\ub97c \ud638\ucd9c\ud558\uac70\ub098, rust \ucf54\ub4dc\uc5d0\uc11c \uc678\ubd80 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ubc29\ubc95","title":"FFI (Foreign Function Interface)"},{"location":"rust/#calling-foreign-functions","text":"\uc544\ub798\uc640 \uac19\uc774 libc \ub294 crate\uc73c\ub85c \uad6c\ud604(wrapping)\ub418\uc5b4 \uc788\uc74c [dependencies] libc = \"0.2.0\" \uc678\ubd80 \ud568\uc218 \ucf54\ub4dc\ub294 safe\ud558\ub2e4 \uac00\uc815\ud558\uace0, unsafe \ub85c \uac10\uc2f8 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\uc9c0 \uc54a\uc74c wrapping \ud568\uc218\ub97c \ub9cc\ub4dc\ub294\uac8c \uc77c\ubc18\uc801\uc784 \uc678\ubd80 \ud568\uc218\uac00 \uc790\uc6d0 \ud574\uc81c\ub97c \ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \uc9c1\uc811 Drop trait\uc73c\ub85c \uc790\uc6d0 \ud574\uc81c\ud574\uc57c \ud568 use libc::{c_int, size_t}; #[link(name = \"snappy\")] // \uc678\ubd80 library extern { // library\ub0b4 \ud568\uc218 \ubaa9\ub85d fn snappy_compress(input: *const u8, input_length: size_t, compressed: *mut u8, compressed_length: *mut size_t) -> c_int; fn snappy_uncompress(compressed: *const u8, compressed_length: size_t, uncompressed: *mut u8, uncompressed_length: *mut size_t) -> c_int; fn snappy_max_compressed_length(source_length: size_t) -> size_t; fn snappy_uncompressed_length(compressed: *const u8, compressed_length: size_t, result: *mut size_t) -> c_int; fn snappy_validate_compressed_buffer(compressed: *const u8, compressed_length: size_t) -> c_int; } pub fn validate_compressed_buffer(src: &[u8]) -> bool { unsafe { snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0 } } pub fn compress(src: &[u8]) -> Vec<u8> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen = snappy_max_compressed_length(srclen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); snappy_compress(psrc, srclen, pdst, &mut dstlen); dst.set_len(dstlen as usize); dst } } pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen: size_t = 0; snappy_uncompressed_length(psrc, srclen, &mut dstlen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 { dst.set_len(dstlen as usize); Some(dst) } else { None // SNAPPY_INVALID_INPUT } } } #[cfg(test)] mod tests { use super::*; #[test] fn valid() { let d = vec![0xde, 0xad, 0xd0, 0x0d]; let c: &[u8] = &compress(&d); assert!(validate_compressed_buffer(c)); assert!(uncompress(c) == Some(d)); } #[test] fn invalid() { let d = vec![0, 0, 0, 0]; assert!(!validate_compressed_buffer(&d)); assert!(uncompress(&d).is_none()); } #[test] fn empty() { let d = vec![]; assert!(!validate_compressed_buffer(&d)); assert!(uncompress(&d).is_none()); let c = compress(&d); assert!(validate_compressed_buffer(&c)); assert!(uncompress(&c) == Some(d)); } } fn main() { let x = unsafe { snappy_max_compressed_length(100) }; println!(\"max compressed length of a 100 byte buffer: {}\", x); }","title":"Calling foreign functions"},{"location":"rust/#calling-rust-code-from-c","text":"lib\uc77c \uacbd\uc6b0 C\uc5d0\uc11c \uc27d\uac8c rust \ud568\uc218\uc5d0 \uc811\uadfc \uac00\ub2a5\ud568 #[no_mangle] // turns off Rust's name mangling pub extern \"C\" fn hello_from_rust() { // extern \"C\"\ub85c C\uc5d0\uc11c \ud638\ucd9c\uac00\ub2a5\ud55c \ud615\uc2dd\uc73c\ub85c \ud568\uc218\uba85 \uc720\uc9c0 println!(\"Hello from Rust!\"); } Cargo.toml\uc5d0 C dynamic library \uba85\uc2dc (staticlib\ub3c4 \uac00\ub2a5) [lib] crate-type = [\"cdylib\"] int main(void) { hello_from_rust(); return 0; } Compile with -L and -l options: gcc call_rust.c -o call_rust -lrust_from_c -L./target/debug export \ub418\ub294 \ud568\uc218\uc758 C header file\uc758 \uc790\ub3d9 \uc0dd\uc131: https://github.com/eqrion/cbindgen","title":"Calling Rust code from C"},{"location":"rust/#variadic-functions","text":"... \uc0ac\uc6a9\ud574 \ud45c\ud604, unsafe \ub85c validation skip extern { fn foo(x: i32, ...); } fn main() { unsafe { foo(10, 20, 30, 40, 50); } }","title":"\uac00\ubcc0 \uc778\uc790 \ud568\uc218 (variadic functions)"},{"location":"rust/#logging","text":"https://crates.io/crates/log \uc740 logging abstraction interface \ub9cc\uc744 \uc81c\uacf5\ud560 \ubfd0 log output\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub530\ub77c\uc11c https://crates.io/crates/log \uc758 In executables \uc5d0 logger\ub97c import\ud574\uc57c \uc2e4\uc81c log\ub97c \ud654\uba74\uc5d0 \ucd9c\ub825\ud560 \uc218 \uc788\ub2e4. [dependencies] log = \"0.4\" env_logger = \"0.9.0\" # \uae30\ubcf8 logger mod foo { mod bar { pub fn run() { log::warn!(\"[bar] warn\"); log::info!(\"[bar] info\"); log::debug!(\"[bar] debug\"); } } pub fn run() { log::warn!(\"[foo] warn\"); log::info!(\"[foo] info\"); log::debug!(\"[foo] debug\"); bar::run(); } } fn main() { env_logger::init(); log::warn!(\"[root] warn\"); log::info!(\"[root] info\"); log::debug!(\"[root] debug\"); foo::run(); } RUST_LOG \ub85c env_logger output\uc744 \ub044\uac70\ub098 \ucf24 \uc218 \uc788\uc73c\uba70, logging\uc740 module\uc758 \uacc4\uce35 \uad6c\uc870\uc5d0 \ub530\ub77c logging\ud560 target module\uc744 logging level\uacfc \ud568\uaed8 RUST_LOG\uc5d0 \uc9c0\uc815\ud558\uba74, log\uac00 \ucd9c\ub825\ub41c\ub2e4. RUST_LOG=\"warn,test::foo=info,test::foo::bar=debug\" ./test # Rust binary \uc774\uc678 \uc0ac\uc6a9\uc790\uc758 \ud658\uacbd\ubcc0\uc218 \uc124\uc815\uc5d0 \ub530\ub77c log\ub97c \ucf1c\uac70\ub098, log \ud3ec\ub9f7, log \uc800\uc7a5\uc704\uce58\ub4f1\uc744 \ubcc0\uacbd \uac00\ub2a5\ud558\ub2e4. \ucc3e\uc544 \ubcf4\ub3c4\ub85d! // \uc6b0\uc120\uc21c\uc704 \uc704 ==> \uc544\ub798 //! [`error!`] //! [`warn!`] //! [`info!`] //! [`debug!`] //! [`trace!`]","title":"Logging"},{"location":"rust/#librs-and-mainrs","text":"rust library \uc791\uc131\uc2dc main.rs\ub97c \ud1b5\ud574 \ub3d9\uc791\ud655\uc778 \uac00\ub2a5 https://stackoverflow.com/questions/26946646/package-with-both-a-library-and-a-binary","title":"lib.rs and main.rs"}]}