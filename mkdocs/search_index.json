{
    "docs": [
        {
            "location": "/",
            "text": "Programming Note\n\n\nSummary for new programming language or APIs learning\n\n\n\n\nrust\n\n\njavascript\n\n\nPython\n\n\ngo",
            "title": "Home"
        },
        {
            "location": "/#programming-note",
            "text": "Summary for new programming language or APIs learning   rust  javascript  Python  go",
            "title": "Programming Note"
        },
        {
            "location": "/algorithm/",
            "text": "Algorithm note\n\n\nBasic Data Structure\n\n\n\n\nStack\n\n\nQueue\n\n\nTree\n\n\nPrefix Tree (Trie)\n\n\nPQ (Priority Queue), Max Heap, Min Heap\n\n\nDFS (Depth First Search)\n\n\nBFS (Breadth First Search)\n\n\nDFS with stack\n\n\nBFS with queue\n\n\n\n\nShortest Path Algorithm (\ucd5c\ub2e8 \uacbd\ub85c \uc54c\uace0\ub9ac\uc998)\n\n\n\n\nDijkstra Algorithm:\n\n\n\uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9; O((V+E)lgV)\n\n\npriority queue (heap)\ub85c \uc131\ub2a5\ud5a5\uc0c1 \uac00\ub2a5\n\n\nBellman-Ford-Moore Algorithm:\n\n\n\uac00\uc911 \uc720\ud5a5 \uadf8\ub798\ud504(Weighted-Directed Graph)\uc5d0\uc11c \ub178\ub4dc \uc0ac\uc774\uc758 \ucd5c\ub2e8 \uacbd\ub85c \ud0d0\uc0c9; O(VE)\n\n\n\uc74c\uc218 \uac00\uc911\uce58 \uc0ac\uc6a9\uac00\ub2a5, negative-weight cycles \uc720\ubb34 \ud310\ub2e8 (\ubb34\ud55c \ubc1c\uc0b0\ud558\ubbc0\ub85c ...)\n\n\n\uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9\n\n\nhttps://victorydntmd.tistory.com/104\n\n\nFloyd Warshall Algorithm:\n\n\n\uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 (O(V * V * V))\n\n\n\uc784\uc758\uc758 \ub178\ub4dc s\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud558\uae30 \uc704\ud574, s\uc640 e \uc0ac\uc774\uc758 \ub178\ub4dc\uc778 m\uc5d0 \ub300\ud574 s\uc5d0\uc11c m\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\uc640 m\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uc774\uc6a9, \uac00\ub2a5\ud55c \ubaa8\ub4e0 m\uc744 \uacc4\uc0b0\n\n\n\n\nDynamic programming (\ub3d9\uc801\uacc4\ud68d\ubc95)\n\n\n\ubb38\uc81c \uc720\ud615\uc774 \ub2e4\uc74c\uacfc \uac19\uc744 \ub54c \uc0ac\uc6a9\ud55c\ub2e4.\n- \ubd80\ubd84 \ubc18\ubcf5 \ubb38\uc81c(Overlapping Subproblem)\n- \ucd5c\uc801 \ubd80\ubd84 \uad6c\uc870(Optimal Substructure)\n\n\n\n\n\n\nMemoization: \uacc4\uc0b0\ub41c \uac12\uc744 memo (caching)\n\n\n\n\n\n\nTop-down \ubc29\uc2dd\n: \uc7ac\uadc0\ud568\uc218 + memoization\uc73c\ub85c caching\ub41c \ubd80\ubd84 \uacb0\uacfc\ub97c \uc77d\uc5b4\uc640 \ud574\uacb0\n\n\nBottom-up \ubc29\uc2dd\n: \uc791\uc740 \ubb38\uc81c\ubd80\ud130 \ud574\uacb0\ud558\uc5ec \ud070 \ubb38\uc81c\ub85c \ubc18\ubcf5\uc9c4\ud589\n\n\n\n\n// Top-down\nint memo[101];\nmemo[1] = 1;\nmemo[2] = 1;\n\nint fib(int n)\n{\n  if (memo[n] != 0) \n    return memo[n];\n  memo[n] = fib(n-1) + fib(n-2);\n  return memo[n];\n}\n\n\n\n\n// Bottom-up\nint memo[101];\nmemo[1] = 1;\nmemo[2] = 1;\n\nint fib(int n)\n{\n  for(int i = 3; i <=n; i++){\n    memo[i] = memo[i-1] + memo[i-2];\n  }\n  return memo[n];\n}\n\n\n\n\n\uacbd\uc6b0\uc758 \uc218 & \uc870\ud569 & \uc21c\uc5f4\n\n\nhttps://coding-factory.tistory.com/606\n\n\n\ucd5c\ub2e8\uacbd\ub85c\n\n\nhttp://pds.joongang.co.kr/news/component/htmlphoto_mmdata/201107/25/htm_20110725003419l000l800-002.JPG",
            "title": "Algorithm"
        },
        {
            "location": "/algorithm/#algorithm-note",
            "text": "",
            "title": "Algorithm note"
        },
        {
            "location": "/algorithm/#basic-data-structure",
            "text": "Stack  Queue  Tree  Prefix Tree (Trie)  PQ (Priority Queue), Max Heap, Min Heap  DFS (Depth First Search)  BFS (Breadth First Search)  DFS with stack  BFS with queue",
            "title": "Basic Data Structure"
        },
        {
            "location": "/algorithm/#shortest-path-algorithm",
            "text": "Dijkstra Algorithm:  \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9; O((V+E)lgV)  priority queue (heap)\ub85c \uc131\ub2a5\ud5a5\uc0c1 \uac00\ub2a5  Bellman-Ford-Moore Algorithm:  \uac00\uc911 \uc720\ud5a5 \uadf8\ub798\ud504(Weighted-Directed Graph)\uc5d0\uc11c \ub178\ub4dc \uc0ac\uc774\uc758 \ucd5c\ub2e8 \uacbd\ub85c \ud0d0\uc0c9; O(VE)  \uc74c\uc218 \uac00\uc911\uce58 \uc0ac\uc6a9\uac00\ub2a5, negative-weight cycles \uc720\ubb34 \ud310\ub2e8 (\ubb34\ud55c \ubc1c\uc0b0\ud558\ubbc0\ub85c ...)  \uadf8\ub798\ud504\uc758 \ub2e8\uc77c \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9  https://victorydntmd.tistory.com/104  Floyd Warshall Algorithm:  \uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 \ub178\ub4dc\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\ub85c\uc758 \uacbd\ub85c \ud0d0\uc0c9 (O(V * V * V))  \uc784\uc758\uc758 \ub178\ub4dc s\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud558\uae30 \uc704\ud574, s\uc640 e \uc0ac\uc774\uc758 \ub178\ub4dc\uc778 m\uc5d0 \ub300\ud574 s\uc5d0\uc11c m\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\uc640 m\uc5d0\uc11c e\uae4c\uc9c0 \uac00\ub294 \ub370 \uac78\ub9ac\ub294 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uc774\uc6a9, \uac00\ub2a5\ud55c \ubaa8\ub4e0 m\uc744 \uacc4\uc0b0",
            "title": "Shortest Path Algorithm (\ucd5c\ub2e8 \uacbd\ub85c \uc54c\uace0\ub9ac\uc998)"
        },
        {
            "location": "/algorithm/#dynamic-programming",
            "text": "\ubb38\uc81c \uc720\ud615\uc774 \ub2e4\uc74c\uacfc \uac19\uc744 \ub54c \uc0ac\uc6a9\ud55c\ub2e4.\n- \ubd80\ubd84 \ubc18\ubcf5 \ubb38\uc81c(Overlapping Subproblem)\n- \ucd5c\uc801 \ubd80\ubd84 \uad6c\uc870(Optimal Substructure)    Memoization: \uacc4\uc0b0\ub41c \uac12\uc744 memo (caching)    Top-down \ubc29\uc2dd : \uc7ac\uadc0\ud568\uc218 + memoization\uc73c\ub85c caching\ub41c \ubd80\ubd84 \uacb0\uacfc\ub97c \uc77d\uc5b4\uc640 \ud574\uacb0  Bottom-up \ubc29\uc2dd : \uc791\uc740 \ubb38\uc81c\ubd80\ud130 \ud574\uacb0\ud558\uc5ec \ud070 \ubb38\uc81c\ub85c \ubc18\ubcf5\uc9c4\ud589   // Top-down\nint memo[101];\nmemo[1] = 1;\nmemo[2] = 1;\n\nint fib(int n)\n{\n  if (memo[n] != 0) \n    return memo[n];\n  memo[n] = fib(n-1) + fib(n-2);\n  return memo[n];\n}  // Bottom-up\nint memo[101];\nmemo[1] = 1;\nmemo[2] = 1;\n\nint fib(int n)\n{\n  for(int i = 3; i <=n; i++){\n    memo[i] = memo[i-1] + memo[i-2];\n  }\n  return memo[n];\n}",
            "title": "Dynamic programming (\ub3d9\uc801\uacc4\ud68d\ubc95)"
        },
        {
            "location": "/algorithm/#_1",
            "text": "https://coding-factory.tistory.com/606",
            "title": "\uacbd\uc6b0\uc758 \uc218 &amp; \uc870\ud569 &amp; \uc21c\uc5f4"
        },
        {
            "location": "/algorithm/#_2",
            "text": "http://pds.joongang.co.kr/news/component/htmlphoto_mmdata/201107/25/htm_20110725003419l000l800-002.JPG",
            "title": "\ucd5c\ub2e8\uacbd\ub85c"
        },
        {
            "location": "/cpp/",
            "text": "C++ study\n\n\nFundamental\n\n\n\n\ncase sensitive\n\n\n\n\nkeywords\n\n\nalignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, class, compl, const, constexpr, const_cast, continue, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq\n\n\nvariables and types\n\n\n\n\ncharacter types\n: \nchar\n, \nchar16_t\n, \nchar32_t\n, \nwchar_t\n\n\ninteger types (signed)\n: \nsigned char\n, \nsigned short\n int, signed \nint\n, signed \nlong\n int, signed \nlong long\n int\n\n\ninteger types (unsigned)\n: \nunsigned char\n, \nunsigned short\n int, \nunsigned\n int, \nunsigned long\n int, \nunsigned long long\n int\n\n\nfloating-point types\n: \nfloat\n, \ndouble\n, \nlong double\n\n\nbolean types\n: \nbool\n\n\nvoid type\n: \nvoid\n (no storage)\n\n\nnull pointer\n: \ndecltype(nullptr)\n\n\n\n\nType size\n\n\ndefinition for fixed-size type: \n<cstdint>\n or \n<limits>\n\n\nDeclaration of variables\n\n\nint a, b;\nfloat c;\n// Variable initialization with declaration\nint x = 0;\nint x (0); // type identifier (initial_value);\nint x {0}; // type identifier {initial_value};\n\n\n\n\nType deduction: auto and decltype\n\n\nint foo = 0;\nauto bar = foo;  // the same as: int bar = foo;\ndecltype(foo) bar;  // the same as: int bar;\n\n\n\n\nString\n\n\nStrings and null-terminated character sequences\n\n\nIn any case, null-terminated character sequences and strings are easily transformed from one another:\n\n\nNull-terminated character sequences can be transformed into strings implicitly, and strings can be transformed into null-terminated character sequences by using either of string's member functions \nc_str\n or \ndata\n:\n\n\nchar myntcs[] = \"some text\";\nstring mystring = myntcs;  // convert c-string to string\ncout << mystring;          // printed as a library string\ncout << mystring.c_str();  // printed as a c-string\n\n\n\n\nConstants\n\n\nConstants are expressions with a fixed value.\n\n\n75         // decimal\n0113       // octal\n0x4b       // hexadecimal\n75         // int\n75u        // unsigned int\n75l        // long\n75ul       // unsigned long\n75lu       // unsigned long\n3.14159    // 3.14159\n6.02e23    // 6.02 x 10^23\n1.6e-19    // 1.6 x 10^-19\n3.0        // 3.0\n3.14159L   // long double\n6.02e23f   // float  \n// character and string literals\n'z'\n'p'\n\"Hello world\"\n\"How do you do?\"\n// escape code\n\"\\n\"    // newline\n\"\\r\"    // carriage return\n\"\\t\"    // tab\n\"\\v\"    // vertical tab\n\"\\b\"    // backspace\n\"\\f\"    // form feed (page feed)\n\"\\a\"    // alert (beep)\n\"\\'\"    // single quote (')\n\"\\\"\"    // double quote (\")\n\"\\?\"    // question mark (?)\n\"\\\\\"    // backslash (\\)\n\"\\x20\" // hexadecimal digits character\n\"\\x4A\"\n\"this forms\" \"a single\"     \" string \"\n\"of characters\" // equivalent to \"this formsa single string of characters\"\n// long string literals using backslash (\\)\nx = \"string expressed in \\\ntwo lines\" // x = \"string expressed in two lines\"\n\n// different character type literals using prefix (not suffixes above)\n// u    char16_t\n// U    char32_t\n// L    wchar_t\n// u8 // UTF-8\nR\"(string with \\backslash)\" // raw string, literal format: R(VALUE)\nR\"&%$(string with \\backslash)&%$\" // = \"string with \\\\backslash\"\n\n// other literals\nbool foo = true;\nbool bar = false;\nint* p = nullptr;\n\n// naming to a constant value\nconst double pi = 3.1415926;\nconst char tab = '\\t';\n\n// Preprocessor definitions (#define) - another mechanism for name constant\n#define PI 3.14159\n#define NEWLINE '\\n'\n\n\n\n\n\nCasting\n\n\nint i;\nfloat f = 3.14;\ni = (int) f;\n\ni = int (f);\n\n\n\n\nsizeof\n\n\nx = sizeof (char);\n\n\n\n\nTable of operation precedence\n\n\n\n\nBasic input/output\n\n\n\n\ncin\n:    standard input stream\n\n\ncout\n:   standard output stream\n\n\ncerr\n:   standard error (output) stream\n\n\nclog\n:   standard logging (output) stream\n\n\nstringstream\n: string stream (make a string as a stream)\n\n\n\n\nRead a line with string stream\n\n\n// stringstreams\n#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main ()\n{\n  string mystr;\n  float price=0;\n  int quantity=0;\n\n  cout << \"Enter price: \";\n  getline (cin,mystr);\n  stringstream(mystr) >> price;\n  cout << \"Enter quantity: \";\n  getline (cin,mystr);\n  stringstream(mystr) >> quantity;\n  cout << \"Total price: \" << price*quantity << endl;\n  return 0;\n}\n\n\n\n\nRange-based loop\n\n\nThe for-loop has another syntax, which is used exclusively with ranges:\n\n\nfor ( declaration : range ) statement;\n\n\n// range-based for loop\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main ()\n{\n  string str {\"Hello!\"};\n  for (char c : str)\n  {\n    cout << \"[\" << c << \"]\";\n  }\n  cout << '\\n';\n}\n// output: [H][e][l][l][o][!]\n\n\n\n\nRange based loops usually also make use of type deduction for the type of the elements with \nauto\n. Typically, the range-based loop above can also be written as:\n\n\nfor (auto c : str)\n  cout << \"[\" << c << \"]\";\n\n\n\n\nHere, the type of c is automatically deduced as the type of the elements in str.\n\n\nThe return value of main()\n\n\n\n\n0\n or    \nEXIT_SUCCESS\n: The program was successful (same as above). This value is defined in header \n<cstdlib>\n.\n\n\nEXIT_FAILURE\n:   The program failed. This value is defined in header \n<cstdlib>\n.\n\n\n\n\nArgument pass by value and by reference\n\n\n// passing parameters by reference\n#include <iostream>\nusing namespace std;\n\nvoid duplicate (int& a, int& b, int& c)\n{\n  a*=2;\n  b*=2;\n  c*=2;\n}\n\nint main ()\n{\n  int x=1, y=3, z=7;\n  duplicate (x, y, z);\n  cout << \"x=\" << x << \", y=\" << y << \", z=\" << z;\n  return 0;\n}\n\n\n\n\nEfficiency considerations and const references\n\n\nstring concatenate (const string& a, const string& b)\n{\n  return a+b;\n}\n\n\n\n\nBy qualifying them as const, the function is forbidden to modify the values of neither a nor b, but can actually access their values as references (aliases of the arguments), without having to make actual copies of the strings.\n\n\nTherefore, const references provide functionality similar to passing arguments by value, but with an increased efficiency for parameters of large types. That is why they are extremely popular in C++ for arguments of compound types. Note though, that for most fundamental types, there is no noticeable difference in efficiency, and in some cases, const references may even be less efficient!\n\n\ninline function\n\n\nPreceding a function declaration with the inline specifier informs the compiler that inline expansion is preferred over the usual function call mechanism for a specific function.\n\n\nFor example, the concatenate function above may be declared inline as:\n\n\ninline string concatenate (const string& a, const string& b)\n{\n  return a+b;\n}\n\n\n\n\nfunction default value\n\n\nint divide (int a, int b=2)\n{\n  int r;\n  r=a/b;\n  return (r);\n}\nint main ()\n{\n  cout << divide (12) << '\\n';\n  cout << divide (20,4) << '\\n';\n  return 0;\n}\n\n\n\n\nC++ Generalization (Overloads and templates)\n\n\noverload\n\n\nThe same function definition with different parameter types.\n\n\n// overloading functions\n#include <iostream>\nusing namespace std;\n\nint operate (int a, int b)\n{\n  return (a*b);\n}\n\ndouble operate (double a, double b)\n{\n  return (a/b);\n}\n\nint main ()\n{\n  int x=5,y=2;\n  double n=5.0,m=2.0;\n  cout << operate (x,y) << '\\n';\n  cout << operate (n,m) << '\\n';\n  return 0;\n}\n\n\n\n\ntemplate <template-parameters> function-declaration\n\n\nThe template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the class or typename keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic sum function could be defined as:\n\n\n// function template\n#include <iostream>\nusing namespace std;\n\ntemplate <class T>\nT sum (T a, T b)\n{\n  T result;\n  result = a + b;\n  return result;\n}\n\nint main () {\n  int i=5, j=6, k;\n  double f=2.0, g=0.5, h;\n  k=sum<int>(i,j);\n  h=sum<double>(f,g);\n\n    // possible to skip angle brackets\n    // k = sum (i,j);\n    // h = sum (f,g);\n\n  cout << k << '\\n';\n  cout << h << '\\n';\n  return 0;\n}\n\n\n\n\nNon-type template arguments (just support the constant expressions)\n\n\n// template arguments\n#include <iostream>\nusing namespace std;\n\ntemplate <class T, int N>\nT fixed_multiply (T val)\n{\n  return val * N;\n}\n\nint main() {\n  std::cout << fixed_multiply<int,2>(10) << '\\n';\n  std::cout << fixed_multiply<int,3>(10) << '\\n';\n}\n\n\n\n\nnampespace (Name visibility)\n\n\n// namespaces\n#include <iostream>\nusing namespace std;\n\nnamespace foo\n{\n  int value() { return 5; }\n}\n\nnamespace bar\n{\n  const double pi = 3.1416;\n  double value() { return 2*pi; }\n}\n\nint main () {\n  cout << foo::value() << '\\n';\n  cout << bar::value() << '\\n';\n  cout << bar::pi << '\\n';\n  return 0;\n}\n\n// Namespaces can be split:\n// Two segments of a code can be declared in the same namespace:\n\nnamespace foo { int a; }\nnamespace bar { int b; }\nnamespace foo { int c; }\n\n\n\n\n\nCompound data types\n\n\nPointer\n\n\nhttp://www.cplusplus.com/doc/tutorial/pointers/\n\n\n\n\nAddress-of operator (\n&\n)\n\n\nDereference operator (\n*\n)\n\n\n\n\nPointers and const\n\n\nPointers can be used to access a variable by its address, and this access may include modifying the value pointed. But it is also possible to declare pointers that can access the pointed value to read it, but not to modify it. For this, it is enough with qualifying the type pointed to by the pointer as \nconst\n. For example:\n\n\nint x;\nint y = 10;\nconst int * p = &y;\nx = *p;          // ok: reading p\n*p = x;          // error: modifying p, which is const-qualified\n\n\n\n\nint x;\n      int *       p1 = &x;  // non-const pointer to non-const int\nconst int *       p2 = &x;  // non-const pointer to const int\n      int * const p3 = &x;  // const pointer to non-const int\nconst int * const p4 = &x;  // const pointer to const int\n\n// To add a little bit more confusion to the syntax of const with pointers,\n// the const qualifier can either precede or follow the pointed type,\n// with the exact same meaning:\nconst int * p2a = &x;  //      non-const pointer to const int\nint const * p2b = &x;  // also non-const pointer to const int\n\n\n\n\nNULL pointer\n\n\nint * p = 0;\nint * q = nullptr;\nint * r = NULL;\n\n\n\n\nPointers to functions\n\n\nint (* func_name)(type,type,...);\n\n\n\n\nDynamic memory\n\n\nint * foo;\nfoo = new int [5];\n// Access: foo[1] or *(foo+1)\n\n// allocation\nfoo = new int [5];  // if allocation fails, an exception is thrown\nfoo = new (nothrow) int [5]; // return null without bad_alloc exception or terminating the program\nif (foo == nullptr) {\n  // error assigning memory. Take measures.\n}\n\n// deletion\ndelete pointer;\ndelete[] pointer;\n\n\n\n\n\nData Structures\n\n\nSkip...\n\n\nType aliases\n\n\ntypedef char C;\ntypedef unsigned int WORD;\ntypedef char * pChar;\ntypedef char field [50];\n\nC mychar, anotherchar, *ptc1;\nWORD myword;\npChar ptc2;\nfield name;\n\n// More recently, a second syntax to define type aliases was introduced in the C++ language:\n// using new_type_name = existing_type ;\n\n// For example, the same type aliases as above could be defined as:\nusing C = char;\nusing WORD = unsigned int;\nusing pChar = char *;\nusing field = char [50];\n\n\n\n\n\nUnion type\n\n\nSkip!\n\n\nEnumerated types (enum)\n\n\n// ## Enumerated types mapping to convertible int.\nenum colors_t {black=1, blue, green, cyan, red, purple, yellow, white};\n\ncolors_t mycolor;\nmycolor = blue;\nif (mycolor == green) mycolor = red;\n\n// ## Enumerated types with enum class\nenum class Colors {black, blue, green, cyan, red, purple, yellow, white};\n\nColors mycolor;\nmycolor = Colors::blue;\nif (mycolor == Colors::green) mycolor = Colors::red;\n\n\n\n\n\nclass\n\n\n\n\naccess_specifier: \nprivate\n, \npublic\n or \nprotected\n\n\nprivate\n members of a class are accessible only from within other members of the same class (or from their \"\nfriends\n\").\n\n\nprotected\n members are accessible from other members of the same class (or from their \"\nfriends\n\"), but also from members of their derived classes.\n\n\nFinally, \npublic\n members are accessible from anywhere where the object is visible.\n\n\n\n\n// classes example\n#include <iostream>\nusing namespace std;\n\nclass Rectangle {\n    int width, height;\n  public:\n    void set_values (int,int);\n    int area() {return width*height;}\n};\n\nvoid Rectangle::set_values (int x, int y) {\n  width = x;\n  height = y;\n}\n\nint main () {\n  Rectangle rect;\n  rect.set_values (3,4);\n  cout << \"area: \" << rect.area();\n  return 0;\n}\n\n\n\n\nMember initialization in constructors\n\n\nclass Rectangle {\n    int width,height;\n  public:\n    Rectangle ();\n    Rectangle(int,int);\n    int area() {return width*height;}\n};\n\nRectangle::Rectangle () {\n  width = 5;\n  height = 5;\n}\n\nRectangle::Rectangle (int x, int y) { width=x; height=y; }\nRectangle::Rectangle (int x, int y) : width(x) { height=y; }\nRectangle::Rectangle (int x, int y) : width(x), height(y) { }\n\n\n\n\nUniform initialization\n\n\n\n\nclass_name object_name = initialization_value;\n\n\nclass_name object_name { value, value, value, ... }\n\n\nclass_name object_name(value, value, value, ... )\n\n\n\n\n// classes and uniform initialization\n#include <iostream>\nusing namespace std;\n\nclass Circle {\n    double radius;\n  public:\n    Circle(double r) { radius = r; }\n    double circum() {return 2*radius*3.14159265;}\n};\n\nint main () {\n  Circle foo (10.0);   // functional form\n  Circle bar = 20.0;   // assignment init.\n  Circle baz {30.0};   // uniform init.\n  Circle qux = {40.0}; // POD-like\n\n  cout << \"foo's circumference: \" << foo.circum() << '\\n';\n  return 0;\n}\n\n\n\n\nOverloading operators\n\n\nOverloadable operators\n\n\n+    -    *    /    =    <    >    +=   -=   *=   /=   <<   >>\n<<=  >>=  ==   !=   <=   >=   ++   --   %    &    ^    !    |\n~    &=   ^=   |=   &&   ||   %=   []   ()   ,    ->*  ->   new\ndelete    new[]     delete[]\n\n\n\n\nasync and future\n\n\n\n\nCalls fn (with args as arguments) at some point, returning without waiting for the execution of fn to complete.\n\n\nhttp://www.cplusplus.com/reference/future/async/?kw=async\n\n\n\n\n#include <cstdio>\n#include <future> // std::async, std::future\n\nusing namespace std;\n\nint fun() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"fun[%d]\\n\", i);\n    }\n\n    return 200;\n}\n\nint main() {\n    //auto fut = async(fun);\n    auto fut = async(launch::async, fun);\n\n    // deferred until .get() or .wait()\n    //auto fut = async(launch::deferred, fun);\n\n    for (int i = 1; i <= 30; i++) {\n        printf(\"main[%d]\\t\", i);\n    }\n    printf(\"\\n\");\n\n    int result = fut.get();\n\n    printf(\"result : %d\\n\", result);\n\n    return 0;\n}",
            "title": "Cpp"
        },
        {
            "location": "/cpp/#c-study",
            "text": "",
            "title": "C++ study"
        },
        {
            "location": "/cpp/#fundamental",
            "text": "case sensitive",
            "title": "Fundamental"
        },
        {
            "location": "/cpp/#keywords",
            "text": "alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, class, compl, const, constexpr, const_cast, continue, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq",
            "title": "keywords"
        },
        {
            "location": "/cpp/#variables-and-types",
            "text": "character types :  char ,  char16_t ,  char32_t ,  wchar_t  integer types (signed) :  signed char ,  signed short  int, signed  int , signed  long  int, signed  long long  int  integer types (unsigned) :  unsigned char ,  unsigned short  int,  unsigned  int,  unsigned long  int,  unsigned long long  int  floating-point types :  float ,  double ,  long double  bolean types :  bool  void type :  void  (no storage)  null pointer :  decltype(nullptr)",
            "title": "variables and types"
        },
        {
            "location": "/cpp/#type-size",
            "text": "definition for fixed-size type:  <cstdint>  or  <limits>",
            "title": "Type size"
        },
        {
            "location": "/cpp/#declaration-of-variables",
            "text": "int a, b;\nfloat c;\n// Variable initialization with declaration\nint x = 0;\nint x (0); // type identifier (initial_value);\nint x {0}; // type identifier {initial_value};",
            "title": "Declaration of variables"
        },
        {
            "location": "/cpp/#type-deduction-auto-and-decltype",
            "text": "int foo = 0;\nauto bar = foo;  // the same as: int bar = foo;\ndecltype(foo) bar;  // the same as: int bar;",
            "title": "Type deduction: auto and decltype"
        },
        {
            "location": "/cpp/#string",
            "text": "",
            "title": "String"
        },
        {
            "location": "/cpp/#strings-and-null-terminated-character-sequences",
            "text": "In any case, null-terminated character sequences and strings are easily transformed from one another:  Null-terminated character sequences can be transformed into strings implicitly, and strings can be transformed into null-terminated character sequences by using either of string's member functions  c_str  or  data :  char myntcs[] = \"some text\";\nstring mystring = myntcs;  // convert c-string to string\ncout << mystring;          // printed as a library string\ncout << mystring.c_str();  // printed as a c-string",
            "title": "Strings and null-terminated character sequences"
        },
        {
            "location": "/cpp/#constants",
            "text": "Constants are expressions with a fixed value.  75         // decimal\n0113       // octal\n0x4b       // hexadecimal\n75         // int\n75u        // unsigned int\n75l        // long\n75ul       // unsigned long\n75lu       // unsigned long\n3.14159    // 3.14159\n6.02e23    // 6.02 x 10^23\n1.6e-19    // 1.6 x 10^-19\n3.0        // 3.0\n3.14159L   // long double\n6.02e23f   // float  \n// character and string literals\n'z'\n'p'\n\"Hello world\"\n\"How do you do?\"\n// escape code\n\"\\n\"    // newline\n\"\\r\"    // carriage return\n\"\\t\"    // tab\n\"\\v\"    // vertical tab\n\"\\b\"    // backspace\n\"\\f\"    // form feed (page feed)\n\"\\a\"    // alert (beep)\n\"\\'\"    // single quote (')\n\"\\\"\"    // double quote (\")\n\"\\?\"    // question mark (?)\n\"\\\\\"    // backslash (\\)\n\"\\x20\" // hexadecimal digits character\n\"\\x4A\"\n\"this forms\" \"a single\"     \" string \"\n\"of characters\" // equivalent to \"this formsa single string of characters\"\n// long string literals using backslash (\\)\nx = \"string expressed in \\\ntwo lines\" // x = \"string expressed in two lines\"\n\n// different character type literals using prefix (not suffixes above)\n// u    char16_t\n// U    char32_t\n// L    wchar_t\n// u8 // UTF-8\nR\"(string with \\backslash)\" // raw string, literal format: R(VALUE)\nR\"&%$(string with \\backslash)&%$\" // = \"string with \\\\backslash\"\n\n// other literals\nbool foo = true;\nbool bar = false;\nint* p = nullptr;\n\n// naming to a constant value\nconst double pi = 3.1415926;\nconst char tab = '\\t';\n\n// Preprocessor definitions (#define) - another mechanism for name constant\n#define PI 3.14159\n#define NEWLINE '\\n'",
            "title": "Constants"
        },
        {
            "location": "/cpp/#casting",
            "text": "int i;\nfloat f = 3.14;\ni = (int) f;\n\ni = int (f);",
            "title": "Casting"
        },
        {
            "location": "/cpp/#sizeof",
            "text": "x = sizeof (char);",
            "title": "sizeof"
        },
        {
            "location": "/cpp/#table-of-operation-precedence",
            "text": "",
            "title": "Table of operation precedence"
        },
        {
            "location": "/cpp/#basic-inputoutput",
            "text": "cin :    standard input stream  cout :   standard output stream  cerr :   standard error (output) stream  clog :   standard logging (output) stream  stringstream : string stream (make a string as a stream)",
            "title": "Basic input/output"
        },
        {
            "location": "/cpp/#read-a-line-with-string-stream",
            "text": "// stringstreams\n#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main ()\n{\n  string mystr;\n  float price=0;\n  int quantity=0;\n\n  cout << \"Enter price: \";\n  getline (cin,mystr);\n  stringstream(mystr) >> price;\n  cout << \"Enter quantity: \";\n  getline (cin,mystr);\n  stringstream(mystr) >> quantity;\n  cout << \"Total price: \" << price*quantity << endl;\n  return 0;\n}",
            "title": "Read a line with string stream"
        },
        {
            "location": "/cpp/#range-based-loop",
            "text": "The for-loop has another syntax, which is used exclusively with ranges:  for ( declaration : range ) statement;  // range-based for loop\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main ()\n{\n  string str {\"Hello!\"};\n  for (char c : str)\n  {\n    cout << \"[\" << c << \"]\";\n  }\n  cout << '\\n';\n}\n// output: [H][e][l][l][o][!]  Range based loops usually also make use of type deduction for the type of the elements with  auto . Typically, the range-based loop above can also be written as:  for (auto c : str)\n  cout << \"[\" << c << \"]\";  Here, the type of c is automatically deduced as the type of the elements in str.",
            "title": "Range-based loop"
        },
        {
            "location": "/cpp/#the-return-value-of-main",
            "text": "0  or     EXIT_SUCCESS : The program was successful (same as above). This value is defined in header  <cstdlib> .  EXIT_FAILURE :   The program failed. This value is defined in header  <cstdlib> .",
            "title": "The return value of main()"
        },
        {
            "location": "/cpp/#argument-pass-by-value-and-by-reference",
            "text": "// passing parameters by reference\n#include <iostream>\nusing namespace std;\n\nvoid duplicate (int& a, int& b, int& c)\n{\n  a*=2;\n  b*=2;\n  c*=2;\n}\n\nint main ()\n{\n  int x=1, y=3, z=7;\n  duplicate (x, y, z);\n  cout << \"x=\" << x << \", y=\" << y << \", z=\" << z;\n  return 0;\n}",
            "title": "Argument pass by value and by reference"
        },
        {
            "location": "/cpp/#efficiency-considerations-and-const-references",
            "text": "string concatenate (const string& a, const string& b)\n{\n  return a+b;\n}  By qualifying them as const, the function is forbidden to modify the values of neither a nor b, but can actually access their values as references (aliases of the arguments), without having to make actual copies of the strings.  Therefore, const references provide functionality similar to passing arguments by value, but with an increased efficiency for parameters of large types. That is why they are extremely popular in C++ for arguments of compound types. Note though, that for most fundamental types, there is no noticeable difference in efficiency, and in some cases, const references may even be less efficient!",
            "title": "Efficiency considerations and const references"
        },
        {
            "location": "/cpp/#inline-function",
            "text": "Preceding a function declaration with the inline specifier informs the compiler that inline expansion is preferred over the usual function call mechanism for a specific function.  For example, the concatenate function above may be declared inline as:  inline string concatenate (const string& a, const string& b)\n{\n  return a+b;\n}",
            "title": "inline function"
        },
        {
            "location": "/cpp/#function-default-value",
            "text": "int divide (int a, int b=2)\n{\n  int r;\n  r=a/b;\n  return (r);\n}\nint main ()\n{\n  cout << divide (12) << '\\n';\n  cout << divide (20,4) << '\\n';\n  return 0;\n}",
            "title": "function default value"
        },
        {
            "location": "/cpp/#c-generalization-overloads-and-templates",
            "text": "overload  The same function definition with different parameter types.  // overloading functions\n#include <iostream>\nusing namespace std;\n\nint operate (int a, int b)\n{\n  return (a*b);\n}\n\ndouble operate (double a, double b)\n{\n  return (a/b);\n}\n\nint main ()\n{\n  int x=5,y=2;\n  double n=5.0,m=2.0;\n  cout << operate (x,y) << '\\n';\n  cout << operate (n,m) << '\\n';\n  return 0;\n}  template <template-parameters> function-declaration  The template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the class or typename keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic sum function could be defined as:  // function template\n#include <iostream>\nusing namespace std;\n\ntemplate <class T>\nT sum (T a, T b)\n{\n  T result;\n  result = a + b;\n  return result;\n}\n\nint main () {\n  int i=5, j=6, k;\n  double f=2.0, g=0.5, h;\n  k=sum<int>(i,j);\n  h=sum<double>(f,g);\n\n    // possible to skip angle brackets\n    // k = sum (i,j);\n    // h = sum (f,g);\n\n  cout << k << '\\n';\n  cout << h << '\\n';\n  return 0;\n}  Non-type template arguments (just support the constant expressions)  // template arguments\n#include <iostream>\nusing namespace std;\n\ntemplate <class T, int N>\nT fixed_multiply (T val)\n{\n  return val * N;\n}\n\nint main() {\n  std::cout << fixed_multiply<int,2>(10) << '\\n';\n  std::cout << fixed_multiply<int,3>(10) << '\\n';\n}",
            "title": "C++ Generalization (Overloads and templates)"
        },
        {
            "location": "/cpp/#nampespace-name-visibility",
            "text": "// namespaces\n#include <iostream>\nusing namespace std;\n\nnamespace foo\n{\n  int value() { return 5; }\n}\n\nnamespace bar\n{\n  const double pi = 3.1416;\n  double value() { return 2*pi; }\n}\n\nint main () {\n  cout << foo::value() << '\\n';\n  cout << bar::value() << '\\n';\n  cout << bar::pi << '\\n';\n  return 0;\n}\n\n// Namespaces can be split:\n// Two segments of a code can be declared in the same namespace:\n\nnamespace foo { int a; }\nnamespace bar { int b; }\nnamespace foo { int c; }",
            "title": "nampespace (Name visibility)"
        },
        {
            "location": "/cpp/#compound-data-types",
            "text": "",
            "title": "Compound data types"
        },
        {
            "location": "/cpp/#pointer",
            "text": "http://www.cplusplus.com/doc/tutorial/pointers/   Address-of operator ( & )  Dereference operator ( * )",
            "title": "Pointer"
        },
        {
            "location": "/cpp/#pointers-and-const",
            "text": "Pointers can be used to access a variable by its address, and this access may include modifying the value pointed. But it is also possible to declare pointers that can access the pointed value to read it, but not to modify it. For this, it is enough with qualifying the type pointed to by the pointer as  const . For example:  int x;\nint y = 10;\nconst int * p = &y;\nx = *p;          // ok: reading p\n*p = x;          // error: modifying p, which is const-qualified  int x;\n      int *       p1 = &x;  // non-const pointer to non-const int\nconst int *       p2 = &x;  // non-const pointer to const int\n      int * const p3 = &x;  // const pointer to non-const int\nconst int * const p4 = &x;  // const pointer to const int\n\n// To add a little bit more confusion to the syntax of const with pointers,\n// the const qualifier can either precede or follow the pointed type,\n// with the exact same meaning:\nconst int * p2a = &x;  //      non-const pointer to const int\nint const * p2b = &x;  // also non-const pointer to const int",
            "title": "Pointers and const"
        },
        {
            "location": "/cpp/#null-pointer",
            "text": "int * p = 0;\nint * q = nullptr;\nint * r = NULL;",
            "title": "NULL pointer"
        },
        {
            "location": "/cpp/#pointers-to-functions",
            "text": "int (* func_name)(type,type,...);",
            "title": "Pointers to functions"
        },
        {
            "location": "/cpp/#dynamic-memory",
            "text": "int * foo;\nfoo = new int [5];\n// Access: foo[1] or *(foo+1)\n\n// allocation\nfoo = new int [5];  // if allocation fails, an exception is thrown\nfoo = new (nothrow) int [5]; // return null without bad_alloc exception or terminating the program\nif (foo == nullptr) {\n  // error assigning memory. Take measures.\n}\n\n// deletion\ndelete pointer;\ndelete[] pointer;",
            "title": "Dynamic memory"
        },
        {
            "location": "/cpp/#data-structures",
            "text": "Skip...",
            "title": "Data Structures"
        },
        {
            "location": "/cpp/#type-aliases",
            "text": "typedef char C;\ntypedef unsigned int WORD;\ntypedef char * pChar;\ntypedef char field [50];\n\nC mychar, anotherchar, *ptc1;\nWORD myword;\npChar ptc2;\nfield name;\n\n// More recently, a second syntax to define type aliases was introduced in the C++ language:\n// using new_type_name = existing_type ;\n\n// For example, the same type aliases as above could be defined as:\nusing C = char;\nusing WORD = unsigned int;\nusing pChar = char *;\nusing field = char [50];",
            "title": "Type aliases"
        },
        {
            "location": "/cpp/#union-type",
            "text": "Skip!",
            "title": "Union type"
        },
        {
            "location": "/cpp/#enumerated-types-enum",
            "text": "// ## Enumerated types mapping to convertible int.\nenum colors_t {black=1, blue, green, cyan, red, purple, yellow, white};\n\ncolors_t mycolor;\nmycolor = blue;\nif (mycolor == green) mycolor = red;\n\n// ## Enumerated types with enum class\nenum class Colors {black, blue, green, cyan, red, purple, yellow, white};\n\nColors mycolor;\nmycolor = Colors::blue;\nif (mycolor == Colors::green) mycolor = Colors::red;",
            "title": "Enumerated types (enum)"
        },
        {
            "location": "/cpp/#class",
            "text": "access_specifier:  private ,  public  or  protected  private  members of a class are accessible only from within other members of the same class (or from their \" friends \").  protected  members are accessible from other members of the same class (or from their \" friends \"), but also from members of their derived classes.  Finally,  public  members are accessible from anywhere where the object is visible.   // classes example\n#include <iostream>\nusing namespace std;\n\nclass Rectangle {\n    int width, height;\n  public:\n    void set_values (int,int);\n    int area() {return width*height;}\n};\n\nvoid Rectangle::set_values (int x, int y) {\n  width = x;\n  height = y;\n}\n\nint main () {\n  Rectangle rect;\n  rect.set_values (3,4);\n  cout << \"area: \" << rect.area();\n  return 0;\n}",
            "title": "class"
        },
        {
            "location": "/cpp/#member-initialization-in-constructors",
            "text": "class Rectangle {\n    int width,height;\n  public:\n    Rectangle ();\n    Rectangle(int,int);\n    int area() {return width*height;}\n};\n\nRectangle::Rectangle () {\n  width = 5;\n  height = 5;\n}\n\nRectangle::Rectangle (int x, int y) { width=x; height=y; }\nRectangle::Rectangle (int x, int y) : width(x) { height=y; }\nRectangle::Rectangle (int x, int y) : width(x), height(y) { }",
            "title": "Member initialization in constructors"
        },
        {
            "location": "/cpp/#uniform-initialization",
            "text": "class_name object_name = initialization_value;  class_name object_name { value, value, value, ... }  class_name object_name(value, value, value, ... )   // classes and uniform initialization\n#include <iostream>\nusing namespace std;\n\nclass Circle {\n    double radius;\n  public:\n    Circle(double r) { radius = r; }\n    double circum() {return 2*radius*3.14159265;}\n};\n\nint main () {\n  Circle foo (10.0);   // functional form\n  Circle bar = 20.0;   // assignment init.\n  Circle baz {30.0};   // uniform init.\n  Circle qux = {40.0}; // POD-like\n\n  cout << \"foo's circumference: \" << foo.circum() << '\\n';\n  return 0;\n}",
            "title": "Uniform initialization"
        },
        {
            "location": "/cpp/#overloading-operators",
            "text": "",
            "title": "Overloading operators"
        },
        {
            "location": "/cpp/#overloadable-operators",
            "text": "+    -    *    /    =    <    >    +=   -=   *=   /=   <<   >>\n<<=  >>=  ==   !=   <=   >=   ++   --   %    &    ^    !    |\n~    &=   ^=   |=   &&   ||   %=   []   ()   ,    ->*  ->   new\ndelete    new[]     delete[]",
            "title": "Overloadable operators"
        },
        {
            "location": "/cpp/#async-and-future",
            "text": "Calls fn (with args as arguments) at some point, returning without waiting for the execution of fn to complete.  http://www.cplusplus.com/reference/future/async/?kw=async   #include <cstdio>\n#include <future> // std::async, std::future\n\nusing namespace std;\n\nint fun() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"fun[%d]\\n\", i);\n    }\n\n    return 200;\n}\n\nint main() {\n    //auto fut = async(fun);\n    auto fut = async(launch::async, fun);\n\n    // deferred until .get() or .wait()\n    //auto fut = async(launch::deferred, fun);\n\n    for (int i = 1; i <= 30; i++) {\n        printf(\"main[%d]\\t\", i);\n    }\n    printf(\"\\n\");\n\n    int result = fut.get();\n\n    printf(\"result : %d\\n\", result);\n\n    return 0;\n}",
            "title": "async and future"
        },
        {
            "location": "/go/",
            "text": "Go handbook\n\n\n\n\nGo handbook\n\n\ncommands\n\n\nenvironment\n\n\nBuild, install and execute a Go executable binary\n\n\nBuilding Go Executables for Multiple Platforms\n\n\nPackage\n\n\nimport other packages\n\n\n\n\n\n\nGo Syntax\n\n\ntype syntax\n\n\nvariables\n\n\nconstant\n\n\nComment\n\n\ncontrol\n\n\ntype conversion\n\n\narray, slice, map\n\n\nmake() and new()\n\n\nfunction\n\n\nPointers\n\n\nStructure (field and method)\n\n\nAnonymous fields in Go Structure\n\n\nInterface (collections of methods)\n\n\nempty interface\n\n\nErrors\n\n\nConcurrency (goroutine)\n\n\nChannel\n\n\nChannel Buffering\n\n\nChannel Synchronization (Waitgroup)\n\n\nSelect (for Channel)\n\n\ncontext\n\n\ncgo\n\n\nCommand-Line\n\n\nempty structure\n\n\nstructTag\n\n\nreflection\n\n\nType assertions\n\n\nType switches\n\n\n\n\n\n\ncgo (golang with C)\n\n\ngo with gRPC\n\n\nUseful commands\n\n\nUseful functions\n\n\npanic() and recover()\n\n\nos.Exit()\n\n\n\n\n\n\nUseful documents\n\n\ngRPC with simple password authentication\n\n\nvscode with golang\n\n\nGo Fuzzing\n\n\n\n\ncommands\n\n\nCommands of golang to use\n\n\n\n\ngo env\n: show environment variables for golang.\n\n\ngo build\n: \n<SOURCE>\n: Compile \n<SOURCE>\n and place it to \n$PWD\n\n\ngo install\n: \n<SOURCE>\n: Compile and Install \n<SOURCE>\n to \n$GOBIN\n.\n\n\n\n\nenvironment\n\n\n\n\n$GOROOT\n: The path of Go binary distribution (default: \n/usr/local/go\n)\n\n\n$GOPATH\n: The path to Go packages to install and build\n\n\n$GOBIN\n: The path to Go executable binaries built\n\n\n\n\n#!/bin/bash\nexport GO111MODULE=off\nexport GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin\n\n\n\n\nBuild, install and execute a Go executable binary\n\n\ncd go-project\nsource env.sh\ngo install src/hello/hello.go\nhello\n\n\n\n\nBuilding Go Executables for Multiple Platforms\n\n\nCFLAGS=\"-I$INCLUDE\" CPPFLAGS=\"-I$INCLUDE\" CC=$TARGET_ARCHITECTURE-gcc GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build\n\n\n\n\nPackage\n\n\nEvery Go program is made up of packages. Programs start running in package main.\n\n\nimport other packages\n\n\nimport {\n    \"fmt\"\n    \"math/rand\"\n}\n\n\n\n\nGo Syntax\n\n\ntype syntax\n\n\n\n\n\ud0c0\uc785 \ud6c4\uc704 \uc815\uc758: \ubcc0\uc218 \uc120\uc5b8\uc2dc type\uc740 \ub4a4\uc5d0 \uba85\uc2dc\n\n\nGo\ub294 \uc815\uc801 \ud0c0\uc785 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\n\n\n\n\n// integer types\nuint8, uint16, uint32, uint64, int8, int16, int32, int64\n\n// floating point number\n// 0/0 = NaN\uc73c\ub85c \ud45c\ud604\nfloat32, float64\n\n// complex number\ncomplex64, complex128\n\nx int\np *int // pointer\na [3]int // array\n\n// function declaration\nfunc main(argc int, argv []string) int\n\n// function variable\nf func(func(int,int) int, int) int\n\n// function variable (return a function)\nf func(func(int,int) int, int) func(int, int) int\n\n// \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uad6c\ud604/ \ud560\ub2f9\nsum := func(a, b int) int { return a+b } (3, 4)\n\n\n\n\nvariables\n\n\n\n\nvar\n keyword \uc0ac\uc6a9\n\n\n:=\n \ucd95\uc57d\ud615 \uc874\uc7ac (\nvar\n \uc0dd\ub7b5)\n\n\nnamespace: global vs local\n\n\n\n\nvar x string\nx = \"hello world\"\nvar y float32 = 10.0\n// implicit variable declaration and value assignment\nz := \"goodbye world\"\nvar (\n    a = 1\n    b = 2\n    c = 10\n)\n\n\n\n\nconstant\n\n\n\n\nconst\n keyword \uc0ac\uc6a9\n\n\ncode \ub0b4\uc5d0\uc11c \uac12 \ubcc0\uacbd \ubd88\uac00\n\n\n\n\nconst x string = \"Hello World\"\nx = \"Some other string\" // error\n// e.g.\nmath.Pi // const variable\n\n\n\n\nComment\n\n\n// line comment\n/* block comment */\n\n\n\n\ncontrol\n\n\nfunc control() {\n    // loop statement\n    i := 1\n    for i <= 10 {\n        i = i + 1\n    }\n    for i := 1; i <= 10; i++ {\n    }\n    // array loop using range keyword\n    x := [5]float64{ 98, 93, 77, 82, 83 }\n    for i, value := range x {\n    }\n    // array loop without index\n    for _, value := range x {\n    }\n\n    // if else statement\n    if i % 2 == 0 {\n        // even\n    }\n    else {\n        // odd\n    }\n    // if statement with initialization\n    if num := 9; num < 0 {\n    } else if num < 10 {\n    } else {\n    }\n\n    // if statement with map (dict or hash)\n    elements := make(map[string]string)\n    elements[\"H\"] = \"Hydrogen\"\n    if name, ok := elements[\"Un\"]; ok {\n        fmt.Println(name, ok)\n    }\n\n    // switch statement\n    switch i {\n        case 0: fmt.Println(\"zero\")\n        case 1: fmt.Println(\"one\")\n        case 2: fmt.Println(\"two\")\n        case 3: fmt.Println(\"three\")\n        default: fmt.Println(\"unknown\")\n    }\n}\n\n\n\n\ntype conversion\n\n\nvar x int = 10\nfloat64(x)\n\n\n\n\narray, slice, map\n\n\n// array\nvar x [5]int\nx[0] = 10\nx[1] = 20\nx[2] = 30\nx[3] = 40\nx[4] = 50\n// [10 20 30 40 50]\nx := [5]float64{ 98, 93, 77, 82, 83 }\n\n// slice (max length\uc774\uc0c1 \uc99d\uac00 x)\nvar x []float64\nx := make([]float64, 5) // create a slice with 5 length using make()\nx := make([]float64, 5, 10) // create a slice with 5 length. 10 is the length of base array.\n\n// arr: array, x: slice for arr slicing\narr := []float64{1,2,3,4,5}\nx := arr[0:5]\narr[:] == arr[0:len(arr)] // true\narr[:5] == arr[0:5] // true\n\n// slice append\nslice1 := []int{1,2,3} // [1,2,3]\nslice2 := append(slice1, 4, 5) // [1,2,3,4,5]\nfmt.Println(slice1, slice2)\n\n// slice copy\nslice1 := []int{1,2,3}\nslice2 := make([]int, 2)\ncopy(slice2, slice1) // [1,2,3]\nfmt.Println(slice1, slice2) // [1,2]\n\n// map (key value pair)\nfunc main() {\n    // var x string\n    // x = \"hello world\"\n    // y := \"goodbye world\"\n    // fmt.Println(x)\n    // fmt.Println(y)\n    // fmt.Println(x == \"hello\")\n    // fmt.Println(x == (\"hello \" + \"world\"))\n\n    // map variable declaration & initialization\n    var x map[string]int\n    x = map[string]int{\n        \"a\": 1,\n    }\n    x[\"key\"] = 10\n    fmt.Println(x)\n\n    elements := map[string]string{\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\",\n    }\n    elements[\"key10\"] = \"value10\"\n    delete(elements, \"key1\")\n    fmt.Println(elements)\n\n    name, ok := elements[\"key2\"]\n    fmt.Println(name, ok)\n\n    if name, ok := elements[\"key1\"]; ok {\n        fmt.Println(name, ok)\n    }\n\n    y := make(map[string]string)\n    y[\"key1000\"] = \"1000\"\n    fmt.Println(y)\n}\n\n\n\n\nmake() and new()\n\n\nmake()\n is used for follows.\n\n\n\n\nCreate a channel\n\n\nCreate a map with space preallocated\n\n\nCreate a slice with space preallocated or with len != cap\n\n\n\n\nIt's a little harder to justify \nnew()\n. The main thing it makes easier is creating pointers to non-composite types. The two functions below are equivalent. One's just a little more concise:\n\n\nfunc newInt1() *int { return new(int) }\n\nfunc newInt2() *int {\n    var i int\n    return &i\n}\n\n\n\n\nfunction\n\n\nfunc add(x int, y int) int {\n    return x + y\n}\n\n// named return variables\nfunc f2() (r int) {\n    r = 1\n    return\n}\n\n// multiple return variables\nfunc f() (int, int) {\n    return 5, 6\n}\n\nfunc main() {\n    x, y := f()\n}\n\n// \uac00\ubcc0\ud568\uc218 Variadic Functions (print\ud568\uc218\ub3c4 \uac00\ubcc0\ud568\uc218)\n// func Println(a ...interface{}) (n int, err error)\nfunc add(args ...int) int {\n    total := 0\n    for _, v := range args {\n         total += v\n    }\n    return total\n}\n\nfunc main() {\n    fmt.Println(add(1,2,3))\n}\n\n// ...\ub97c \uc774\uc6a9\ud574 slice\ub97c argument\ub85c \uc804\ub2ec\nfunc main() {\n    xs := []int{1,2,3}\n    fmt.Println(add(xs...))\n}\n\n// Closures (a function in a function)\nfunc intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}\n\nfunc main() {\n    nextInt := intSeq()\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n\n    newInts := intSeq()\n    fmt.Println(newInts())\n}\n\n// Recursive function\nfunc factorial(x uint) uint {\n    if x == 0 {\n        return 1\n    }\n    return x * factorial(x-1)\n}\n\n// defer (invoked at the end of the block) function\nfunc first() {\n    fmt.Println(\"1st\")\n}\nfunc second() {\n    fmt.Println(\"2nd\")\n}\nfunc main() {\n    defer second()\n    first()\n}\n\n// \uc77c\ubc18\uc801\uc73c\ub85c \ud568\uc218 \uc885\ub8cc\uc2dc \uc790\uc6d0\uc744 \ud574\uc81c\ud560 \ub54c \uc0ac\uc6a9\n// runtime panic\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 \uc2e4\ud589\nf, _ := os.Open(filename)\ndefer f.Close()\n\n// panic and recover functions\n// recover\ub294 defer\uc640 \uc0ac\uc6a9\ud574\uc57c \ud568.\nfunc main() {\n    defer func() {\n        // recover function\n        str := recover()\n        fmt.Println(\"recovery: \", str)\n    }()\n    panic(\"Panic !! string\")\n}\n\n\n\n\nPointers\n\n\ngo\ub294 garbage collection\uc744 \uc9c0\uc6d0\ud558\ubbc0\ub85c point \ud574\uc81c (free)\uac00 \ud544\uc694\uc5c6\uc74c.\n\n\nfunc zero(xPtr *int) {\n    *xPtr = 0\n}\nfunc main() {\n    x := 5\n    zero(&x)\n    fmt.Println(x) // x\ub294 0\n}\n\n// point using new()\nfunc one(xPtr *int) {\n   *xPtr = 1\n}\nfunc main() {\n    xPtr := new(int)\n    one(xPtr)\n    fmt.Println(*xPtr) // x\ub294 1\n}\n\n\n\n\nStructure (field and method)\n\n\n\n\nField\uac00 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 public\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5)\n\n\nField\uac00 \uc18c\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 private\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \ubd88\uac00\ub2a5)\n\n\n\uc544\ub798 \uc608\uc81c\uc5d0\uc11c X, Y, Z\ub294 \uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5\n\n\n\n\n\n// Clircle blarara o\ntype Circle struct {\n    x float64\n    y float64\n    r float64\n\n    X float64\n    Y float64\n    R float64\n}\n\n// call by value function\nfunc circleArea(c Circle) float64 {\n    return math.Pi * (c.r * c.r)\n}\n\n// call by reference function\nfunc circleArea2(c *Circle) float64 {\n    return math.Pi * (c.r * c.r)\n}\n\n// method (define a pointer receiver in parenthesis)\nfunc (c *Circle) area() float64 {\n    return math.Pi * c.r * c.r\n}\n\n// method (define a value receiver in parenthesis)\nfunc (c Circle) area2() float64 {\n    return math.Pi * c.r * c.r\n}\n\nfunc main() {\n    var a Circle\n    fmt.Println(a)\n    var b Circle = Circle{x: 1, y: 2, r: 3}\n    fmt.Println(b)\n    c := Circle{10, 20, 30}\n    fmt.Println(c)\n\n    // Circle pointer\n    d := new(Circle)\n    d.x = 20\n    d.y = 30\n    d.r = 10\n    fmt.Println(d)\n\n    // call by value (copy Circle argument)\n    fmt.Println(circleArea(c))\n    fmt.Println(circleArea(*d))\n\n    // call by reference\n    fmt.Println(circleArea2(d))\n\n    // method\n    fmt.Println(\"method:\", b.area())\n}\n\n\n\n\nAnonymous fields in Go Structure\n\n\n\n\nType\uc774\ub984\uc73c\ub85c field\uac00 \uc0dd\uc131\ub428\n\n\nAnonymous field\ub85c \uc815\uc758\ub41c structure\uc758 field \ubc0f method\ub97c \uc120\uc5b8\ub41c structure\uac00 \uc0c1\uc18d\ud568.\n\n\n\n\ntype Kitchen struct {\n    numOfPlates int\n}\n\ntype House struct {\n    Kitchen    // anonymous field\n    numOfRooms int\n}\n\nfunc main() {\n    //to initialize you have to use composed type name.\n    h := House{Kitchen{10}, 3}\n    //numOfRooms is a field of House\n    fmt.Println(\"House h has this many rooms:\", h.numOfRooms)\n    //numOfPlates is a field of anonymous field Kitchen, so it can be referred to like a field of House\n    fmt.Println(\"House h has this many plates:\", h.numOfPlates)\n    //we can refer to the embedded struct in its entirety by referring to the name of the struct type\n    fmt.Println(\"The Kitchen contents of this house are:\", h.Kitchen)\n}\n\n\n\n\nInterface (collections of methods)\n\n\n\n\nInterfaces are named collections of method signatures.\n\n\n\uad6c\uc870\uccb4(struct)\uac00 \ud544\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4\ub77c\uba74, interface\ub294 \uba54\uc11c\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4\n\n\ninterface\ub294 \ud0c0\uc785(type)\uc774 \uad6c\ud604\ud574\uc57c \ud558\ub294 \uba54\uc11c\ub4dc \uc6d0\ud615(prototype)\ub4e4\uc744 \uc815\uc758\ud568.\n\n\ntype\uc758 interface\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \ub2e8\uc21c\ud788 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uac16\ub294 \ubaa8\ub4e0 \uba54\uc11c\ub4dc\ub4e4\uc744 \uad6c\ud604\ud558\uba74 \ub428.\n\n\nInterface \ubcc0\uc218\ub294 1) interface type\uacfc 2) \uc2e4\uc81c \uac00\ub9ac\ud0a4\ub294 data \uc8fc\uc18c\ub85c \uc774\ub8e8\uc5b4\uc9d0\n\n\n\n\n\n\n// Shape interface type definition\ntype Shape interface {\n    area() float64\n    perimeter() float64\n}\n\n//Rect \uc815\uc758\ntype Rect struct {\n    width, height float64\n}\n\n//Circle \uc815\uc758\ntype Circle struct {\n    radius float64\n}\n\n//Rect \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\nfunc (r Rect) area() float64 { return r.width * r.height }\nfunc (r Rect) perimeter() float64 {\n    return 2 * (r.width + r.height)\n}\n\n//Circle \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\nfunc (c Circle) area() float64 {\n    return math.Pi * c.radius * c.radius\n}\nfunc (c Circle) perimeter() float64 {\n    return 2 * math.Pi * c.radius\n}\n\nfunc main() {\n    r := Rect{10., 20.}\n    c := Circle{10}\n\n    showArea(r, c)\n}\n\nfunc showArea(shapes ...Shape) {\n    for _, s := range shapes {\n        a := s.area() //\uc778\ud130\ud398\uc774\uc2a4 \uba54\uc11c\ub4dc \ud638\ucd9c\n        println(a)\n    }\n}\n\n// interface field in structure\n// [FIXME] how to ?\n\n\n\n\n//  example 2.\ntype Abser interface {\n    Abs() float64\n}\n\nfunc main() {\n    var a Abser\n    f := MyFloat(-math.Sqrt2)\n    v := Vertex{3, 4}\n\n    a = f // a MyFloat implements Abser\n    fmt.Println(a.Abs())\n    a = &v // a *Vertex implements Abser\n\n    fmt.Println(a.Abs())\n}\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f < 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\n\n\n\nempty interface\n\n\n\n\n\uc5b4\ub5a0\ud55c Type\ub3c4 \ub2f4\uc744 \uc218 interface\n\n\n\n\n\n\nfunc Marshal(v interface{}) ([]byte, error);\nfunc Println(a ...interface{}) (n int, err error);\n\n\n\n\nfunc main() {\n    var i interface{}\n    describe(i)\n\n    i = 42\n    describe(i)\n\n    i = \"hello\"\n    describe(i)\n}\n\nfunc describe(i interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n// (<nil>, <nil>)\n// (42, int)\n// (hello, string)\n\n\n\n\nErrors\n\n\n\n\nBy convention, errors are the last return value and have type error, a built-in interface.\n\n\nerrors.New\n constructs a basic error value with the given error message.\n\n\nA \nnil\n value in the error position indicates that there was \nno error\n.\n\n\n\n\nfunc f1(arg int) (int, error) {\n    if arg == 42 {\n        return -1, errors.New(\"can't work with 42\")\n    }\n    return arg + 3, nil\n}\n\nfunc main() {\n    for _, i := range []int{7, 42} {\n        if r, e := f1(i); e != nil {\n            fmt.Println(\"f1 failed:\", e)\n        } else {\n            fmt.Println(\"f1 worked:\", r)\n        }\n    }\n}\n\n\n\n\nConcurrency (goroutine)\n\n\n// goroutine to support concurrency\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc f(from string) {\n    for i := 0; i < 3; i++ {\n        fmt.Println(from, \":\", i)\n    }\n}\n\nfunc main() {\n\n    f(\"direct\")\n\n    go f(\"goroutine\")\n\n    go func(msg string) {\n        fmt.Println(msg)\n    }(\"going\")\n\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n}\n\n\n\n\nChannel\n\n\nChannels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.\n\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n    messages := make(chan string)\n\n    go func() { messages <- \"ping\" }()\n\n    msg := <-messages\n    fmt.Println(msg)\n}\n\n\n\n\n# Channel direction\n# channel\uc758 \ubc29\ud5a5\uc744 \uc9c0\uc815\uac00\ub2a5\ud568.\n\nfunc pinger(c chan<- string)\nfunc printer(c <-chan string)\n\n\n\n\nChannel Buffering\n\n\nBy default channels are unbuffered, meaning that they will only accept sends (chan <-) if there is a corresponding receive (<- chan) ready to receive the sent value.\n\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n    messages := make(chan string, 2)\n\n    messages <- \"buffered\"\n    messages <- \"channel\"\n\n    fmt.Println(<-messages)\n    fmt.Println(<-messages)\n}\n\n\n\n\nChannel Synchronization (Waitgroup)\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(done chan bool) {\n    fmt.Print(\"working...\")\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n    done <- true\n}\n\nfunc main() {\n    done := make(chan bool, 1)\n    go worker(done)\n    <-done\n}\n\n\n\n\n// goroutine with WaitGroup\npackage main\n\nimport \"sync\"\nimport \"fmt\"\nimport \"time\"\n\ntype Object struct {\n    //data\n}\n\nfunc (obj *Object) Update(wg *sync.WaitGroup) {\n    //update data\n    time.Sleep(time.Second)\n    fmt.Println(\"Update done\")\n    wg.Done()\n    return\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    list := make([]Object, 5)\n    for {\n        for _, object := range list {\n            wg.Add(1)\n            go object.Update(&wg)\n        }\n        //now everything has been updated. start again\n        wg.Wait()\n        fmt.Println(\"Group done\")\n    }\n}\n\n\n\n\nSelect (for Channel)\n\n\nGo\u2019s select lets you wait on multiple channel operations. Combining goroutines and channels with select is a powerful feature of Go.\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    c1 := make(chan string)\n    c2 := make(chan string)\n\n    go func() {\n        for {\n            c1 <- \"from 1\"\n            time.Sleep(time.Second * 2)\n        }\n    }()\n    go func() {\n        for {\n            c2 <- \"from 2\"\n            time.Sleep(time.Second * 3)\n        }\n    }()\n    go func() {\n        for {\n            select {\n            case msg1 := <-c1:\n                fmt.Println(msg1)\n            case msg2 := <-c2:\n                fmt.Println(msg2)\n            case current := <-time.After(time.Second):\n                fmt.Println(current)\n            }\n        }\n    }()\n\n    var input string\n    fmt.Scanln(&input)\n}\n\n\n\n\ncontext\n\n\nA way to think about context package in go is that it allows you to pass in a \u201ccontext\u201d to your program. Context like a timeout or deadline or a channel to indicate stop working and return.\n\n\n\n\nhttps://jaehue.github.io/post/how-to-use-golang-context/\n\n\nhttp://p.agnihotry.com/post/understanding_the_context_package_in_golang/\n\n\n\n\nfunc longFunc() string {\n    <-time.After(time.Second * 3) // long running job\n    return \"Success\"\n}\n\nfunc longFuncWithCtx(ctx context.Context) (string, error) {\n    done := make(chan string)\n\n    go func() {\n        done <- longFunc()\n    }()\n\n    select {\n    case result := <-done:\n        return result, nil\n    case <-ctx.Done():\n        return \"Fail\", ctx.Err()\n    }\n}\n\n\n\n\ncgo\n\n\npackage main\n\n/*\n#include <stdio.h>\n\nextern int sum(int a, int b); // Go \uc5b8\uc5b4\uc758 \ud568\uc218\ub294 extern\uc73c\ub85c \uc120\uc5b8\n\nstatic inline void CExample() {\n    int r = sum(1, 2); // Go \uc5b8\uc5b4\uc758 sum \ud568\uc218 \ud638\ucd9c\n    printf(\"%d\\n\", r);\n}\n*/\nimport \"C\"\n\n//export sum\nfunc sum(a, b C.int) C.int { // C \uc5b8\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub9e4\uac1c\ubcc0\uc218\uc640 \ub9ac\ud134\uac12 \uc790\ub8cc\ud615\uc744\n                             // C \uc5b8\uc5b4\uc6a9\uc73c\ub85c \ub9de\ucdb0\uc90c\n    return a + b\n}\n\nfunc main() {\n    C.CExample()\n}\n\n\n\n\npackage test\n\n/*\n#include <stdio.h>\n\nint sum(int a, int b) // \ub367\uc148 \ud568\uc218 \uc791\uc131\n{\n    return a + b;\n}\n\nvoid hello() // Hello, world! \ucd9c\ub825 \ud568\uc218 \uc791\uc131\n{\n    printf(\"Hello, world!\\n\");\n}\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    var a, b int = 1, 2\n    r := C.sum(C.int(a), C.int(b)) // C \uc5b8\uc5b4 \ud568\uc218 sum \ud638\ucd9c\n    fmt.Println(r)                 // 3\n\n    C.hello() // Hello, world!\n}\n\n\n\n\nCommand-Line\n\n\nThe way to get program start argument and options.\n\n\n\n// Command-Line Arguments and Flags\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    argWithName := os.Args\n    argWithoutName := os.Args[1:]\n    arg := os.Args[3]\n\n    fmt.Println(argWithName)\n    fmt.Println(argWithoutName)\n    fmt.Println(arg)\n\n    wordPtr := flag.String(\"word\", \"default\", \"a string option\")\n    numbPtr := flag.Int(\"num\", 1, \"integer option\")\n    boolPtr := flag.Bool(\"bool\", false, \"boolean option\")\n    var sval string\n    flag.StringVar(&sval, \"str-var\", \"default\", \"string variable option\")\n    flag.Parse()\n    fmt.Println(\"word:\", *wordPtr)\n    fmt.Println(\"num:\", *numbPtr)\n    fmt.Println(\"bool:\", *boolPtr)\n    fmt.Println(\"str-var:\", sval)\n    fmt.Println(\"tail:\", flag.Args())\n}\n\n// Command-Line subcommands\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n\n    fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError)\n    fooEnable := fooCmd.Bool(\"enable\", false, \"enable\")\n    fooName := fooCmd.String(\"name\", \"\", \"name\")\n\n    barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError)\n    barLevel := barCmd.Int(\"level\", 0, \"level\")\n\n    if len(os.Args) < 2 {\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n\n    switch os.Args[1] {\n\n    case \"foo\":\n        fooCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'foo'\")\n        fmt.Println(\"  enable:\", *fooEnable)\n        fmt.Println(\"  name:\", *fooName)\n        fmt.Println(\"  tail:\", fooCmd.Args())\n    case \"bar\":\n        barCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'bar'\")\n        fmt.Println(\"  level:\", *barLevel)\n        fmt.Println(\"  tail:\", barCmd.Args())\n    default:\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n}\n\n// usage\n\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    flag.Usage = func() {\n        fmt.Printf(\"Usage of %s:\\n\", os.Args[0])\n        fmt.Printf(\"    example7 file1 file2 ...\\n\")\n        flag.PrintDefaults()\n    }\n    flag.Parse()\n}\n\n\n\n\n\n\nhttps://www.digitalocean.com/community/tutorials/how-to-use-the-flag-package-in-go\n\n\n\n\nempty structure\n\n\npackage main\n\nimport \"fmt\"\n\ntype Duck struct {\n}\n\nfunc (d Duck) quack() {\n    fmt.Println(\"Quack~\")\n}\n\nfunc (d Duck) feathers() {\n    fmt.Println(\"White and gray feathers\")\n}\n\ntype Person struct {\n}\n\nfunc (p Person) quack() {\n    fmt.Println(\"No Quack~\")\n}\n\nfunc (p Person) feathers() {\n    fmt.Println(\"no feathers\")\n}\n\ntype Quacker interface {\n    quack()\n    feathers()\n}\n\nfunc inTheForest(q ...Quacker) {\n    for _, entry := range q {\n        fmt.Printf(\"%T\\n\", entry)\n        entry.feathers()\n        entry.quack()\n    }\n}\n\nfunc main() {\n    var donald Duck\n    var john Person\n    inTheForest(donald, john)\n}\n\n\n\n\n\nstructTag\n\n\nA StructTag is the tag string in a struct field.\nBy convention, tag strings are a concatenation of optionally space-separated key:\"value\" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '\"'), and colon (U+003A ':'). Each value is quoted using U+0022 '\"' characters and Go string literal syntax.\n\n\n\n\nhttps://golang.org/pkg/reflect/#StructTag\n\n\nhttps://golangbot.com/reflection/\n\n\n\n\n\n\nFormat: \ntype StructTag string\n\n\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    type S struct {\n        F string `species:\"gopher\" color:\"blue\"`\n    }\n\n    s := S{}\n    st := reflect.TypeOf(s)\n    field := st.Field(0)\n    fmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\"))\n}\n\n\n\n\nreflection\n\n\n\ntype Person struct {\n    name string `tag1:\"1\" tag2:\"2\"`\n    age  int    `tag1:\"\ub098\uc774\" tag2:\"Age\"`\n}\n\nfunc main() {\n    var i int = 1\n    var s string = \"hello world\"\n    var f float32 = 1.3\n\n    fmt.Println(reflect.TypeOf(i))\n    fmt.Println(reflect.TypeOf(s))\n    fmt.Println(reflect.TypeOf(f))\n    t := reflect.TypeOf(f)\n    v := reflect.ValueOf(f)\n    fmt.Println(\"\")\n    fmt.Println(\"float32 reflection\")\n    fmt.Println(\"==================\")\n    fmt.Println(t.Name())\n    fmt.Println(t.Size())\n    fmt.Println(t.Kind() == reflect.Float32)\n    fmt.Println(t.Kind() == reflect.Float64)\n    fmt.Println(v.Type())\n    fmt.Println(v.Kind() == reflect.Float32)\n    fmt.Println(v.Kind() == reflect.Float64)\n    fmt.Println(v.Float())\n    fmt.Println(v)\n\n    fmt.Println(\"\")\n    fmt.Println(\"struct reflection\")\n    fmt.Println(\"==================\")\n    var d Person = Person{\"myname\", 3}\n    var p *Person = &d\n    fmt.Println(reflect.TypeOf(d))\n    name, ok := reflect.TypeOf(d).FieldByName(\"name\")\n    fmt.Println(\"num of fields\", reflect.TypeOf(d).NumField())\n    fmt.Println(ok, name.Tag.Get(\"tag1\"), name.Tag.Get(\"tag2\"))\n    age, ok := reflect.TypeOf(d).FieldByName(\"age\")\n    fmt.Println(ok, age.Tag.Get(\"tag1\"), age.Tag.Get(\"tag2\"))\n    fmt.Println(reflect.TypeOf(p))\n    fmt.Println(reflect.ValueOf(p))\n    fmt.Println(reflect.ValueOf(p).Elem()) // reflection of pointer\n    fmt.Println(reflect.ValueOf(p).Elem().FieldByName(\"name\"),\n        reflect.ValueOf(p).Elem().FieldByName(\"age\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\"interface reflection\")\n    fmt.Println(\"==================\")\n    var b interface{}\n    b = 1\n    fmt.Println(reflect.TypeOf(b))\n    fmt.Println(reflect.ValueOf(b))\n    fmt.Println(reflect.ValueOf(b).Int())\n    // fmt.Println(reflect.ValueOf(b).Elem()) // Runtime error\n}\n\n\n\n\nType assertions\n\n\nA type assertion doesn\u2019t really convert an interface to another data type, but it provides access to an interface\u2019s concrete value, which is typically what you want.\n\n\nThe type assertion x.(T) asserts that the concrete value stored in x is of type T, and that x is not nil.\n\n\n\n\nIf T is not an interface, it asserts that the dynamic type of x is identical to T.\n\n\nIf T is an interface, it asserts that the dynamic type of x implements T.\n\n\n\n\nvar x interface{} = \"foo\"\n\nvar s string = x.(string)\nfmt.Println(s)     // \"foo\"\n\ns, ok := x.(string)\nfmt.Println(s, ok) // \"foo true\"\n\nn, ok := x.(int)\nfmt.Println(n, ok) // \"0 false\"\n\nn = x.(int)        // ILLEGAL\n\n\n\n\nType switches\n\n\ntype switch performs several type assertions in series and runs the first case with a matching type.\n\n\nvar x interface{} = \"foo\"\n\nswitch v := x.(type) {\ncase nil:\n    fmt.Println(\"x is nil\")            // here v has type interface{}\ncase int:\n    fmt.Println(\"x is\", v)             // here v has type int\ncase bool, string:\n    fmt.Println(\"x is bool or string\") // here v has type interface{}\ndefault:\n    fmt.Println(\"type unknown\")        // here v has type interface{}\n}\n\n\n\n\ncgo (golang with C)\n\n\npackage main\n\n// typedef int (*intFunc) ();\n//\n// int\n// bridge_int_func(intFunc f)\n// {\n//      return f();\n// }\n//\n// int fortytwo()\n// {\n//      return 42;\n// }\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    f := C.intFunc(C.fortytwo)\n    fmt.Println(int(C.bridge_int_func(f)))\n    // Output: 42\n}\n\n\n\n\n\n\nhttps://eli.thegreenplace.net/2019/passing-callbacks-and-pointers-to-cgo/\n\n\n\n\ngo with gRPC\n\n\ngo get google.golang.org/grpc\ngo get -u github.com/golang/protobuf/protoc-gen-go\n<!-- plugins: grpc interface \uc0dd\uc131\ud568. -->\nprotoc -I <PATH_TO_INCLUDE> --go_out=plugins=grpc:<PATH_TO_GENERATE> <PATH_TO_PROTO_FILE>\nprotoc -I <PATH_TO_INCLUDE> --go_out=noti <PATH_TO_PROTO_FILE>\n\n\n\n\nUseful commands\n\n\n# show go doc on web\ngo get -v golang.org/x/tools/cmd/godoc\ngodoc fmt.Println\n\n# build package\ncd $GOPATH/src\ngo build <TARGET_DIR=PACKAGE> # test build\ngo install <TARGET_DIR=PACKAGE> # copy *.so to $GOPATH/pkg\n\n\n\n\n\nUseful functions\n\n\npanic() and recover()\n\n\nThey Generate an runtime error and recover (receive) the runtime error.\n\n\nos.Exit()\n\n\nUse os.Exit to immediately exit with a given status. \ndefer\ns will not be run when using os.Exit, so this fmt.Println will never be called.\n\n\nUseful documents\n\n\n\n\nhttps://github.com/golang-kr/golang-doc/wiki/Go-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\n\n\nhttps://golang.org/doc/effective_go.html\n\n\n\n\ngRPC with simple password authentication\n\n\n// client\ngrpc.Dial(target,\n    grpc.WithInsecure(),\n    grpc.WithPerRPCCredentials(&loginCreds{\n    Username: \"admin\",\n    Password: \"admin123\",\n}))\n\ntype loginCreds struct {\n    Username, Password string\n}\n\nfunc (c *loginCreds) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n    return map[string]string{\n        \"username\": c.Username,\n        \"password\": c.Password,\n    }, nil\n}\n\nfunc (c *loginCreds) RequireTransportSecurity() bool {\n    return true\n}\n\n// server\ngrpc.NewServer(\n    grpc.StreamInterceptor(streamInterceptor), \n    grpc.UnaryInterceptor(unaryInterceptor)\n)\n\nfunc streamInterceptor(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n    if err := authorize(stream.Context()); err != nil {\n        return err\n    }\n\n    return handler(srv, stream)\n}\n\nfunc unaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n    if err := authorize(ctx); err != nil {\n        return err\n    }\n\n    return handler(ctx, req)\n}\n\nfunc authorize(ctx context.Context) error {\n    if md, ok := metadata.FromContext(ctx); ok {\n        if len(md[\"username\"]) > 0 && md[\"username\"][0] == \"admin\" &&\n            len(md[\"password\"]) > 0 && md[\"password\"][0] == \"admin123\" {\n            return nil\n        }\n\n        return AccessDeniedErr\n    }\n\n    return EmptyMetadataErr\n}\n\n\n\n\nvscode with golang\n\n\n\n\nhttps://github.com/Microsoft/vscode-go/issues/441\n\n\nhttps://rominirani.com/setup-go-development-environment-with-visual-studio-code-7ea5d643a51a\n\n\n\n\ngo get -u github.com/nsf/gocode\n\n\n\n\nGo Fuzzing\n\n\nFuzzing is a type of automated testing which continuously manipulates inputs to a program to find bugs.\n\n\n\n\n\uc784\uc758\uc758 \uac12\uc744 \uc785\ub825\ud558\uc5ec functional test\ub97c \uc218\ud589\ud558\ub294 test framework\uc774\ub77c \ubcfc \uc218 \uc788\uc74c.",
            "title": "Go"
        },
        {
            "location": "/go/#go-handbook",
            "text": "Go handbook  commands  environment  Build, install and execute a Go executable binary  Building Go Executables for Multiple Platforms  Package  import other packages    Go Syntax  type syntax  variables  constant  Comment  control  type conversion  array, slice, map  make() and new()  function  Pointers  Structure (field and method)  Anonymous fields in Go Structure  Interface (collections of methods)  empty interface  Errors  Concurrency (goroutine)  Channel  Channel Buffering  Channel Synchronization (Waitgroup)  Select (for Channel)  context  cgo  Command-Line  empty structure  structTag  reflection  Type assertions  Type switches    cgo (golang with C)  go with gRPC  Useful commands  Useful functions  panic() and recover()  os.Exit()    Useful documents  gRPC with simple password authentication  vscode with golang  Go Fuzzing",
            "title": "Go handbook"
        },
        {
            "location": "/go/#commands",
            "text": "Commands of golang to use   go env : show environment variables for golang.  go build :  <SOURCE> : Compile  <SOURCE>  and place it to  $PWD  go install :  <SOURCE> : Compile and Install  <SOURCE>  to  $GOBIN .",
            "title": "commands"
        },
        {
            "location": "/go/#environment",
            "text": "$GOROOT : The path of Go binary distribution (default:  /usr/local/go )  $GOPATH : The path to Go packages to install and build  $GOBIN : The path to Go executable binaries built   #!/bin/bash\nexport GO111MODULE=off\nexport GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin",
            "title": "environment"
        },
        {
            "location": "/go/#build-install-and-execute-a-go-executable-binary",
            "text": "cd go-project\nsource env.sh\ngo install src/hello/hello.go\nhello",
            "title": "Build, install and execute a Go executable binary"
        },
        {
            "location": "/go/#building-go-executables-for-multiple-platforms",
            "text": "CFLAGS=\"-I$INCLUDE\" CPPFLAGS=\"-I$INCLUDE\" CC=$TARGET_ARCHITECTURE-gcc GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build",
            "title": "Building Go Executables for Multiple Platforms"
        },
        {
            "location": "/go/#package",
            "text": "Every Go program is made up of packages. Programs start running in package main.",
            "title": "Package"
        },
        {
            "location": "/go/#import-other-packages",
            "text": "import {\n    \"fmt\"\n    \"math/rand\"\n}",
            "title": "import other packages"
        },
        {
            "location": "/go/#go-syntax",
            "text": "",
            "title": "Go Syntax"
        },
        {
            "location": "/go/#type-syntax",
            "text": "\ud0c0\uc785 \ud6c4\uc704 \uc815\uc758: \ubcc0\uc218 \uc120\uc5b8\uc2dc type\uc740 \ub4a4\uc5d0 \uba85\uc2dc  Go\ub294 \uc815\uc801 \ud0c0\uc785 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4   // integer types\nuint8, uint16, uint32, uint64, int8, int16, int32, int64\n\n// floating point number\n// 0/0 = NaN\uc73c\ub85c \ud45c\ud604\nfloat32, float64\n\n// complex number\ncomplex64, complex128\n\nx int\np *int // pointer\na [3]int // array\n\n// function declaration\nfunc main(argc int, argv []string) int\n\n// function variable\nf func(func(int,int) int, int) int\n\n// function variable (return a function)\nf func(func(int,int) int, int) func(int, int) int\n\n// \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uad6c\ud604/ \ud560\ub2f9\nsum := func(a, b int) int { return a+b } (3, 4)",
            "title": "type syntax"
        },
        {
            "location": "/go/#variables",
            "text": "var  keyword \uc0ac\uc6a9  :=  \ucd95\uc57d\ud615 \uc874\uc7ac ( var  \uc0dd\ub7b5)  namespace: global vs local   var x string\nx = \"hello world\"\nvar y float32 = 10.0\n// implicit variable declaration and value assignment\nz := \"goodbye world\"\nvar (\n    a = 1\n    b = 2\n    c = 10\n)",
            "title": "variables"
        },
        {
            "location": "/go/#constant",
            "text": "const  keyword \uc0ac\uc6a9  code \ub0b4\uc5d0\uc11c \uac12 \ubcc0\uacbd \ubd88\uac00   const x string = \"Hello World\"\nx = \"Some other string\" // error\n// e.g.\nmath.Pi // const variable",
            "title": "constant"
        },
        {
            "location": "/go/#comment",
            "text": "// line comment\n/* block comment */",
            "title": "Comment"
        },
        {
            "location": "/go/#control",
            "text": "func control() {\n    // loop statement\n    i := 1\n    for i <= 10 {\n        i = i + 1\n    }\n    for i := 1; i <= 10; i++ {\n    }\n    // array loop using range keyword\n    x := [5]float64{ 98, 93, 77, 82, 83 }\n    for i, value := range x {\n    }\n    // array loop without index\n    for _, value := range x {\n    }\n\n    // if else statement\n    if i % 2 == 0 {\n        // even\n    }\n    else {\n        // odd\n    }\n    // if statement with initialization\n    if num := 9; num < 0 {\n    } else if num < 10 {\n    } else {\n    }\n\n    // if statement with map (dict or hash)\n    elements := make(map[string]string)\n    elements[\"H\"] = \"Hydrogen\"\n    if name, ok := elements[\"Un\"]; ok {\n        fmt.Println(name, ok)\n    }\n\n    // switch statement\n    switch i {\n        case 0: fmt.Println(\"zero\")\n        case 1: fmt.Println(\"one\")\n        case 2: fmt.Println(\"two\")\n        case 3: fmt.Println(\"three\")\n        default: fmt.Println(\"unknown\")\n    }\n}",
            "title": "control"
        },
        {
            "location": "/go/#type-conversion",
            "text": "var x int = 10\nfloat64(x)",
            "title": "type conversion"
        },
        {
            "location": "/go/#array-slice-map",
            "text": "// array\nvar x [5]int\nx[0] = 10\nx[1] = 20\nx[2] = 30\nx[3] = 40\nx[4] = 50\n// [10 20 30 40 50]\nx := [5]float64{ 98, 93, 77, 82, 83 }\n\n// slice (max length\uc774\uc0c1 \uc99d\uac00 x)\nvar x []float64\nx := make([]float64, 5) // create a slice with 5 length using make()\nx := make([]float64, 5, 10) // create a slice with 5 length. 10 is the length of base array.\n\n// arr: array, x: slice for arr slicing\narr := []float64{1,2,3,4,5}\nx := arr[0:5]\narr[:] == arr[0:len(arr)] // true\narr[:5] == arr[0:5] // true\n\n// slice append\nslice1 := []int{1,2,3} // [1,2,3]\nslice2 := append(slice1, 4, 5) // [1,2,3,4,5]\nfmt.Println(slice1, slice2)\n\n// slice copy\nslice1 := []int{1,2,3}\nslice2 := make([]int, 2)\ncopy(slice2, slice1) // [1,2,3]\nfmt.Println(slice1, slice2) // [1,2]\n\n// map (key value pair)\nfunc main() {\n    // var x string\n    // x = \"hello world\"\n    // y := \"goodbye world\"\n    // fmt.Println(x)\n    // fmt.Println(y)\n    // fmt.Println(x == \"hello\")\n    // fmt.Println(x == (\"hello \" + \"world\"))\n\n    // map variable declaration & initialization\n    var x map[string]int\n    x = map[string]int{\n        \"a\": 1,\n    }\n    x[\"key\"] = 10\n    fmt.Println(x)\n\n    elements := map[string]string{\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\",\n    }\n    elements[\"key10\"] = \"value10\"\n    delete(elements, \"key1\")\n    fmt.Println(elements)\n\n    name, ok := elements[\"key2\"]\n    fmt.Println(name, ok)\n\n    if name, ok := elements[\"key1\"]; ok {\n        fmt.Println(name, ok)\n    }\n\n    y := make(map[string]string)\n    y[\"key1000\"] = \"1000\"\n    fmt.Println(y)\n}",
            "title": "array, slice, map"
        },
        {
            "location": "/go/#make-and-new",
            "text": "make()  is used for follows.   Create a channel  Create a map with space preallocated  Create a slice with space preallocated or with len != cap   It's a little harder to justify  new() . The main thing it makes easier is creating pointers to non-composite types. The two functions below are equivalent. One's just a little more concise:  func newInt1() *int { return new(int) }\n\nfunc newInt2() *int {\n    var i int\n    return &i\n}",
            "title": "make() and new()"
        },
        {
            "location": "/go/#function",
            "text": "func add(x int, y int) int {\n    return x + y\n}\n\n// named return variables\nfunc f2() (r int) {\n    r = 1\n    return\n}\n\n// multiple return variables\nfunc f() (int, int) {\n    return 5, 6\n}\n\nfunc main() {\n    x, y := f()\n}\n\n// \uac00\ubcc0\ud568\uc218 Variadic Functions (print\ud568\uc218\ub3c4 \uac00\ubcc0\ud568\uc218)\n// func Println(a ...interface{}) (n int, err error)\nfunc add(args ...int) int {\n    total := 0\n    for _, v := range args {\n         total += v\n    }\n    return total\n}\n\nfunc main() {\n    fmt.Println(add(1,2,3))\n}\n\n// ...\ub97c \uc774\uc6a9\ud574 slice\ub97c argument\ub85c \uc804\ub2ec\nfunc main() {\n    xs := []int{1,2,3}\n    fmt.Println(add(xs...))\n}\n\n// Closures (a function in a function)\nfunc intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}\n\nfunc main() {\n    nextInt := intSeq()\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n\n    newInts := intSeq()\n    fmt.Println(newInts())\n}\n\n// Recursive function\nfunc factorial(x uint) uint {\n    if x == 0 {\n        return 1\n    }\n    return x * factorial(x-1)\n}\n\n// defer (invoked at the end of the block) function\nfunc first() {\n    fmt.Println(\"1st\")\n}\nfunc second() {\n    fmt.Println(\"2nd\")\n}\nfunc main() {\n    defer second()\n    first()\n}\n\n// \uc77c\ubc18\uc801\uc73c\ub85c \ud568\uc218 \uc885\ub8cc\uc2dc \uc790\uc6d0\uc744 \ud574\uc81c\ud560 \ub54c \uc0ac\uc6a9\n// runtime panic\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 \uc2e4\ud589\nf, _ := os.Open(filename)\ndefer f.Close()\n\n// panic and recover functions\n// recover\ub294 defer\uc640 \uc0ac\uc6a9\ud574\uc57c \ud568.\nfunc main() {\n    defer func() {\n        // recover function\n        str := recover()\n        fmt.Println(\"recovery: \", str)\n    }()\n    panic(\"Panic !! string\")\n}",
            "title": "function"
        },
        {
            "location": "/go/#pointers",
            "text": "go\ub294 garbage collection\uc744 \uc9c0\uc6d0\ud558\ubbc0\ub85c point \ud574\uc81c (free)\uac00 \ud544\uc694\uc5c6\uc74c.  func zero(xPtr *int) {\n    *xPtr = 0\n}\nfunc main() {\n    x := 5\n    zero(&x)\n    fmt.Println(x) // x\ub294 0\n}\n\n// point using new()\nfunc one(xPtr *int) {\n   *xPtr = 1\n}\nfunc main() {\n    xPtr := new(int)\n    one(xPtr)\n    fmt.Println(*xPtr) // x\ub294 1\n}",
            "title": "Pointers"
        },
        {
            "location": "/go/#structure-field-and-method",
            "text": "Field\uac00 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 public\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5)  Field\uac00 \uc18c\ubb38\uc790\ub85c \uc2dc\uc791\uc2dc C++\uc758 private\uc758 \ud2b9\uc131\uc744 \uac00\uc9d0 (\uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \ubd88\uac00\ub2a5)  \uc544\ub798 \uc608\uc81c\uc5d0\uc11c X, Y, Z\ub294 \uc678\ubd80 package\uc5d0\uc11c \ucc38\uc870 \uac00\ub2a5   \n// Clircle blarara o\ntype Circle struct {\n    x float64\n    y float64\n    r float64\n\n    X float64\n    Y float64\n    R float64\n}\n\n// call by value function\nfunc circleArea(c Circle) float64 {\n    return math.Pi * (c.r * c.r)\n}\n\n// call by reference function\nfunc circleArea2(c *Circle) float64 {\n    return math.Pi * (c.r * c.r)\n}\n\n// method (define a pointer receiver in parenthesis)\nfunc (c *Circle) area() float64 {\n    return math.Pi * c.r * c.r\n}\n\n// method (define a value receiver in parenthesis)\nfunc (c Circle) area2() float64 {\n    return math.Pi * c.r * c.r\n}\n\nfunc main() {\n    var a Circle\n    fmt.Println(a)\n    var b Circle = Circle{x: 1, y: 2, r: 3}\n    fmt.Println(b)\n    c := Circle{10, 20, 30}\n    fmt.Println(c)\n\n    // Circle pointer\n    d := new(Circle)\n    d.x = 20\n    d.y = 30\n    d.r = 10\n    fmt.Println(d)\n\n    // call by value (copy Circle argument)\n    fmt.Println(circleArea(c))\n    fmt.Println(circleArea(*d))\n\n    // call by reference\n    fmt.Println(circleArea2(d))\n\n    // method\n    fmt.Println(\"method:\", b.area())\n}",
            "title": "Structure (field and method)"
        },
        {
            "location": "/go/#anonymous-fields-in-go-structure",
            "text": "Type\uc774\ub984\uc73c\ub85c field\uac00 \uc0dd\uc131\ub428  Anonymous field\ub85c \uc815\uc758\ub41c structure\uc758 field \ubc0f method\ub97c \uc120\uc5b8\ub41c structure\uac00 \uc0c1\uc18d\ud568.   type Kitchen struct {\n    numOfPlates int\n}\n\ntype House struct {\n    Kitchen    // anonymous field\n    numOfRooms int\n}\n\nfunc main() {\n    //to initialize you have to use composed type name.\n    h := House{Kitchen{10}, 3}\n    //numOfRooms is a field of House\n    fmt.Println(\"House h has this many rooms:\", h.numOfRooms)\n    //numOfPlates is a field of anonymous field Kitchen, so it can be referred to like a field of House\n    fmt.Println(\"House h has this many plates:\", h.numOfPlates)\n    //we can refer to the embedded struct in its entirety by referring to the name of the struct type\n    fmt.Println(\"The Kitchen contents of this house are:\", h.Kitchen)\n}",
            "title": "Anonymous fields in Go Structure"
        },
        {
            "location": "/go/#interface-collections-of-methods",
            "text": "Interfaces are named collections of method signatures.  \uad6c\uc870\uccb4(struct)\uac00 \ud544\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4\ub77c\uba74, interface\ub294 \uba54\uc11c\ub4dc\ub4e4\uc758 \uc9d1\ud569\uccb4  interface\ub294 \ud0c0\uc785(type)\uc774 \uad6c\ud604\ud574\uc57c \ud558\ub294 \uba54\uc11c\ub4dc \uc6d0\ud615(prototype)\ub4e4\uc744 \uc815\uc758\ud568.  type\uc758 interface\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \ub2e8\uc21c\ud788 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uac16\ub294 \ubaa8\ub4e0 \uba54\uc11c\ub4dc\ub4e4\uc744 \uad6c\ud604\ud558\uba74 \ub428.  Interface \ubcc0\uc218\ub294 1) interface type\uacfc 2) \uc2e4\uc81c \uac00\ub9ac\ud0a4\ub294 data \uc8fc\uc18c\ub85c \uc774\ub8e8\uc5b4\uc9d0    // Shape interface type definition\ntype Shape interface {\n    area() float64\n    perimeter() float64\n}\n\n//Rect \uc815\uc758\ntype Rect struct {\n    width, height float64\n}\n\n//Circle \uc815\uc758\ntype Circle struct {\n    radius float64\n}\n\n//Rect \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\nfunc (r Rect) area() float64 { return r.width * r.height }\nfunc (r Rect) perimeter() float64 {\n    return 2 * (r.width + r.height)\n}\n\n//Circle \ud0c0\uc785\uc5d0 \ub300\ud55c Shape \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\nfunc (c Circle) area() float64 {\n    return math.Pi * c.radius * c.radius\n}\nfunc (c Circle) perimeter() float64 {\n    return 2 * math.Pi * c.radius\n}\n\nfunc main() {\n    r := Rect{10., 20.}\n    c := Circle{10}\n\n    showArea(r, c)\n}\n\nfunc showArea(shapes ...Shape) {\n    for _, s := range shapes {\n        a := s.area() //\uc778\ud130\ud398\uc774\uc2a4 \uba54\uc11c\ub4dc \ud638\ucd9c\n        println(a)\n    }\n}\n\n// interface field in structure\n// [FIXME] how to ?  //  example 2.\ntype Abser interface {\n    Abs() float64\n}\n\nfunc main() {\n    var a Abser\n    f := MyFloat(-math.Sqrt2)\n    v := Vertex{3, 4}\n\n    a = f // a MyFloat implements Abser\n    fmt.Println(a.Abs())\n    a = &v // a *Vertex implements Abser\n\n    fmt.Println(a.Abs())\n}\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f < 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}",
            "title": "Interface (collections of methods)"
        },
        {
            "location": "/go/#empty-interface",
            "text": "\uc5b4\ub5a0\ud55c Type\ub3c4 \ub2f4\uc744 \uc218 interface    func Marshal(v interface{}) ([]byte, error);\nfunc Println(a ...interface{}) (n int, err error);  func main() {\n    var i interface{}\n    describe(i)\n\n    i = 42\n    describe(i)\n\n    i = \"hello\"\n    describe(i)\n}\n\nfunc describe(i interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n// (<nil>, <nil>)\n// (42, int)\n// (hello, string)",
            "title": "empty interface"
        },
        {
            "location": "/go/#errors",
            "text": "By convention, errors are the last return value and have type error, a built-in interface.  errors.New  constructs a basic error value with the given error message.  A  nil  value in the error position indicates that there was  no error .   func f1(arg int) (int, error) {\n    if arg == 42 {\n        return -1, errors.New(\"can't work with 42\")\n    }\n    return arg + 3, nil\n}\n\nfunc main() {\n    for _, i := range []int{7, 42} {\n        if r, e := f1(i); e != nil {\n            fmt.Println(\"f1 failed:\", e)\n        } else {\n            fmt.Println(\"f1 worked:\", r)\n        }\n    }\n}",
            "title": "Errors"
        },
        {
            "location": "/go/#concurrency-goroutine",
            "text": "// goroutine to support concurrency\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc f(from string) {\n    for i := 0; i < 3; i++ {\n        fmt.Println(from, \":\", i)\n    }\n}\n\nfunc main() {\n\n    f(\"direct\")\n\n    go f(\"goroutine\")\n\n    go func(msg string) {\n        fmt.Println(msg)\n    }(\"going\")\n\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n}",
            "title": "Concurrency (goroutine)"
        },
        {
            "location": "/go/#channel",
            "text": "Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.  package main\n\nimport \"fmt\"\n\nfunc main() {\n\n    messages := make(chan string)\n\n    go func() { messages <- \"ping\" }()\n\n    msg := <-messages\n    fmt.Println(msg)\n}  # Channel direction\n# channel\uc758 \ubc29\ud5a5\uc744 \uc9c0\uc815\uac00\ub2a5\ud568.\n\nfunc pinger(c chan<- string)\nfunc printer(c <-chan string)",
            "title": "Channel"
        },
        {
            "location": "/go/#channel-buffering",
            "text": "By default channels are unbuffered, meaning that they will only accept sends (chan <-) if there is a corresponding receive (<- chan) ready to receive the sent value.  package main\n\nimport \"fmt\"\n\nfunc main() {\n\n    messages := make(chan string, 2)\n\n    messages <- \"buffered\"\n    messages <- \"channel\"\n\n    fmt.Println(<-messages)\n    fmt.Println(<-messages)\n}",
            "title": "Channel Buffering"
        },
        {
            "location": "/go/#channel-synchronization-waitgroup",
            "text": "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(done chan bool) {\n    fmt.Print(\"working...\")\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n    done <- true\n}\n\nfunc main() {\n    done := make(chan bool, 1)\n    go worker(done)\n    <-done\n}  // goroutine with WaitGroup\npackage main\n\nimport \"sync\"\nimport \"fmt\"\nimport \"time\"\n\ntype Object struct {\n    //data\n}\n\nfunc (obj *Object) Update(wg *sync.WaitGroup) {\n    //update data\n    time.Sleep(time.Second)\n    fmt.Println(\"Update done\")\n    wg.Done()\n    return\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    list := make([]Object, 5)\n    for {\n        for _, object := range list {\n            wg.Add(1)\n            go object.Update(&wg)\n        }\n        //now everything has been updated. start again\n        wg.Wait()\n        fmt.Println(\"Group done\")\n    }\n}",
            "title": "Channel Synchronization (Waitgroup)"
        },
        {
            "location": "/go/#select-for-channel",
            "text": "Go\u2019s select lets you wait on multiple channel operations. Combining goroutines and channels with select is a powerful feature of Go.  package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    c1 := make(chan string)\n    c2 := make(chan string)\n\n    go func() {\n        for {\n            c1 <- \"from 1\"\n            time.Sleep(time.Second * 2)\n        }\n    }()\n    go func() {\n        for {\n            c2 <- \"from 2\"\n            time.Sleep(time.Second * 3)\n        }\n    }()\n    go func() {\n        for {\n            select {\n            case msg1 := <-c1:\n                fmt.Println(msg1)\n            case msg2 := <-c2:\n                fmt.Println(msg2)\n            case current := <-time.After(time.Second):\n                fmt.Println(current)\n            }\n        }\n    }()\n\n    var input string\n    fmt.Scanln(&input)\n}",
            "title": "Select (for Channel)"
        },
        {
            "location": "/go/#context",
            "text": "A way to think about context package in go is that it allows you to pass in a \u201ccontext\u201d to your program. Context like a timeout or deadline or a channel to indicate stop working and return.   https://jaehue.github.io/post/how-to-use-golang-context/  http://p.agnihotry.com/post/understanding_the_context_package_in_golang/   func longFunc() string {\n    <-time.After(time.Second * 3) // long running job\n    return \"Success\"\n}\n\nfunc longFuncWithCtx(ctx context.Context) (string, error) {\n    done := make(chan string)\n\n    go func() {\n        done <- longFunc()\n    }()\n\n    select {\n    case result := <-done:\n        return result, nil\n    case <-ctx.Done():\n        return \"Fail\", ctx.Err()\n    }\n}",
            "title": "context"
        },
        {
            "location": "/go/#cgo",
            "text": "package main\n\n/*\n#include <stdio.h>\n\nextern int sum(int a, int b); // Go \uc5b8\uc5b4\uc758 \ud568\uc218\ub294 extern\uc73c\ub85c \uc120\uc5b8\n\nstatic inline void CExample() {\n    int r = sum(1, 2); // Go \uc5b8\uc5b4\uc758 sum \ud568\uc218 \ud638\ucd9c\n    printf(\"%d\\n\", r);\n}\n*/\nimport \"C\"\n\n//export sum\nfunc sum(a, b C.int) C.int { // C \uc5b8\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub9e4\uac1c\ubcc0\uc218\uc640 \ub9ac\ud134\uac12 \uc790\ub8cc\ud615\uc744\n                             // C \uc5b8\uc5b4\uc6a9\uc73c\ub85c \ub9de\ucdb0\uc90c\n    return a + b\n}\n\nfunc main() {\n    C.CExample()\n}  package test\n\n/*\n#include <stdio.h>\n\nint sum(int a, int b) // \ub367\uc148 \ud568\uc218 \uc791\uc131\n{\n    return a + b;\n}\n\nvoid hello() // Hello, world! \ucd9c\ub825 \ud568\uc218 \uc791\uc131\n{\n    printf(\"Hello, world!\\n\");\n}\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    var a, b int = 1, 2\n    r := C.sum(C.int(a), C.int(b)) // C \uc5b8\uc5b4 \ud568\uc218 sum \ud638\ucd9c\n    fmt.Println(r)                 // 3\n\n    C.hello() // Hello, world!\n}",
            "title": "cgo"
        },
        {
            "location": "/go/#command-line",
            "text": "The way to get program start argument and options.  \n// Command-Line Arguments and Flags\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    argWithName := os.Args\n    argWithoutName := os.Args[1:]\n    arg := os.Args[3]\n\n    fmt.Println(argWithName)\n    fmt.Println(argWithoutName)\n    fmt.Println(arg)\n\n    wordPtr := flag.String(\"word\", \"default\", \"a string option\")\n    numbPtr := flag.Int(\"num\", 1, \"integer option\")\n    boolPtr := flag.Bool(\"bool\", false, \"boolean option\")\n    var sval string\n    flag.StringVar(&sval, \"str-var\", \"default\", \"string variable option\")\n    flag.Parse()\n    fmt.Println(\"word:\", *wordPtr)\n    fmt.Println(\"num:\", *numbPtr)\n    fmt.Println(\"bool:\", *boolPtr)\n    fmt.Println(\"str-var:\", sval)\n    fmt.Println(\"tail:\", flag.Args())\n}\n\n// Command-Line subcommands\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n\n    fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError)\n    fooEnable := fooCmd.Bool(\"enable\", false, \"enable\")\n    fooName := fooCmd.String(\"name\", \"\", \"name\")\n\n    barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError)\n    barLevel := barCmd.Int(\"level\", 0, \"level\")\n\n    if len(os.Args) < 2 {\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n\n    switch os.Args[1] {\n\n    case \"foo\":\n        fooCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'foo'\")\n        fmt.Println(\"  enable:\", *fooEnable)\n        fmt.Println(\"  name:\", *fooName)\n        fmt.Println(\"  tail:\", fooCmd.Args())\n    case \"bar\":\n        barCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'bar'\")\n        fmt.Println(\"  level:\", *barLevel)\n        fmt.Println(\"  tail:\", barCmd.Args())\n    default:\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n}\n\n// usage\n\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    flag.Usage = func() {\n        fmt.Printf(\"Usage of %s:\\n\", os.Args[0])\n        fmt.Printf(\"    example7 file1 file2 ...\\n\")\n        flag.PrintDefaults()\n    }\n    flag.Parse()\n}   https://www.digitalocean.com/community/tutorials/how-to-use-the-flag-package-in-go",
            "title": "Command-Line"
        },
        {
            "location": "/go/#empty-structure",
            "text": "package main\n\nimport \"fmt\"\n\ntype Duck struct {\n}\n\nfunc (d Duck) quack() {\n    fmt.Println(\"Quack~\")\n}\n\nfunc (d Duck) feathers() {\n    fmt.Println(\"White and gray feathers\")\n}\n\ntype Person struct {\n}\n\nfunc (p Person) quack() {\n    fmt.Println(\"No Quack~\")\n}\n\nfunc (p Person) feathers() {\n    fmt.Println(\"no feathers\")\n}\n\ntype Quacker interface {\n    quack()\n    feathers()\n}\n\nfunc inTheForest(q ...Quacker) {\n    for _, entry := range q {\n        fmt.Printf(\"%T\\n\", entry)\n        entry.feathers()\n        entry.quack()\n    }\n}\n\nfunc main() {\n    var donald Duck\n    var john Person\n    inTheForest(donald, john)\n}",
            "title": "empty structure"
        },
        {
            "location": "/go/#structtag",
            "text": "A StructTag is the tag string in a struct field.\nBy convention, tag strings are a concatenation of optionally space-separated key:\"value\" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '\"'), and colon (U+003A ':'). Each value is quoted using U+0022 '\"' characters and Go string literal syntax.   https://golang.org/pkg/reflect/#StructTag  https://golangbot.com/reflection/    Format:  type StructTag string   package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    type S struct {\n        F string `species:\"gopher\" color:\"blue\"`\n    }\n\n    s := S{}\n    st := reflect.TypeOf(s)\n    field := st.Field(0)\n    fmt.Println(field.Tag.Get(\"color\"), field.Tag.Get(\"species\"))\n}",
            "title": "structTag"
        },
        {
            "location": "/go/#reflection",
            "text": "type Person struct {\n    name string `tag1:\"1\" tag2:\"2\"`\n    age  int    `tag1:\"\ub098\uc774\" tag2:\"Age\"`\n}\n\nfunc main() {\n    var i int = 1\n    var s string = \"hello world\"\n    var f float32 = 1.3\n\n    fmt.Println(reflect.TypeOf(i))\n    fmt.Println(reflect.TypeOf(s))\n    fmt.Println(reflect.TypeOf(f))\n    t := reflect.TypeOf(f)\n    v := reflect.ValueOf(f)\n    fmt.Println(\"\")\n    fmt.Println(\"float32 reflection\")\n    fmt.Println(\"==================\")\n    fmt.Println(t.Name())\n    fmt.Println(t.Size())\n    fmt.Println(t.Kind() == reflect.Float32)\n    fmt.Println(t.Kind() == reflect.Float64)\n    fmt.Println(v.Type())\n    fmt.Println(v.Kind() == reflect.Float32)\n    fmt.Println(v.Kind() == reflect.Float64)\n    fmt.Println(v.Float())\n    fmt.Println(v)\n\n    fmt.Println(\"\")\n    fmt.Println(\"struct reflection\")\n    fmt.Println(\"==================\")\n    var d Person = Person{\"myname\", 3}\n    var p *Person = &d\n    fmt.Println(reflect.TypeOf(d))\n    name, ok := reflect.TypeOf(d).FieldByName(\"name\")\n    fmt.Println(\"num of fields\", reflect.TypeOf(d).NumField())\n    fmt.Println(ok, name.Tag.Get(\"tag1\"), name.Tag.Get(\"tag2\"))\n    age, ok := reflect.TypeOf(d).FieldByName(\"age\")\n    fmt.Println(ok, age.Tag.Get(\"tag1\"), age.Tag.Get(\"tag2\"))\n    fmt.Println(reflect.TypeOf(p))\n    fmt.Println(reflect.ValueOf(p))\n    fmt.Println(reflect.ValueOf(p).Elem()) // reflection of pointer\n    fmt.Println(reflect.ValueOf(p).Elem().FieldByName(\"name\"),\n        reflect.ValueOf(p).Elem().FieldByName(\"age\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\"interface reflection\")\n    fmt.Println(\"==================\")\n    var b interface{}\n    b = 1\n    fmt.Println(reflect.TypeOf(b))\n    fmt.Println(reflect.ValueOf(b))\n    fmt.Println(reflect.ValueOf(b).Int())\n    // fmt.Println(reflect.ValueOf(b).Elem()) // Runtime error\n}",
            "title": "reflection"
        },
        {
            "location": "/go/#type-assertions",
            "text": "A type assertion doesn\u2019t really convert an interface to another data type, but it provides access to an interface\u2019s concrete value, which is typically what you want.  The type assertion x.(T) asserts that the concrete value stored in x is of type T, and that x is not nil.   If T is not an interface, it asserts that the dynamic type of x is identical to T.  If T is an interface, it asserts that the dynamic type of x implements T.   var x interface{} = \"foo\"\n\nvar s string = x.(string)\nfmt.Println(s)     // \"foo\"\n\ns, ok := x.(string)\nfmt.Println(s, ok) // \"foo true\"\n\nn, ok := x.(int)\nfmt.Println(n, ok) // \"0 false\"\n\nn = x.(int)        // ILLEGAL",
            "title": "Type assertions"
        },
        {
            "location": "/go/#type-switches",
            "text": "type switch performs several type assertions in series and runs the first case with a matching type.  var x interface{} = \"foo\"\n\nswitch v := x.(type) {\ncase nil:\n    fmt.Println(\"x is nil\")            // here v has type interface{}\ncase int:\n    fmt.Println(\"x is\", v)             // here v has type int\ncase bool, string:\n    fmt.Println(\"x is bool or string\") // here v has type interface{}\ndefault:\n    fmt.Println(\"type unknown\")        // here v has type interface{}\n}",
            "title": "Type switches"
        },
        {
            "location": "/go/#cgo-golang-with-c",
            "text": "package main\n\n// typedef int (*intFunc) ();\n//\n// int\n// bridge_int_func(intFunc f)\n// {\n//      return f();\n// }\n//\n// int fortytwo()\n// {\n//      return 42;\n// }\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    f := C.intFunc(C.fortytwo)\n    fmt.Println(int(C.bridge_int_func(f)))\n    // Output: 42\n}   https://eli.thegreenplace.net/2019/passing-callbacks-and-pointers-to-cgo/",
            "title": "cgo (golang with C)"
        },
        {
            "location": "/go/#go-with-grpc",
            "text": "go get google.golang.org/grpc\ngo get -u github.com/golang/protobuf/protoc-gen-go\n<!-- plugins: grpc interface \uc0dd\uc131\ud568. -->\nprotoc -I <PATH_TO_INCLUDE> --go_out=plugins=grpc:<PATH_TO_GENERATE> <PATH_TO_PROTO_FILE>\nprotoc -I <PATH_TO_INCLUDE> --go_out=noti <PATH_TO_PROTO_FILE>",
            "title": "go with gRPC"
        },
        {
            "location": "/go/#useful-commands",
            "text": "# show go doc on web\ngo get -v golang.org/x/tools/cmd/godoc\ngodoc fmt.Println\n\n# build package\ncd $GOPATH/src\ngo build <TARGET_DIR=PACKAGE> # test build\ngo install <TARGET_DIR=PACKAGE> # copy *.so to $GOPATH/pkg",
            "title": "Useful commands"
        },
        {
            "location": "/go/#useful-functions",
            "text": "",
            "title": "Useful functions"
        },
        {
            "location": "/go/#panic-and-recover",
            "text": "They Generate an runtime error and recover (receive) the runtime error.",
            "title": "panic() and recover()"
        },
        {
            "location": "/go/#osexit",
            "text": "Use os.Exit to immediately exit with a given status.  defer s will not be run when using os.Exit, so this fmt.Println will never be called.",
            "title": "os.Exit()"
        },
        {
            "location": "/go/#useful-documents",
            "text": "https://github.com/golang-kr/golang-doc/wiki/Go-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95  https://golang.org/doc/effective_go.html",
            "title": "Useful documents"
        },
        {
            "location": "/go/#grpc-with-simple-password-authentication",
            "text": "// client\ngrpc.Dial(target,\n    grpc.WithInsecure(),\n    grpc.WithPerRPCCredentials(&loginCreds{\n    Username: \"admin\",\n    Password: \"admin123\",\n}))\n\ntype loginCreds struct {\n    Username, Password string\n}\n\nfunc (c *loginCreds) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n    return map[string]string{\n        \"username\": c.Username,\n        \"password\": c.Password,\n    }, nil\n}\n\nfunc (c *loginCreds) RequireTransportSecurity() bool {\n    return true\n}\n\n// server\ngrpc.NewServer(\n    grpc.StreamInterceptor(streamInterceptor), \n    grpc.UnaryInterceptor(unaryInterceptor)\n)\n\nfunc streamInterceptor(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n    if err := authorize(stream.Context()); err != nil {\n        return err\n    }\n\n    return handler(srv, stream)\n}\n\nfunc unaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n    if err := authorize(ctx); err != nil {\n        return err\n    }\n\n    return handler(ctx, req)\n}\n\nfunc authorize(ctx context.Context) error {\n    if md, ok := metadata.FromContext(ctx); ok {\n        if len(md[\"username\"]) > 0 && md[\"username\"][0] == \"admin\" &&\n            len(md[\"password\"]) > 0 && md[\"password\"][0] == \"admin123\" {\n            return nil\n        }\n\n        return AccessDeniedErr\n    }\n\n    return EmptyMetadataErr\n}",
            "title": "gRPC with simple password authentication"
        },
        {
            "location": "/go/#vscode-with-golang",
            "text": "https://github.com/Microsoft/vscode-go/issues/441  https://rominirani.com/setup-go-development-environment-with-visual-studio-code-7ea5d643a51a   go get -u github.com/nsf/gocode",
            "title": "vscode with golang"
        },
        {
            "location": "/go/#go-fuzzing",
            "text": "Fuzzing is a type of automated testing which continuously manipulates inputs to a program to find bugs.   \uc784\uc758\uc758 \uac12\uc744 \uc785\ub825\ud558\uc5ec functional test\ub97c \uc218\ud589\ud558\ub294 test framework\uc774\ub77c \ubcfc \uc218 \uc788\uc74c.",
            "title": "Go Fuzzing"
        },
        {
            "location": "/grpc/",
            "text": "gRPC handbook\n\n\ngrpc reflection (gRPC service \uc815\ubcf4 \uc870\ud68c\uc6a9)\n\n\ngRPC Server Reflection provides information about publicly-accessible gRPC services on a server, and assists clients at runtime to construct RPC requests and responses without precompiled service information. It is used by gRPC CLI, which can be used to introspect server protos and send/receive test RPCs.\n\n\n\nimport \"google.golang.org/grpc/reflection\"\n\n        s := grpc.NewServer()\n        pb.RegisterGreeterServer(s, &server{})\n+       // Register reflection service on gRPC server.\n+       reflection.Register(s)\n        if err := s.Serve(lis); err != nil {\n                log.Fatalf(\"failed to serve: %v\", err)\n        }\n\n\n\n\nCheck reflection for gRPC CLI\n\n\ngit clone https://github.com/grpc/grpc\ncd grpc\ngit submodule update --init\nmake grpc_cli\ncd bins/opt # grpc_cli is in directory bins/opt/\n\n\n\n\n./grpc_cli ls localhost:50051\n\n# Result\ngrpc.examples.echo.Echo\ngrpc.reflection.v1alpha.ServerReflection\nhelloworld.Greeter\n\n# List services and method\n./grpc_cli ls localhost:50051 helloworld.Greeter -l\n\n# Result\nfilename: helloworld.proto\npackage: helloworld;\nservice Greeter {\n  rpc SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply) {}\n}\n\n# Inspect message types\n./grpc_cli type localhost:50051 helloworld.HelloRequest\n\n# Result\nmessage HelloRequest {\n  string name = 1[json_name = \"name\"];\n}\n\n# Call a remote method\n./grpc_cli call localhost:50051 SayHello \"name: 'gRPC CLI'\"\n\n# Result\nconnecting to localhost:50051\nmessage: \"Hello gRPC CLI\"\n\nRpc succeeded with OK status\n\n\n\n\ngRPC Encryption (gRPC communication channel encryption)\n\n\nTerms\n\n\n\n\nCA (Certificate Authority)\n: \uc778\uc99d\uae30\uad00\n\n\nPEM (Privacy Enhanced Mail)\n: certificate info + public key encoded by base64\n\n\nCSR (Certificate Signing Request)\n: CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc694\uccad\uc744 \uc704\ud55c \ud30c\uc77c\n\n\nCRT (CeRTificate)\n: CA\uac00 \uc99d\uba85\ud558\ub294 \uc778\uc99d\uc11c\n\n\n$SERVER.key\n: server private key\n\n\n$SERVER.pem\n: PKCS#8 certificate with server public key\n\n\n$SERVER.csr\n: server CSR (Certificate Signing Request) file\n\n\n$SERVER.crt\n: server certificate file (\uc11c\ubc84 \uc778\uc99d\uc11c)\n\n\n$ROOTCA.key\n: CA private key\n\n\n$ROOTCA.crt\n: CA certificate file for \n$SERVER.crt\n (\n$SERVER.pem\n)\n\n\n\n\nGenerate ceritificate (\uc778\uc99d\uc11c \uc131\uc131)\n\n\nopenssl genrsa -out ca.key 2048\nopenssl req -new -x509 -days 365 -key ca.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR's Self Signed CA\" -out ca.crt\n\nopenssl req -newkey rsa:2048 -nodes -keyout service.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR NE\" -out service.csr\nopenssl x509 -req -extfile <(printf \"subjectAltName=DNS:localhost\") -days 365 -in service.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out service.crt\n\n\n$ openssl genrsa -out server.key 2048\n\n# crt \ubc14\ub85c \uc0dd\uc131\n$ openssl req -new -x509 -sha256 -key server.key \\\n              -out server.crt -days 3650\n# csr -> crt \uc73c\ub85c \ubcc0\ud658\n$ openssl req -new -sha256 -key server.key -out server.csr\n$ openssl x509 -req -sha256 -in server.csr -signkey server.key \\\n               -out server.crt -days 3650\n$ openssl req -new -x509 -sha256 -key server.key -out server.crt -days 36500 -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=HFR NE\"\n\n\n\n\n# Create ROOT certificate (TSL/SSL \uc778\uc99d\uc11c \uc0dd\uc131\ud558\uae30)\n\n# The name of ROOT CA (Certificate Authority)\nexport ROOTCA=\"HFR's Self Signed CA\"\n# Name of SERVER\nexport SERVERCA=\"HFR NE\"\n# Generated file name\nexport SERVER=\"server\"\n\n# Generate ROOT CA Private key (rootca.key)\nopenssl genrsa -aes256 -out rootca.key 2048\n\n# Create ROOT certificate (rootca.crt) of ROOT CA (\uc778\uc99d\uc11c \uc0dd\uc131)\nopenssl req -new -x509 -days 36500 -key rootca.key -out rootca.crt -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$ROOTCA\"\n\n# check ROOT certificate (\uc778\uc99d\uc11c \ud655\uc778)\nopenssl x509 -text -in rootca.crt\n\n\n# Create Server certificate\n\n# Generate server Private key ($SERVER.key)\nopenssl genrsa -aes256 -out $SERVER.key 2048\n\n# Create Certificate request ($SERVER.csr)\nopenssl req -new -key $SERVER.key -out $SERVER.csr -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$SERVERCA\"\n\n# Create certificate (digital certificate file; \uc778\uc99d\uc11c)\nopenssl x509 -req -days 36500 -in $SERVER.csr -CA rootca.crt -CAkey rootca.key -set_serial 01 -out $SERVER.crt\n\n# Create PKCS#8 certificate for gRPC\n# openssl pkcs8 -topk8 -nocrypt -in $SERVER.key -out $SERVER.pem\n\n\n\n\n\n\nGenerate crt without asking subjectAltName\n\n\nopenssl req -new -sha256 \\\n    -key domain.key \\\n    -subj \"/C=US/ST=CA/O=Acme, Inc./CN=example.com\" \\\n    -reqexts SAN \\\n    -config <(cat /etc/ssl/openssl.cnf \\\n        <(printf \"\\n[SAN]\\nsubjectAltName=DNS:example.com,DNS:www.example.com\")) \\\n    -out domain.csr\n\n\n\n\nanother example\n\n\n# Generate CA key:\nopenssl genrsa -des3 -out ca.key 4096\n\n# Generate CA certificate:\nopenssl req -new -x509 -days 365 -key ca.key -out ca.crt\n\n# Generate server key:\nopenssl genrsa -des3 -out server.key 4096\n\n# Generate server signing request:\nopenssl req -new -key server.key -out server.csr\n\n# Self-sign server certificate:\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n\n# Remove passphrase from the server key:\nopenssl rsa -in server.key -out server.key\n\n# Generate client key:\nopenssl genrsa -des3 -out client.key 4096\n\n# Generate client signing request:\nopenssl req -new -key client.key -out client.csr\n\n# Self-sign client certificate:\nopenssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt\n\n# Remove passphrase from the client key:\nopenssl rsa -in client.key -out client.key",
            "title": "Grpc"
        },
        {
            "location": "/grpc/#grpc-handbook",
            "text": "",
            "title": "gRPC handbook"
        },
        {
            "location": "/grpc/#grpc-reflection-grpc-service",
            "text": "gRPC Server Reflection provides information about publicly-accessible gRPC services on a server, and assists clients at runtime to construct RPC requests and responses without precompiled service information. It is used by gRPC CLI, which can be used to introspect server protos and send/receive test RPCs.  \nimport \"google.golang.org/grpc/reflection\"\n\n        s := grpc.NewServer()\n        pb.RegisterGreeterServer(s, &server{})\n+       // Register reflection service on gRPC server.\n+       reflection.Register(s)\n        if err := s.Serve(lis); err != nil {\n                log.Fatalf(\"failed to serve: %v\", err)\n        }",
            "title": "grpc reflection (gRPC service \uc815\ubcf4 \uc870\ud68c\uc6a9)"
        },
        {
            "location": "/grpc/#check-reflection-for-grpc-cli",
            "text": "git clone https://github.com/grpc/grpc\ncd grpc\ngit submodule update --init\nmake grpc_cli\ncd bins/opt # grpc_cli is in directory bins/opt/  ./grpc_cli ls localhost:50051\n\n# Result\ngrpc.examples.echo.Echo\ngrpc.reflection.v1alpha.ServerReflection\nhelloworld.Greeter\n\n# List services and method\n./grpc_cli ls localhost:50051 helloworld.Greeter -l\n\n# Result\nfilename: helloworld.proto\npackage: helloworld;\nservice Greeter {\n  rpc SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply) {}\n}\n\n# Inspect message types\n./grpc_cli type localhost:50051 helloworld.HelloRequest\n\n# Result\nmessage HelloRequest {\n  string name = 1[json_name = \"name\"];\n}\n\n# Call a remote method\n./grpc_cli call localhost:50051 SayHello \"name: 'gRPC CLI'\"\n\n# Result\nconnecting to localhost:50051\nmessage: \"Hello gRPC CLI\"\n\nRpc succeeded with OK status",
            "title": "Check reflection for gRPC CLI"
        },
        {
            "location": "/grpc/#grpc-encryption-grpc-communication-channel-encryption",
            "text": "",
            "title": "gRPC Encryption (gRPC communication channel encryption)"
        },
        {
            "location": "/grpc/#terms",
            "text": "CA (Certificate Authority) : \uc778\uc99d\uae30\uad00  PEM (Privacy Enhanced Mail) : certificate info + public key encoded by base64  CSR (Certificate Signing Request) : CA \uc778\uc99d\uc11c \uc0dd\uc131 \uc694\uccad\uc744 \uc704\ud55c \ud30c\uc77c  CRT (CeRTificate) : CA\uac00 \uc99d\uba85\ud558\ub294 \uc778\uc99d\uc11c  $SERVER.key : server private key  $SERVER.pem : PKCS#8 certificate with server public key  $SERVER.csr : server CSR (Certificate Signing Request) file  $SERVER.crt : server certificate file (\uc11c\ubc84 \uc778\uc99d\uc11c)  $ROOTCA.key : CA private key  $ROOTCA.crt : CA certificate file for  $SERVER.crt  ( $SERVER.pem )",
            "title": "Terms"
        },
        {
            "location": "/grpc/#generate-ceritificate",
            "text": "openssl genrsa -out ca.key 2048\nopenssl req -new -x509 -days 365 -key ca.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR's Self Signed CA\" -out ca.crt\n\nopenssl req -newkey rsa:2048 -nodes -keyout service.key -subj \"/C=KR/L=AY/O=HFR,Inc./CN=HFR NE\" -out service.csr\nopenssl x509 -req -extfile <(printf \"subjectAltName=DNS:localhost\") -days 365 -in service.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out service.crt\n\n\n$ openssl genrsa -out server.key 2048\n\n# crt \ubc14\ub85c \uc0dd\uc131\n$ openssl req -new -x509 -sha256 -key server.key \\\n              -out server.crt -days 3650\n# csr -> crt \uc73c\ub85c \ubcc0\ud658\n$ openssl req -new -sha256 -key server.key -out server.csr\n$ openssl x509 -req -sha256 -in server.csr -signkey server.key \\\n               -out server.crt -days 3650\n$ openssl req -new -x509 -sha256 -key server.key -out server.crt -days 36500 -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=HFR NE\"  # Create ROOT certificate (TSL/SSL \uc778\uc99d\uc11c \uc0dd\uc131\ud558\uae30)\n\n# The name of ROOT CA (Certificate Authority)\nexport ROOTCA=\"HFR's Self Signed CA\"\n# Name of SERVER\nexport SERVERCA=\"HFR NE\"\n# Generated file name\nexport SERVER=\"server\"\n\n# Generate ROOT CA Private key (rootca.key)\nopenssl genrsa -aes256 -out rootca.key 2048\n\n# Create ROOT certificate (rootca.crt) of ROOT CA (\uc778\uc99d\uc11c \uc0dd\uc131)\nopenssl req -new -x509 -days 36500 -key rootca.key -out rootca.crt -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$ROOTCA\"\n\n# check ROOT certificate (\uc778\uc99d\uc11c \ud655\uc778)\nopenssl x509 -text -in rootca.crt\n\n\n# Create Server certificate\n\n# Generate server Private key ($SERVER.key)\nopenssl genrsa -aes256 -out $SERVER.key 2048\n\n# Create Certificate request ($SERVER.csr)\nopenssl req -new -key $SERVER.key -out $SERVER.csr -subj \"/C=KR/ST=Gyeonggi/O=HFR,Inc./CN=$SERVERCA\"\n\n# Create certificate (digital certificate file; \uc778\uc99d\uc11c)\nopenssl x509 -req -days 36500 -in $SERVER.csr -CA rootca.crt -CAkey rootca.key -set_serial 01 -out $SERVER.crt\n\n# Create PKCS#8 certificate for gRPC\n# openssl pkcs8 -topk8 -nocrypt -in $SERVER.key -out $SERVER.pem",
            "title": "Generate ceritificate (\uc778\uc99d\uc11c \uc131\uc131)"
        },
        {
            "location": "/grpc/#generate-crt-without-asking-subjectaltname",
            "text": "openssl req -new -sha256 \\\n    -key domain.key \\\n    -subj \"/C=US/ST=CA/O=Acme, Inc./CN=example.com\" \\\n    -reqexts SAN \\\n    -config <(cat /etc/ssl/openssl.cnf \\\n        <(printf \"\\n[SAN]\\nsubjectAltName=DNS:example.com,DNS:www.example.com\")) \\\n    -out domain.csr",
            "title": "Generate crt without asking subjectAltName"
        },
        {
            "location": "/grpc/#another-example",
            "text": "# Generate CA key:\nopenssl genrsa -des3 -out ca.key 4096\n\n# Generate CA certificate:\nopenssl req -new -x509 -days 365 -key ca.key -out ca.crt\n\n# Generate server key:\nopenssl genrsa -des3 -out server.key 4096\n\n# Generate server signing request:\nopenssl req -new -key server.key -out server.csr\n\n# Self-sign server certificate:\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n\n# Remove passphrase from the server key:\nopenssl rsa -in server.key -out server.key\n\n# Generate client key:\nopenssl genrsa -des3 -out client.key 4096\n\n# Generate client signing request:\nopenssl req -new -key client.key -out client.csr\n\n# Self-sign client certificate:\nopenssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt\n\n# Remove passphrase from the client key:\nopenssl rsa -in client.key -out client.key",
            "title": "another example"
        },
        {
            "location": "/javascript/",
            "text": "Javascript\n\n\n\uc774 \ubb38\uc11c\ub294 \uc544\ub798 javascript tutorial\uc744 \ubcf4\uace0 \uc815\ub9ac\ud55c \uac83\uc784\n\n\n\ud83d\udcc1 https://ko.javascript.info\n\n\n\n\n\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \uacf5\uc2dd\uc774\ub984?: \nECMAScript\n\n\n\n\n\n\nJavascript\n\n\nJavascript engine\n\n\nGarbage Collection\n\n\njavascript framework\n\n\nLinter\n\n\nJS \ubb38\uc11c\ud654\n\n\nPolyfill\n\n\n\ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654\n\n\nComment \uc8fc\uc11d\n\n\nuse strict\n\n\n\ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\n\n\n\uc804\uc5ed \uac1d\uccb4\n\n\nPolyfill\uc758 \uad6c\ud604\n\n\n\n\n\n\n\ubcc0\uc218\uc640 \uc0c1\uc218\n\n\n\ubcc0\uc218 \uba85\uba85 \uaddc\uce59\n\n\n\ud568\uc218\ud615 \uc5b8\uc5b4\n\n\n\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd\n\n\n\n\n\n\n\uc790\ub8cc\ud615\n\n\n\uc22b\uc790\ud615\n\n\nisNaN, isFinite\n\n\nparseInt, parseFloat\n\n\nMath\n\n\n\ubb38\uc790\ud615\n\n\nboolean\n\ud615\n\n\nnull\n \uac12\n\n\nundefined\n \uac12\n\n\nobject\n\n\nconst object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5\n\n\n\uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok\n\n\n\ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\n\n\nobject \ube44\uad50\n\n\n\uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign\n\n\nMethods and this\n\n\n\uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function\n\n\n\uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) \n?.\n, \n?.()\n, \n?.[]\n\n\nobject \uc21c\ud68c \ud568\uc218\n\n\nsymbol\n\n\n\uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive\n\n\niterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator\n\n\nArray\n\n\nmapping function for array\n\n\nsort\n\n\n\ubb38\uc790\uc5f4 <==> \ubc30\uc5f4\n\n\nreduce\uc640 reduceRight (\ub204\uc0b0\uae30)\n\n\n\ubc30\uc5f4\uc778\uc9c0 \ud655\uc778\n\n\nmap\n\n\n\uc81c\uacf5 \ud568\uc218\n\n\nset\n\n\nWeakMap\n and \nWeakSet\n\n\nDate\n\n\nAutocorrection\n\n\nBenchmarking Test\n\n\nDate.parse\n\n\n\n\n\n\nJSON (JavaScript Object Notation) Serialization\n\n\ntoJSON()\n for customized serialization\n\n\n\n\n\n\ntypeof\n\n\nBrowser functions\n\n\n\ud615\ubcc0\ud658 (type conversion)\n\n\n\uc5f0\uc0b0\uc790\n\n\n\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table\n\n\n\ud560\ub2f9 \uc5f0\uc0b0\uc790\n\n\n\uc27c\ud45c \uc5f0\uc0b0\uc790\n\n\n\n\n\n\n\ube44\uad50 \uc5f0\uc0b0\uc790\n\n\nerror \ube44\uad50\n\n\n\ubb38\uc790\uc5f4 \ube44\uad50\n\n\n\ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50\n\n\n\uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) ===\n\n\nnull\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30\n\n\n\ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation\n\n\nnullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) \n??\n\n\n\n\n\n\n\uc870\uac74\ubb38\n\n\n\ubc18\ubcf5\ubb38\n\n\nswitch/case\ubb38\n\n\nFunction\n\n\nFunction Expression (\ud568\uc218 \ud45c\ud604\uc2dd)\n\n\nArrow function (\ud654\uc0b4\ud45c \ud568\uc218)\n\n\ndebugger\n\n\nconsole.log\n\n\nFunction property\n\n\nvariable arguments\n\n\nInput argument spreading\n\n\nClosure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815\n\n\nnew Function\n\n\n\n\n\n\nTime scheduling - \nsetTimeout\n, \nsetInterval\n\n\nTesting - Mocha\n\n\nchai (assertion logic)\n\n\n\n\n\n\n\uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment)\n\n\n\ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9\n\n\n\uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9\n\n\n\uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring)\n\n\nfunction argument with destructuring assignment\n\n\n\n\n\n\nPromise\n\n\n.then\n\n\n.catch\n\n\n.finally\n\n\nPromise chaining\n\n\nthenable\n\n\nfetch\n\n\nThrow an error in promise\n\n\nMutilple promises\n\n\npromisify\n\n\nMicrotask queue\n\n\n\n\n\n\nAsync\n and \nAwait\n\n\nasync \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc\n\n\nasync\n & \nawait\n error handling\n\n\n\n\n\n\nFile Read/Write\n\n\nDecorator (wrapping function)\n\n\n\uac1d\uccb4\uc758 \ncall\n\ud568\uc218 \uc0ac\uc6a9\ud558\uae30\n\n\n\n\n\n\n\ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218\n\n\nobject property \uc18d\uc131 \uc124\uc815\n\n\ngetter, setter properties\n\n\nnodejs\n\n\nimport package\n\n\nnodejs getting start\n\n\n\n\n\n\n\n\nJavascript engine\n\n\n\n\nV8\n\n\nFirefox\n?\n\n\n\n\nGarbage Collection\n\n\n\n\nreachability \ub3c4\ub2ec \uac00\ub2a5\uc131\uc774 \uc5c6\ub294 \ubcc0\uc218\ub294 \uc0ad\uc81c\n\n\nmark-and-sweep\n\n\ngenerational collection: \uc624\ub79c\uc2dc\uac04 \ub0a8\uc740 \uac1c\uccb4 \ub35c \uac10\uc2dc\n\n\nincremental collection: \ud655\uc778 \uac1c\uccb4 grouping\ud558\uace0 \ubd84\uc0b0 \ucc98\ub9ac\n\n\nidle-time collection: \uc720\ud734 \uc2dc\uac04 \uc2e4\ud589\n\n\n\n\njavascript framework\n\n\n\n\njQuery\n\n\nLodash\n\n\n\n\nLinter\n\n\n\n\nJSLint\n \u2013 \uc5ed\uc0ac\uac00 \uc624\ub798\ub41c linter\n\n\nJSHint\n \u2013 JSLint\ubcf4\ub2e4 \uc138\ud305\uc774 \uc880 \ub354 \uc720\uc5f0\ud55c linter\n\n\nESLint\n \u2013 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ub098\uc628 linter, \nnpm install -g eslint\n\n\n\n\nJS \ubb38\uc11c\ud654\n\n\n\n\nJSDoc\n: http://usejsdoc.org/\n\n\n\n\n/**\n * x\ub97c n\ubc88 \uacf1\ud55c \uc218\ub97c \ubc18\ud658\ud568\n *\n * @param {number} x \uac70\ub4ed\uc81c\uacf1\ud560 \uc22b\uc790\n * @param {number} n \uacf1\ud560 \ud69f\uc218, \ubc18\ub4dc\uc2dc \uc790\uc5f0\uc218\uc5ec\uc57c \ud568\n * @return {number} x\uc758 n \uac70\ub4ed\uc81c\uacf1\uc744 \ubc18\ud658\ud568\n */\nfunction pow(x, n) {\n  ...\n}\n\n\n\n\nPolyfill\n\n\n\ud3f4\ub9ac\ud544(Polyfill)\uc774\ub780 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc9c0\uc6d0 \uac00\ub2a5\ud558\ub3c4\ub85d \ubcc0\ud658\ud55c \ucf54\ub4dc\n\ud558\uc704 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \ucd5c\uc2e0 \uae30\ub2a5\uc744 \ub611\uac19\uc774 \uad6c\ud604\ud55c library?\n\n\n\n\n\ud2b8\ub79c\uc2a4\ud30c\uc77c\ub7ec: \ubc14\ubca8\uc740 \uac1c\ubc1c\uc790\uc758 \ucef4\ud4e8\ud130\uc5d0\uc11c \ub3cc\uc544\uac00\ub294\ub370, \uc774\ub97c \uc2e4\ud589\ud558\uba74 \uae30\uc874 \ucf54\ub4dc\uac00 \uad6c \ud45c\uc900\uc744 \uc900\uc218\ud558\ub294 \ucf54\ub4dc\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc6f9\uc744 \ud1b5\ud574 load\ub428, \uc6f9\ud329(webpack)\n\n\n\ud3f4\ub9ac\ud544: \uc0dd\ub7b5\n\n\n\n\n\uc8fc\ubaa9\ud560 \ub9cc\ud55c \ud3f4\ub9ac\ud544 \ub450 \uac00\uc9c0\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\ncore js\n \u2013 \ub2e4\uc591\ud55c \ud3f4\ub9ac\ud544\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uae30\ub2a5\uc758 \ud3f4\ub9ac\ud544\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n\n\npolyfill.io\n \u2013 \uae30\ub2a5\uc774\ub098 \uc0ac\uc6a9\uc790\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0 \ub530\ub77c \ud3f4\ub9ac\ud544 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud574\uc8fc\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4.\n\n\nBabel\n\n\n\n\n\ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654\n\n\n\n\nMocha\n: describe, it\uacfc \uac19\uc740 \ud14c\uc2a4\ud305 \ud568\uc218\uc640 \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uad00\ub828 \uc8fc\uc694 \ud568\uc218\ub97c \uc81c\uacf5, https://mochajs.org/\n\n\nChai\n \u2013 \ub2e4\uc591\ud55c assertion\uc744 \uc81c\uacf5\ud574 \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n\nSinon\n \u2013 \ud568\uc218\uc758 \uc815\ubcf4\ub97c \uce90\ub0b4\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c, \ub0b4\uc7a5 \ud568\uc218 \ub4f1\uc744 \ubaa8\ubc29\n\n\n\n\nFIXME: https://ko.javascript.info/testing-mocha\n\n\nComment \uc8fc\uc11d\n\n\n//\n, \n/* */\n\n\nuse strict\n\n\n\n\nECMAScript5(ES5)\n \uae30\ubcf8 \ubb38\ubc95 \uc77c\ubd80 \n\n\n\n\n\"use strict\"\n// ES5 \ubaa8\ub4dc\ub85c \ub3d9\uc791\n\n\n\n\n\ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\n\n\n\uac1c\ubc1c\ud55c \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud574 \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \uae30\ubcf8\uc801\uc73c\ub85c use strict\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c\n\n\n\uc804\uc5ed \uac1d\uccb4\n\n\n\ube0c\ub77c\uc6b0\uc800 \ud658\uacbd\uc5d0\uc120 \uc804\uc5ed \uac1d\uccb4\ub97c \nwindow\n, Node.js \ud658\uacbd\uc5d0\uc120 \nglobal\n (\nglobalThis\n)\n\n\nvar gVar = 5;\n// var\ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub294 \uc804\uc5ed \uac1d\uccb4 property)\nalert(window.gVar); // 5\n\n\n\n\nPolyfill\uc758 \uad6c\ud604\n\n\nif (!window.Promise) {\n  alert(\"\uad6c\uc2dd \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9 \uc911\uc774\uc2dc\uad70\uc694!\");\n}\nif (!window.Promise) {\n  window.Promise = ... // \ubaa8\ub358 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uad6c\ud604\ud568\n}\n\n\n\n\n\ubcc0\uc218\uc640 \uc0c1\uc218\n\n\n\n\njavascript primitive variables: \ubb38\uc790(string), \uc22b\uc790(number), bigint, \ubd88\ub9b0(boolean), \uc2ec\ubcfc(symbol), null, undefined\ud615\n\n\njavascript\uc758 \ubcc0\uc218\ub294 \uac12 \uc218\uc815\uc774 \uc544\ub2c8\ub77c \uad50\uccb4\ub418\ub294 \uac1c\ub150\n\n\n\n\nlet message;\n\nmessage = 'Hello'; // \ubb38\uc790\uc5f4\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\nalert(message); // \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n// \uc120\uc5b8 \ubc29\ubc95\nlet user = 'John', age = 25, message = 'Hello';\n\nlet user = 'John';\nlet age = 25;\nlet message = 'Hello';\n\nlet user = 'John',\n  age = 25,\n  message = 'Hello';\n\n// var\ub294 let\uacfc \uac70\uc758 \ub3d9\uc77c\ud558\ub098, local\uc5d0\uc11c \uc120\uc5b8\ud558\ub354\ub77c\ub3c4 global\nvar message = 'Hello';\n\n// \uc0c1\uc218 \uc120\uc5b8; \ud55c\ubc88 \ud560\ub2f9\ub418\uba74 \ubcc0\uacbd \ubd88\uac00\nconst myBirthday = '18.04.1982';\nmyBirthday = '01.01.2001'; // error, can't reassign the constant!\n\n// \ub300\ubb38\uc790 \uc0c1\uc218 (\uc77c\ubc18\uc801 \uad00\uc2b5)\nconst COLOR_RED = \"#F00\";\nconst COLOR_GREEN = \"#0F0\";\n\n// \uc0c1\uc218 \uc0ac\uc6a9\nlet color = COLOR_ORANGE;\nalert(color); // #FF7F00\n\n// \uc544\ub798 \uc0c1\uc218\ub294 \uac12 \ud560\ub2f9 \uc804\uc774\ubbc0\ub85c \uc774\ud6c4 \ud560\ub2f9 \uac00\ub2a5\n// \ud560\ub2f9\ud6c4\uc5d0\ub294 \ubcc0\uacbd \ubd88\uac00\nconst pageLoadTime = ;\n\n\n\n\n\n\ubcc0\uc218 \uba85\uba85 \uaddc\uce59\n\n\n\n\n\ubb38\uc790\n\uc640 \n\uc22b\uc790\n, \uadf8\ub9ac\uace0 \uae30\ud638 \n$\n\uc640 \n_\n \uc0ac\uc6a9\n\n\n\uce74\uba5c \ud45c\uae30\ubc95(camelCase) \uc8fc\ub85c \uc0ac\uc6a9\n\n\n\uc608\uc57d\uc5b4(reserved name) \uc0ac\uc6a9 X\n\n\n\uccab\ub2e8\uc5b4 \n\uc22b\uc790\n X\n\n\n\ub300\uc18c\ubb38\uc790 \uad6c\ubcc4\n\n\n\n\n\ud568\uc218\ud615 \uc5b8\uc5b4\n\n\n\n\n\ud568\uc218\ud615(functional) \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \ubcc0\uc22b\uac12 \ubcc0\uacbd\uc744 \uae08\uc9c0\n\n\ne.g. \uc2a4\uce7c\ub77c(Scala)\uc640 \uc5bc\ub7ad(Erlang)\n\n\n\ubcd1\ub82c \uacc4\uc0b0(parallel computation)\uc5d0 \uc720\uc6a9\n\n\n\n\n\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd\n\n\n\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd(immediately-invoked function expressions): \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uc2e4\ud589\n\n\n// IIFE\ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95\n\n(function() {\n  alert(\"\ud568\uc218\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\");\n})();\n\n(function() {\n  alert(\"\uc804\uccb4\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\");\n}());\n\n!function() {\n  alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\");\n}();\n\n+function() {\n  alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ub2e8\ud56d \ub367\uc148 \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\");\n}();\n\n\n\n\n\uc790\ub8cc\ud615\n\n\n\uc22b\uc790\ud615\n\n\n\n\n\uc22b\uc790\ud615 \ubc94\uc704: \n(2^53-1)\n ~ \n-(2^53-1)\n; \n9007199254740991\n\n\nBigInt\n: \ub05d\uc5d0 \nn\n\uc744 \ubd99\uc774\uba74 \nBigInt\n\n\nInfinity\n : \ubb34\ud55c\ub300, \n1/0\n \ub85c\ub3c4 \uad6c\ud574\uc9d0\n\n\n-Infinity\n\n\nNaN\n: \uacc4\uc0b0 \uc624\ub958, e.g. \n\"STR\"/2\n, \uc218\ub85c \ubb38\uc790\ub97c \ub098\ub20c \uacbd\uc6b0\n\n\n\n\nlet n = 123;\nn = 12.345;\n\n// \ub05d\uc5d0 'n'\uc774 \ubd99\uc73c\uba74 BigInt\ud615 \uc790\ub8cc\uc785\ub2c8\ub2e4.\nconst bigInt = 1234567890123456789012345678901234567890n;\n\nlet billion = 1000000000;\nlet billion = 1e9;  // 10\uc5b5, 1\uacfc 9\uac1c\uc758 0\nalert( 7.3e9 );  // 73\uc5b5 (7,300,000,000)\n1e3 = 1 * 1000\n1.23e6 = 1.23 * 1000000\nlet ms = 0.000001;\nlet ms = 1e-6; // 1\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c 6\ubc88 \uc18c\uc218\uc810 \uc774\ub3d9\n// 10\uc744 \uc138 \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214\n1e-3 = 1 / 1000 (=0.001)\n// 10\uc744 \uc5ec\uc12f \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214\n1.23e-6 = 1.23 / 1000000 (=0.00000123)\n\n// 16, 8, 2\uc9c4\uc218\ud45c\ud604\nalert( 0xff ); // 255\nalert( 0xFF ); // 255 (\ub300\u00b7\uc18c\ubb38\uc790\ub97c \uac00\ub9ac\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ub458 \ub2e4 \uac19\uc740 \uac12\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.)\nlet a = 0b11111111; // 255\uc758 2\uc9c4\uc218\nlet b = 0o377; // 255\uc758 8\uc9c4\uc218\nalert( a == b ); // true, \uc9c4\ubc95\uc740 \ub2e4\ub974\uc9c0\ub9cc, a\uc640 b\ub294 \uac19\uc740 \uc218\uc784\nlet num = 255;\nalert( num.toString(16) );  // ff\nalert( num.toString(2) );   // 11111111\nalert( 123456..toString(36) ); // 2n9c // base36\n\n// Rounding \uc5b4\ub9bc\uc218\nMath.floor // \uc18c\uc218\uc810 \uccab\ubc88\uc9f8 \uc790\ub9ac \ubc84\ub9bc\nMath.ceil // \uc18c\uc218\uc810 \uc62c\ub9bc\nMath.round // \ubc18\uc62c\ub9bc\n// https://ko.javascript.info/number\n\n//  \uc22b\uc790\uac00 \ub108\ubb34 \ucee4\uc9c0\uba74 64\ube44\ud2b8 \uacf5\uac04\uc774 \ub118\uccd0\uc11c Infinity\nalert( 1e500 ); // Infinity\n// \uc815\ubc00\ub3c4 \uc190\uc2e4\nalert( 0.1 + 0.2 == 0.3 ); // false\n// \uc815\ubc00\ub3c4 \uc190\uc2e4 \ud655\uc778 toFixed(n), n\uc740 \uc18c\uc218\uc810 \uc790\ub9bf\uc218\uc5d0\uc11c \uc5b4\ub9bc\nalert( 0.1.toFixed(20) ); // 0.10000000000000000555\nlet sum = 0.1 + 0.2;\nalert( sum.toFixed(2) ); // 0.30\n\n\n\n\nisNaN, isFinite\n\n\n// NaN\uc740 NaN \uc790\uae30 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uc5ec \uadf8 \uc5b4\ub5a4 \uac12\uacfc\ub3c4 \uac19\uc9c0 \uc54a\ub2e4\ub294 \uc810\uc5d0\uc11c \ub3c5\ud2b9\ud569\ub2c8\ub2e4.\nalert( NaN === NaN ); // false\n\nalert( isNaN(NaN) ); // true\nalert( isNaN(\"str\") ); // true\n\nalert( isFinite(\"15\") ); // true\nalert( isFinite(\"str\") ); // false, NaN\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\nalert( isFinite(Infinity) ); // false, Infinity\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\n\n\n\n\nparseInt, parseFloat\n\n\nalert( parseInt('100px') ); // 100\nalert( parseFloat('12.5em') ); // 12.5\nalert( parseInt('12.3') ); // 12, \uc815\uc218 \ubd80\ubd84\ub9cc \ubc18\ud658\ub429\ub2c8\ub2e4.\nalert( parseFloat('12.3.4') ); // 12.3, \ub450 \ubc88\uc9f8 \uc810\uc5d0\uc11c \uc22b\uc790 \uc77d\uae30\ub97c \uba48\ucda5\ub2c8\ub2e4.\nalert( parseInt('a123') ); // NaN, a\ub294 \uc22b\uc790\uac00 \uc544\ub2c8\ubbc0\ub85c \uc22b\uc790\ub97c \uc77d\ub294 \uac8c \uc911\uc9c0\ub429\ub2c8\ub2e4.\nalert( parseInt('0xff', 16) ); // 255\nalert( parseInt('ff', 16) ); // 255, 0x\uac00 \uc5c6\uc5b4\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4.\nalert( parseInt('2n9c', 36) ); // 123456\n\n\n\n\nMath\n\n\nalert( Math.random() ); // 0.1234567894322\nalert( Math.random() ); // 0.5435252343232\nalert( Math.random() ); // ... (\ubb34\uc791\uc704 \uc218)\nalert( Math.max(3, 5, -10, 0, 1) ); // 5\nalert( Math.min(1, 2) ); // 1\nalert( Math.pow(2, 10) ); // 2\uc758 10\uc81c\uacf1 = 1024\n\n// \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c \uae30\ubc95\nalert( ~2 ); // -3, -(2+1)\uacfc \uac19\uc74c\nalert( ~1 ); // -2, -(1+1)\uacfc \uac19\uc74c\nalert( ~0 ); // -1, -(0+1)\uacfc \uac19\uc74c\nalert( ~-1 ); // 0, -(-1+1)\uacfc \uac19\uc74c\n\n\n\n\n\ubb38\uc790\ud615\n\n\n\n\ncharacter type \uc5c6\uc74c\n\n\n\ud070\ub530\uc634\ud45c: \"Hello\"\n\n\n\uc791\uc740\ub530\uc634\ud45c: 'Hello'\n\n\n\uc5ed \ub530\uc634\ud45c(\ubc31\ud2f1, backtick): \nHello\n\n\n\ubb38\uc790\uc5f4 \uae38\uc774: \ubb38\uc790\uc5f4.length\n\n\n\ubb38\uc790 \uc218\uc815 X, \ubb38\uc790\uc5f4\ub85c\ub9cc \ucde8\uae09\n\n\n\ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc740 UTF-16\uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529\n\n\n\n\nlet str = \"Hello\";\nlet str2 = 'Single quotes are ok too';\nlet phrase = `can embed another ${str}`;\n\nlet name = \"John\";\n// backtick \uc0ac\uc6a9\uc2dc - \ubcc0\uc218\ub97c \ubb38\uc790\uc5f4 \uc911\uac04\uc5d0 \uc0bd\uc785\ud558\uac70\ub098 \uacc4\uc0b0 \uac00\ub2a5\nalert( `Hello, ${name}!` ); // Hello, John!\nalert( `the result is ${1 + 2}` ); // the result is 3\n\n// multi-lines\nlet guestList = `\uc190\ub2d8:\n * John\n * Pete\n * Mary\n`;\nlet guestList = \"\uc190\ub2d8:\\n * John\\n * Pete\\n * Mary\";\nalert( \"\\u00A9\" ); // \u00a9\nalert( \"\\u{20331}\" ); // \u4f6b, \uc911\uad6d\uc5b4(\uae34 \uc720\ub2c8\ucf54\ub4dc)\nalert( \"\\u{1F60D}\" ); // \ud83d\ude0d, \uc6c3\ub294 \uc5bc\uad74 \uae30\ud638(\uae34 \uc720\ub2c8\ucf54\ub4dc)\nalert( 'I\\'m the Walrus!' ); // I'm the Walrus!\n\n// \ubb38\uc790\uc5f4 \uae38\uc774\nalert( `My\\n`.length ); // 3\n\n// \ubb38\uc790 \uc811\uadfc\nlet str = `Hello`;\nalert( str[0] ); // H\nalert( str.charAt(0) ); // H\nalert( str[str.length - 1] ); // o; // \ub9c8\uc9c0\ub9c9 \uae00\uc790\n// \ub300\uc18c\ubb38\uc790\nalert( 'Interface'.toUpperCase() ); // INTERFACE\nalert( 'Interface'.toLowerCase() ); // interface\n\n// \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucc3e\uae30\nlet str = 'Widget with id';\nalert( str.indexOf('Widget') ); // 0, str\uc740 'Widget'\uc73c\ub85c \uc2dc\uc791\ud568\nalert( str.indexOf('widget') ); // -1, indexOf\ub294 \ub300\u00b7\uc18c\ubb38\uc790\ub97c \ub530\uc9c0\ubbc0\ub85c \uc6d0\ud558\ub294 \ubb38\uc790\uc5f4\uc744 \ucc3e\uc9c0 \ubabb\ud568\nalert( str.indexOf(\"id\") ); // 1, \"id\"\ub294 \uccab \ubc88\uc9f8 \uc704\uce58\uc5d0\uc11c \ubc1c\uacac\ub428 (Widget\uc5d0\uc11c id)\n\nlet str = \"As sly as a fox, as strong as an ox\";\nlet target = \"as\";\nlet pos = -1;\nwhile ((pos = str.indexOf(target, pos + 1)) != -1) {\n  alert( `\uc704\uce58: ${pos}` );\n}\n\n// bit not \uc5f0\uc0b0\uc790 \uc0ac\uc6a9 \uae30\ubc95\nlet str = \"Widget\";\nif (~str.indexOf(\"Widget\")) {\n  alert( '\ucc3e\uc558\ub2e4!' ); // \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.\n}\n\nalert( \"Widget with id\".includes(\"Widget\") ); // true\nalert( \"Widget\".startsWith(\"Wid\") ); // true, \"Widget\"\uc740 \"Wid\"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4.\nalert( \"Widget\".endsWith(\"get\") ); // true, \"Widget\"\uc740 \"get\"\uc73c\ub85c \ub05d\ub0a9\ub2c8\ub2e4.\n\n// \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucd94\ucd9c\nlet str = \"stringify\";\nalert( str.slice(0, 5) ); // 'strin', 0\ubc88\uc9f8\ubd80\ud130 5\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(5\ubc88\uc9f8 \uc704\uce58\uc758 \uae00\uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c)\nalert( str.slice(0, 1) ); // 's', 0\ubc88\uc9f8\ubd80\ud130 1\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(1\ubc88\uc9f8 \uc704\uce58\uc758 \uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c)\nalert( str.slice(2) ); // ringify, 2\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0\nalert( str.slice(-4, -1) ); // gif\n\nalert( str.substring(2, 6) ); // \"ring\"\nalert( str.substring(6, 2) ); // \"ring\"\n\nlet str = \"stringify\";\nalert( str.substr(2, 4) ); // ring, \ub450 \ubc88\uc9f8\ubd80\ud130 \uae00\uc790 \ub124 \uac1c\n\n// \ubb38\uc790\uc5f4 \ube44\uad50 UTF-16\nalert( 'a' > 'Z' ); // true\nalert( '\u00d6sterreich' > 'Zealand' ); // true\n\nalert( \"z\".codePointAt(0) ); // 122\nalert( \"Z\".codePointAt(0) ); // 90\nalert( String.fromCodePoint(90) ); // Z\nalert( '\\u005a' ); // Z\n\nalert( '\u00d6sterreich'.localeCompare('Zealand') ); // -1\n\n\n\n\nboolean\n\ud615\n\n\nlet nameFieldChecked = true;\nlet ageFieldChecked = false;\nlet isGreater = 4 > 1;\n\n\n\n\nnull\n \uac12\n\n\n\uc77c\ubc18 null point\uc758 \uc774\ubbf8\uac00 \uc544\ub2c8\ub77c, \n\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294(nothing)\n \uac12, \n\n\ube44\uc5b4 \uc788\ub294(empty)\n \uac12, \n\uc54c \uc218 \uc5c6\ub294(unknown)\n \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370 \uc0ac\uc6a9\n\n\nlet age = null; // \ub098\uc774(age)\ub97c \uc54c \uc218 \uc5c6\uac70\ub098 \uadf8 \uac12\uc774 \ube44\uc5b4\uc788\uc74c\n\n\n\n\nundefined\n \uac12\n\n\nundefined\n\ub294 '\uac12\uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\u2019\ub97c \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9\n\n\nlet age;\nalert(age); // 'undefined' \ucd9c\ub825\n\n\n\n\nobject\n\n\n\n\n= \njson\n?\n\n\nThis is non-primitive type.\n\n\nproperty\n: {key: value} pair, key=\ubb38\uc790\ud615, \uc2ec\ubcfc\ud615, value=\ubaa8\ub4e0 \uc790\ub8cc\ud615\n\n\ndot notation\n, \nsquare bracket notation\n\uc73c\ub85c property \uc811\uadfc,\ucd94\uac00,\uc0ad\uc81c \uac00\ub2a5\n\n\nin\n\uc744 \uc0ac\uc6a9\ud574 property \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778 \uac00\ub2a5 (\ntrue\n/\nfalse\n)\n\n\nproperty\ub294 object\uc5d0 \ucc38\uc870\ub85c \uad6c\ud604\ub428, object\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud560 \uacbd\uc6b0 \uac19\uc740 property\ub97c \ucc38\uc870\ud568\n\n\n\n\n// empty object\nlet user = new Object(); // \uac1d\uccb4 \uc0dd\uc131\uc790\ub85c \uc0dd\uc131\nlet user = {};  // \uac1d\uccb4 \ub9ac\ud130\ub7f4(object literal)\ub85c \uc0dd\uc131\n\nlet user = {     // \uac1d\uccb4\n  name: \"John\",  // \ud0a4: \"name\",  \uac12: \"John\"\n  age: 30,       // \ud0a4: \"age\", \uac12: 30\n  \"likes birds\": true  // \ubcf5\uc218\uc758 \ub2e8\uc5b4\ub294 \ub530\uc634\ud45c\n};\n\nalert( user.name ); // John, dot notation\uc744 \uc0ac\uc6a9\ud574 \uc811\uadfc\nalert( user[\"name\"] ); // square bracket notation\uc744 \uc0ac\uc6a9\ud55c \uc811\uadfc\n\nuser.likes birds = false; // error, \uad6c\ubb38\ud574\uc11d \ubd88\ub2a5\nuser[\"likes birds\"] = false; // ok\n\nalart( user.weight === undefined ); // property\uac00 \uc5c6\uc744 \uacbd\uc6b0, undefined\nalart( user[\"weight\"] === undefined );\nalart( \"key\" in user ); // in \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud574 \uc874\uc7ac\uc720\ubb34 \ud655\uc778\n\n\nuser.isAdmin = true; // add property\ndelete user.age; // delete a property\ndelete user[\"likes birds\"];\n\nlet user = {\n  name: \"John\",\n  age: 30,\n};\n\n// computed property!\nlet fruit = \"apple\"\nlet fruit2 = \"banana\"\nlet bag = {\n  [fruit]: 5, // fruit\ub97c key\ub85c \uc0ac\uc6a9\n  [fruit + 'Computers']: 5 // key\ub85c \ubcf5\ud569 \uc5f0\uc0b0 \uac00\ub2a5\n};\nbag[fruit2] = 6; // fruit2\ub97c key\ub85c \uc0ac\uc6a9\nalert( bag.apple ); // fruit\uc5d0 \"apple\"\uc774 \ud560\ub2f9\ub418\uc5c8\ub2e4\uba74, 5\uac00 \ucd9c\ub825\n\n// property value shorthand (\ub2e8\ucd95 \uad6c\ubb38)\nfunction makeUser(name, age) {\n  return {\n    name, // name: name \uacfc \uac19\uc74c\n    age,  // age: age \uc640 \uac19\uc74c\n    // ...\n  };\n}\n\nlet user = {\n  name,  // name: name \uacfc \uac19\uc74c\n  age: 30\n};\n\n// property iteration\nfor (key in object) {\n  // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n}\n\n// object\uc758 property\ub294 \uc120\uc5b8\ud560 \ud544\uc694\uc5c6\uc74c\nfunction marry(man, woman) {\n  woman.husband = man;\n  man.wife = woman;\n\n  return {\n    father: man,\n    mother: woman\n  }\n}\n\nlet family = marry({\n  name: \"John\"\n}, {\n  name: \"Ann\"\n});\n\n\n\n\nconst object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5\n\n\nconst user = {\n  name: \"John\"\n};\nuser.name = \"Pete\"; // (*)\nalert(user.name); // Pete\n\n\n\n\n\uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok\n\n\n// \uc608\uc57d\uc5b4\ub97c \ud0a4\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4.\nlet obj = {\n  for: 1,\n  let: 2,\n  return: 3\n};\n\n\n\n\n\ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\n\n\nlet obj = {\n  0: \"test\" // \"0\": \"test\"\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n};\n\nalert( obj[\"0\"] ); // test\nalert( obj[0] ); // test\n\n\n\n\nobject \ube44\uad50\n\n\nlet a = {};\nlet b = a; // \ucc38\uc870\uc5d0 \uc758\ud55c \ubcf5\uc0ac\nalert( a == b ); // true, \ub450 \ubcc0\uc218\ub294 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4.\nalert( a === b ); // true\n\nlet a = {};\nlet b = {}; // \ub3c5\ub9bd\ub41c \ub450 \uac1d\uccb4\nalert( a == b ); // false\n\n\n\n\n\uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign\n\n\n\n\nproperty loop\ub97c \ud1b5\ud574\uc11c \ubcf5\uc0ac\n\n\nObject.assign(dest, [src1, src2, src3...])\n \uc0ac\uc6a9\n\n\n\uae4a\uc740 \ubcf5\uc0ac(deep cloning)\ub294 \uc9c1\uc811 \ub9cc\ub4e4\ub358\uc9c0, lodash\uc758 \n_.cloneDeep(obj)\n \uc0ac\uc6a9\n\n\n\n\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = {}; // \uc0c8\ub85c\uc6b4 \ube48 \uac1d\uccb4\n// \ube48 \uac1d\uccb4\uc5d0 user \ud504\ub85c\ud37c\ud2f0 \uc804\ubd80\ub97c \ubcf5\uc0ac\ud574 \ub123\uc2b5\ub2c8\ub2e4.\nfor (let key in user) {\n  clone[key] = user[key];\n}\n\n// Object.assign \uc0ac\uc6a9\nlet user = { name: \"John\" };\nlet permissions1 = { canView: true };\nlet permissions2 = { canEdit: true };\n\n// permissions1\uacfc permissions2\uc758 \ud504\ub85c\ud37c\ud2f0\ub97c user\ub85c \ubcf5\uc0ac\nObject.assign(user, permissions1, permissions2);\n\n\n\n\nMethods and this\n\n\n\n\n\uac1c\uccb4\uc758 \ub3d9\uc791\uc744 \uba85\uc138\n\n\n= property\uc5d0 \ud560\ub2f9\ub41c \ud568\uc218\n\n\nthis\n: method\uc5d0\uc11c \ud574\ub2f9 \uac1d\uccb4\uc758 property \uc811\uadfc\uc744 \uc704\ud574 \uc0ac\uc6a9\n\n\nArrow function\uc740 \nthis\n\uac00 \uc5c6\uc74c, \ubcc4\uac1c\uc758 this\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \uac74 \uc6d0\ud558\uc9c0 \uc54a\uace0, \uc678\ubd80 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \uc788\ub294 this\ub97c \uc774\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 \ud654\uc0b4\ud45c \ud568\uc218\uac00 \uc720\uc6a9\n\n\n\n\nlet user = {\n  sayHi: function() {\n    alert(\"Hello\");\n  }\n};\n\n// method \ucd95\uc57d\ud615\nlet user = {\n  sayHi() { // \"sayHi: function()\"\uacfc \ub3d9\uc77c\n    alert(\"Hello\");\n  }\n};\n\n// Arrow function\uc740 \uc0c1\uc704 namespace\uc758 this\ub97c \uac00\uc838\uc634\nlet user = {\n  firstName: \"\ubcf4\ub77c\",\n  sayHi() {\n    let arrow = () => alert(this.firstName);\n    arrow();\n  }\n};\n\nuser.sayHi(); // sayHi\uc758 this \ucc28\uc6a9; \uacb0\uacfc '\ubcf4\ub77c'\n\n\n\n\n\uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function\n\n\n- \uc0dd\uc131\uc790 \ud568\uc218(constructor function)\uc640 \uc77c\ubc18 \ud568\uc218\uc5d0 \uae30\uc220\uc801\uc778 \ucc28\uc774\ub294 \uc5c6\uc74c\n\n\n\n\n\uad00\ub8401: \ud568\uc218 \uc774\ub984\uc758 \uccab \uae00\uc790\ub294 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\n\n\n\uad00\ub8402: \ubc18\ub4dc\uc2dc 'new' \uc5f0\uc0b0\uc790\ub97c \ubd99\uc5ec \uc2e4\ud589\n\n\nnew Constructor(...) \uc2dc\n\n\n\ube48 \uac1d\uccb4 \uc0dd\uc131, this\uc5d0 \ud560\ub2f9\n\n\n\ud568\uc218 \uc2e4\ud589 => property \ucd94\uac00\n\n\n\uc0dd\uc131\ub41c this\ub97c \ubc18\ud658\n\n\n\n\n// constructor function\nfunction User(name) {\n  // this = {};  (\ube48 \uac1d\uccb4\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9d0)\n  // \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud37c\ud2f0\ub97c this\uc5d0 \ucd94\uac00\ud568\n  this.name = name;\n  this.isAdmin = false;\n  // return this;  (this\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ubc18\ud658\ub428)\n}\n\nlet user = new User(\"\ubcf4\ub77c\");\nalert(user.isAdmin); // false\n\n// \uc775\uba85 \uc0dd\uc131\uc790 (anonymous constructor) - \ud55c\ubc88\ub9cc \uc0ac\uc6a9\nlet user = new function() {\n  this.name = \"John\";\n  this.isAdmin = false;\n};\n\n// new.target\uc73c\ub85c constructor\uac00 new\ud568\uaed8 \ud638\ucd9c\ub418\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\uc74c.\nfunction User() {\n  alert(new.target);\n}\n// 'new' \uc5c6\uc774 \ud638\ucd9c\ud568\nUser(); // undefined\n// 'new'\ub97c \ubd99\uc5ec \ud638\ucd9c\ud568\nnew User(); // function User { ... }\n\n// \uc0dd\uc131\uc790 () \uad04\ud638 \uc0dd\ub7b5\nlet user = new User; // <-- \uad04\ud638\uac00 \uc5c6\uc74c\nlet user = new User(); // \uc704 \ucf54\ub4dc\uc640 \ub611\uac19\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4.\n\n// \uc0dd\uc131\uc790\uc5d0\uc11c method \ucd94\uac00\nfunction User(name) {\n  this.name = name;\n\n  this.sayHi = function() {\n    alert( \"\uc81c \uc774\ub984\uc740 \" + this.name + \"\uc785\ub2c8\ub2e4.\" );\n  };\n}\nlet bora = new User(\"\uc774\ubcf4\ub77c\");\nbora.sayHi(); // \uc81c \uc774\ub984\uc740 \uc774\ubcf4\ub77c\uc785\ub2c8\ub2e4.\n\n\n\n\n\uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) \n?.\n, \n?.()\n, \n?.[]\n\n\n\n\nproperty \uc874\uc7ac \uc720\ubb34 \ud3c9\uac00\n\n\nmethod\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5\n\n\nproperty \uc4f0\uae30\uc5d0\ub294 \uc0ac\uc6a9 \ubd88\uac00\n\n\n\n\nlet user = {}; // \uc8fc\uc18c \uc815\ubcf4\uac00 \uc5c6\ub294 \uc0ac\uc6a9\uc790\nalert(user.address.street); // TypeError: Cannot read property 'street' of undefined\nalert( user && user.address && user.address.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nalert( user?.address?.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. <= optional chaining\n\n// \ud568\uc218 \ud638\ucd9c\uc5d0\ub3c4 \uc0ac\uc6a9\nlet user1 = {\n  firstName: \"Violet\"\n  admin() {\n    alert(\"\uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\");\n  }\n}\n\nlet user2 = {};\n\nuser1.admin?.(); // \uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\nuser2.admin?.();\nalert( user1?.[\"firstName\"] ); // Violet\n\n\n\n\nobject \uc21c\ud68c \ud568\uc218\n\n\n\uc544\ub798 \ud568\uc218\ub294 \u2018\uc9c4\uc9dc\u2019 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\uba70, Symbol\uc740 \ubb34\uc2dc\n\n\n\n\nObject.keys(obj)\n: \uac1d\uccb4\uc758 \ud0a4\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658\n\n\nObject.values(obj)\n: \uac1d\uccb4\uc758 \uac12\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658\n\n\nObject.entries(obj)\n: [\ud0a4, \uac12] \uc30d\uc744 \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658\n\n\nObject.fromEntries(array)\n: \nObject.entries(obj)\n\uc758 \uc5ed\ubcc0\ud658\n\n\n\n\nlet user = {\n  name: \"John\",\n  age: 30\n};\n// Object.keys(user) = [\"name\", \"age\"]\n// Object.values(user) = [\"John\", 30]\n// Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ]\nfor (let value of Object.values(user)) {\n  alert(value);\n}\n\nlet prices = {\n  banana: 1,\n  orange: 2,\n  meat: 4,\n};\nlet doublePrices = Object.fromEntries(\n  // \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ubcc0\ud658\ud574\uc11c \ubc30\uc5f4 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc778 map\uc744 \uc801\uc6a9\ud558\uace0 fromEntries\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc744 \ub2e4\uc2dc \uac1d\uccb4\ub85c \ub418\ub3cc\ub9bd\ub2c8\ub2e4.\n  Object.entries(prices).map(([key, value]) => [key, value * 2])\n);\nalert(doublePrices.meat); // 8\n\n\n\n\nsymbol\n\n\n\n\n\uc678\ubd80 \uac1d\uccb4\uc5d0 \uc790\uc2e0\uc758 \uc815\ubcf4\ub97c hidden property\ub85c \ucd94\uac00\uc2dc \uc720\uc6a9\n\n\nfor..in\n \ubc18\ubcf5\ubb38\uc5d0\uc11c \ubc30\uc81c\n\n\nObject.assign\n\uc740 symbol\ub3c4 \ubcf5\uc0ac\ud568\n\n\nglobal symbol registry\n: global \uc601\uc5ed\uc5d0 symbol\uc744 \uc800\uc7a5, script \uacf3\uacf3\uc5d0\uc11c symbol\uc744 \ud638\ucd9c\ud558\uc5ec \uc0ac\uc6a9\n\n\nsystem symbol\n: javascript \ub0b4\ubd80 symbol; https://tc39.github.io/ecma262/#sec-well-known-symbols\n\n\nSymbol.hasInstance\n\n\nSymbol.isConcatSpreadable\n\n\nSymbol.iterator\n\n\nSymbol.toPrimitive\n\n\n\n\nlet id = Symbol(\"id\");\nalert(id); // TypeError: Cannot convert a Symbol value to a string\nalert(id.toString()); // Symbol(id)\uac00 \uc5bc\ub7ff \ucc3d\uc5d0 \ucd9c\ub825\ub428\nalert(id.description); // id\n\n// Hidden property\nlet user = { // \uc11c\ub4dc\ud30c\ud2f0 \ucf54\ub4dc\uc5d0\uc11c \uac00\uc838\uc628 \uac1d\uccb4\n  name: \"John\"\n};\nlet id = Symbol(\"id\");\nuser[id] = 1;\nalert( user[id] ); // \uc2ec\ubcfc\uc744 \ud0a4\ub85c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n// \ub2e4\ub978 \ubc29\ubc95\nlet id = Symbol(\"id\");\nlet user = {\n  name: \"John\",\n  [id]: 123 // \"id\": 123\uc740 \uc548\ub428\n};\n\n// Object.assign\uacfc symbol \ub3d9\uc791\nlet id = Symbol(\"id\");\nlet user = {\n  [id]: 123\n};\n\nlet clone = Object.assign({}, user);\n\nalert( clone[id] ); // 123\n\n\n\n\n// \uc804\uc5ed \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0\uc11c \uc2ec\ubcfc \uc77d\uae30\nlet id = Symbol.for(\"id\"); // \uc2ec\ubcfc\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c\uc6b4 \uc2ec\ubcfc \uc0dd\uc131\nlet idAgain = Symbol.for(\"id\");\nalert( id === idAgain ); // true\n// \uc2ec\ubcfc\uc744 \uc774\uc6a9\ud574 \uc774\ub984\uc744 \uc5bb\uc74c\nalert( Symbol.keyFor(id) ); // \"id\"\nalert( Symbol.keyFor(localSymbol) ); // \uc804\uc5ed \uc2ec\ubcfc\uc774 \uc544\ub2d8, undefined \ubc18\ud658\n\n\n\n\n\uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive\n\n\n\n\n\uac1d\uccb4\uc5d0 \nobj[Symbol.toPrimitive](hint)\n\uba54\uc11c\ub4dc\uac00 \uc788\ub294\uc9c0 \ucc3e\uace0, \uc788\ub2e4\uba74 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\n\n\nSymbol.toPrimitive\n\ub294 \uc2dc\uc2a4\ud15c \uc2ec\ubcfc\ub85c, \uc2ec\ubcfc\ud615 \ud0a4\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\n\n1\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0 hint\uac00 \"string\"\uc774\ub77c\uba74,\n\n\nobj.toString()\n\uc774\ub098 \nobj.valueOf()\n\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428).\n\n\n1\uacfc 2\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0, hint\uac00 \"number\"\ub098 \"default\"\ub77c\uba74\n\n\nobj.valueOf()\n\ub098 \nobj.toString()\n\uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428).\n\n\nhint\ub294 \"string\", \"number\", \"default\" \uc911 \ud558\ub098\n\n\n\n\nlet user = {\n  name: \"John\",\n  money: 1000,\n\n  [Symbol.toPrimitive](hint) {\n    alert(`hint: ${hint}`);\n    return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money;\n  }\n};\n\n// \ub370\ubaa8:\nalert(user); // hint: string -> {name: \"John\"}\nalert(+user); // hint: number -> 1000\nalert(user + 500); // hint: default -> 1500\n\n// toString, valueOf\nlet user = {\n  name: \"John\",\n  money: 1000,\n\n  // hint\uac00 \"string\"\uc778 \uacbd\uc6b0\n  toString() {\n    return `{name: \"${this.name}\"}`;\n  },\n\n  // hint\uac00 \"number\"\ub098 \"default\"\uc778 \uacbd\uc6b0\n  valueOf() {\n    return this.money;\n  }\n\n};\n\nalert(user); // toString -> {name: \"John\"}\nalert(+user); // valueOf -> 1000\nalert(user + 500); // valueOf -> 1500\n\n\n\n\niterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator\n\n\n\n\n\uc8fc\ub85c array\uc5d0 \uc0ac\uc6a9\ub418\ub358 \nfor..in\n \uc774 \ub3d9\uc791 \uac00\ub2a5\ud568\n\n\nnext()\n \ub2e4\uc74c \uac12 iterater\ub97c \ubc18\ud658\n\n\n\n\nlet range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    this.current = this.from;\n    return this;\n  },\n\n  next() {\n    if (this.current <= this.to) {\n      return { done: false, value: this.current++ };\n    } else {\n      return { done: true };\n    }\n  }\n};\n\nfor (let num of range) {\n  alert(num); // 1, then 2, 3, 4, 5\n}\n\n\n\n\n\ubb38\uc790\uc5f4 = iterable\n\n\nfor (let char of \"test\") {\n  // \uae00\uc790 \ud558\ub098\ub2f9 \ud55c \ubc88 \uc2e4\ud589\ub429\ub2c8\ub2e4(4\ud68c \ud638\ucd9c).\n  alert( char ); // t, e, s, t\uac00 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\ub428\n}\n\n\n\n\nArray.from\n\uc73c\ub85c \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uae30\n\n\nlet arrayLike = {\n  0: \"Hello\",\n  1: \"World\",\n  length: 2\n};\n\nlet arr = Array.from(arrayLike); // (*)\nalert(arr.pop()); // World (\uba54\uc11c\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.)\n\n\n\n\nArray\n\n\n\n\npush\uc640 pop\uc740 \ube60\ub974\uc9c0\ub9cc shift\uc640 unshift\ub294 \ub290\ub9bc\n\n\nhttps://ko.javascript.info/array\n\n\nfor..in loop \uc0ac\uc6a9\uc2dc \ub0b4\ubd80 property\ub85c \uac19\uc774 \uc21c\ud68c\ud558\ubbc0\ub85c \uc0ac\uc6a9 X\n\n\n\n\n// \uc120\uc5b8\nlet arr = new Array();\nlet arr = [];\nlet arr = new Array(2); // [undefined, undefined]\nlet fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\"];\nlet fruits = [\n  \"\uc0ac\uacfc\",\n  \"\uc624\ub80c\uc9c0\",\n  \"\uc790\ub450\",\n];\nlet matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\n// \uc811\uadfc\nalert( fruits[0] ); // \uc0ac\uacfc\nfruits[2] = '\ubc30';\n\n// \ud06c\uae30\nalert( fruits.length ); // 3\n\n// \ubcf5\ud569 \ubc30\uc5f4\nlet arr = [ '\uc0ac\uacfc', { name: '\uc774\ubcf4\ub77c' }, true, function() { alert('\uc548\ub155\ud558\uc138\uc694.'); } ];\n\n// pop\u00b7push\uc640 shift\u00b7unshift\nlet fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"];\nalert( fruits.pop() ); // \ubc30\uc5f4\uc5d0\uc11c \"\ubc30\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4.\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0\nfruits.push(\"\ubc30\");\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30\nalert( fruits.shift() ); // \ubc30\uc5f4\uc5d0\uc11c \"\uc0ac\uacfc\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4.\nalert( fruits ); // \uc624\ub80c\uc9c0,\ubc30\nfruits.unshift('\uc0ac\uacfc'); // \uc55e\uc5d0 \uc694\uc18c \ucd94\uac00\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30\n\n// \uc5ec\ub7ec \uc694\uc18c \uc0bd\uc785\nfruits.push(\"\uc624\ub80c\uc9c0\", \"\ubc30\");\nfruits.unshift(\"\ud30c\uc778\uc560\ud50c\", \"\ub808\ubaac\");\n\n// \uc694\uc18c \uc0ad\uc81c\nlet arr = [\"I\", \"go\", \"home\"];\ndelete arr[1]; // \"go\"\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4.\narr.splice(1, 1); // \uc778\ub371\uc2a4 1\ubd80\ud130 \uc694\uc18c \ud55c \uac1c\ub97c \uc81c\uac70\n\n// \uc694\uc18c \ub300\uccb4\nlet arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"];\n// \ucc98\uc74c(0) \uc138 \uac1c(3)\uc758 \uc694\uc18c\ub97c \uc9c0\uc6b0\uace0, \uc774 \uc790\ub9ac\ub97c \ub2e4\ub978 \uc694\uc18c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\narr.splice(0, 3, \"Let's\", \"dance\");\nalert( arr ) // now [\"Let's\", \"dance\", \"right\", \"now\"]\n\n// \uc694\uc18c \ucd94\uac00 (deleteCount\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc694\uc18c\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub97c \ucd94\uac00)\narr.splice(2, 0, \"complex\", \"language\");\n\n// slicing, concat\nlet arr = [1, 2];\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4]) ); // 1,2,3,4\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, [5,6]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, 5\uc640 6\uc744 \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6\n\nlet arr = [\"t\", \"e\", \"s\", \"t\"];\nalert( arr.slice(1, 3) ); // e,s (\uc778\ub371\uc2a4\uac00 1\uc778 \uc694\uc18c\ubd80\ud130 \uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac(\uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\ub294 \uc81c\uc678))\nalert( arr.slice(-2) ); // s,t (\uc778\ub371\uc2a4\uac00 -2\uc778 \uc694\uc18c\ubd80\ud130 \uc81c\uc77c \ub05d \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac)\n\n// \ubc18\ubcf5\ubb38, \uc21c\ud68c\nlet arr = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"];\n\nfor (let i = 0; i < arr.length; i++) {\n  alert( arr[i] );\n}\n\n// for..of\nfor (let fruit of fruits) {\n  alert( fruit );\n}\n\narr.forEach(function(item, index, array) {\n  // \uc694\uc18c\uc5d0 \ubb34\uc5b8\uac00\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n});\n\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach(alert);\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) => {\n  alert(`${item} is at index ${index} in ${array}`);\n});\n\n// \ubc30\uc5f4 \ud0d0\uc0c9: indexOf, lastIndexOf\uc640 includes\nlet arr = [1, 0, false];\nalert( arr.indexOf(0) ); // 1\nalert( arr.indexOf(false) ); // 2\nalert( arr.indexOf(null) ); // -1\nalert( arr.includes(1) ); // true\n\nconst arr = [NaN];\nalert( arr.indexOf(NaN) ); // -1 (\uc644\uc804 \ud56d\ub4f1 \ube44\uad50 === \ub294 NaN\uc5d4 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c 0\uc774 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.)\nalert( arr.includes(NaN) );// true (NaN\uc758 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.)\n\nlet result = arr.find(function(item, index, array) {\n});\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\nlet user = users.find(item => item.id == 1);\nalert(user.name); // John\n\n// \uc870\uac74 \ud0d0\uc0c9\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\n// \uc55e\ucabd \uc0ac\uc6a9\uc790 \ub450 \uba85\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\nlet someUsers = users.filter(item => item.id < 3);\nalert(someUsers.length); // 2\n\n\n\n\nmapping function for array\n\n\n\ubc30\uc5f4\uc744 \ubcc0\ud615\uc2dc\ud0a4\uac70\ub098 \uc694\uc18c\ub97c \uc7ac \uc815\ub82c\ud574\uc8fc\ub294 \uba54\uc11c\ub4dc\n\n\nlet result = arr.map(function(item, index, array) {\n  // \uc694\uc18c \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n});\n\nlet lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item => item.length);\nalert(lengths); // 5,7,6\n\n\n\n\nsort\n\n\nlet arr = [ 1, 2, 15 ];\narr.sort(); // arr \ub0b4\ubd80\uac00 \uc7ac \uc815\ub82c\ub429\ub2c8\ub2e4.\nalert( arr );  // 1, 15, 2\n\nfunction compareNumeric(a, b) {\n  if (a > b) return 1;\n  if (a == b) return 0;\n  if (a < b) return -1;\n}\nlet arr = [ 1, 2, 15 ];\narr.sort(compareNumeric);\nalert(arr);  // 1, 2, 15\n\n[1, -2, 15, 2, 0, 8].sort(function(a, b) {\n  alert( a + \" <> \" + b );\n  return a - b;\n});\n\n// arrow function \uc0ac\uc6a9\narr.sort( (a, b) => a - b );\n\n// \ubb38\uc790\uc5f4 \uc815\ub82c\uc2dc\uc5d0\ub294 localeCompare \uc0ac\uc6a9\nlet countries = ['\u00d6sterreich', 'Andorra', 'Vietnam'];\nalert( countries.sort( (a, b) => a > b ? 1 : -1) ); // Andorra, Vietnam, \u00d6sterreich (\uc81c\ub300\ub85c \uc815\ub82c\uc774 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.)\nalert( countries.sort( (a, b) => a.localeCompare(b) ) ); // Andorra,\u00d6sterreich,Vietnam (\uc81c\ub300\ub85c \uc815\ub82c\ub418\uc5c8\ub124\uc694!)\n\n// \uc5ed\uc815\ub82c\nlet arr = [1, 2, 3, 4, 5];\narr.reverse();\nalert( arr ); // 5,4,3,2,1\n\n\n\n\n\ubb38\uc790\uc5f4 <==> \ubc30\uc5f4\n\n\nlet names = 'Bilbo, Gandalf, Nazgul';\nlet arr = names.split(', ');\nfor (let name of arr) {\n  alert( `${name}\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0` ); // Bilbo\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0\n}\n\nlet str = \"test\";\nalert( str.split('') ); // t,e,s,t\n\n\nlet arr = ['Bilbo', 'Gandalf', 'Nazgul'];\nlet str = arr.join(';'); // \ubc30\uc5f4 \uc694\uc18c \ubaa8\ub450\ub97c ;\ub97c \uc0ac\uc6a9\ud574 \ud558\ub098\uc758 \ubb38\uc790\uc5f4\ub85c \ud569\uce69\ub2c8\ub2e4.\nalert( str ); // Bilbo;Gandalf;Nazgul\n\n\n\n\nreduce\uc640 reduceRight (\ub204\uc0b0\uae30)\n\n\nlet value = arr.reduce(function(accumulator, item, index, array) {\n  // ...\n}, [initial]);\nlet arr = [1, 2, 3, 4, 5];\nlet result = arr.reduce((sum, current) => sum + current, 0);\nalert(result); // 15\n\n\n\n\n\ubc30\uc5f4\uc778\uc9c0 \ud655\uc778\n\n\nalert(Array.isArray({})); // false\nalert(Array.isArray([])); // true\n\n\n\n\nmap\n\n\n\uac1d\uccb4\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, key\uc5d0 \ub2e4\uc591\ud55c \uc790\ub8cc\ud615 \uc9c0\uc6d0\n\n\n\n\n\ub418\ub3c4\ub85d get(), set()\uc744 \uc0ac\uc6a9?\n\n\nmap\uc740 \ud0a4\ub85c \uac1d\uccb4\ub97c \ud5c8\uc6a9\n\n\nSameValueZero\n\ub77c \ubd88\ub9ac\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uac12\uc758 \ub4f1\uac00 \uc5ec\ubd80\ub97c \ud655\uc778\n\n\ncall chaining \uc0ac\uc6a9\uac00\ub2a5: \ud638\ucd9c\ub9c8\ub2e4 map \uc790\uc2e0\uc744 \ubc18\ud658\ud568\n\n\n\uc0bd\uc785 \uc21c\uc11c\ub97c \uae30\uc5b5\ud568 = ordered map\n\n\nObject.entries\n: \uac1d\uccb4\ub97c map\uc73c\ub85c \ubc14\uafb8\uae30\n\n\nObject.fromEntries\n: map\uc744 \uac1d\uccb4\ub85c \ubc14\uafb8\uae30\n\n\n\n\n\uc81c\uacf5 \ud568\uc218\n\n\n\n\nnew Map()\n: \uc0dd\uc131\n\n\nmap.set(key, value)\n: {key: value} \uc800\uc7a5\n\n\nmap.get(key)\n: value \ubc18\ud658, key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 undefined\n\n\nmap.has(key)\n: true if the key exists\n\n\nmap.delete(key)\n: key, value \uc0ad\uc81c\n\n\nmap.clear()\n: clear all in the map.\n\n\nmap.size\n:  size of the map\n\n\nmap.keys()\n: \uac01 \uc694\uc18c\uc758 \ud0a4\ub97c \ubaa8\uc740 \ubc18\ubcf5 \uac00\ub2a5\ud55c(iterable, \uc774\ud130\ub7ec\ube14) \uac1d\uccb4\ub97c \ubc18\ud658; \nfor..of\n\n\nmap.values()\n: \uac01 \uc694\uc18c\uc758 \uac12\uc744 \ubaa8\uc740 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; \nfor..of\n\n\nmap.entries()\n: \uc694\uc18c\uc758 [\ud0a4, \uac12]\uc744 \ud55c \uc30d\uc73c\ub85c \ud558\ub294 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658; \nfor..of\n\n\nmap.forEach((value, key, map) => {})\n: map\uc758 {key: value} \uc21c\ud68c\n\n\n\n\nlet map = new Map();\n\nmap.set('1', 'str1');   // \ubb38\uc790\ud615 \ud0a4\nmap.set(1, 'num1');     // \uc22b\uc790\ud615 \ud0a4\nmap.set(true, 'bool1'); // \ubd88\ub9b0\ud615 \ud0a4\n\n// map\uc740 key\uc758 \ud0c0\uc785\uc744 \ubcc0\ud658\uc2dc\ud0a4\uc9c0 \uc54a\uace0 \uadf8\ub300\ub85c \uc720\uc9c0\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\nalert( map.size ); // 3\n\n// map call chaining\nmap.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n\n// map \uc694\uc18c \ubc18\ubcf5\ubb38\nlet recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// \ud0a4(vegetable)\ub97c \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// \uac12(amount)\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// [\ud0a4, \uac12] \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let entry of recipeMap) { // recipeMap.entries()\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n  alert(entry); // cucumber,500 ...\n}\n\n// \uac01 (\ud0a4, \uac12) \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \ud568\uc218\ub97c \uc2e4\ud589\nrecipeMap.forEach( (value, key, map) => {\n  alert(`${key}: ${value}`); // cucumber: 500 ...\n});\n\n// map\uc73c\ub85c \ubcc0\ud658\nlet map = new Map([ // \uac01 \uc694\uc18c\uac00 [\ud0a4, \uac12] \uc30d\uc778 \ubc30\uc5f4\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\nalert( map.get('1') ); // str1\n\nlet obj = {\n  name: \"John\",\n  age: 30\n};\n\nlet map = new Map(Object.entries(obj));\nalert( map.get('name') ); // John\n\n// map\uc744 object\ub85c \ubcc0\ud658\nlet prices = Object.fromEntries([\n  ['banana', 1],\n  ['orange', 2],\n  ['meat', 4]\n]);\n\n\n\n\nset\n\n\n\uac12\uc758 \uc911\ubcf5 \ubd88\uac00\ud55c collection\uc73c\ub85c call chaining \uc0ac\uc6a9\uac00\ub2a5\n\n\n\n\nnew Set(iterable)\n: set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac\n\n\nset.add(value)\n: \uac12\uc744 \ucd94\uac00\n\n\nset.delete(value)\n: \uac12 \uc0ad\uc81c, it returns true or false.\n\n\nset.has(value)\n: \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658\n\n\nset.clear()\n: set\uc758 \ubaa8\ub4e0 \uac12 \uc0ad\uc81c\n\n\nset.size\n: set \ub0b4 \uc694\uc18c\uc758 \uc218\n\n\nset.forEach((value, valueAgain, set) => {})\n: set \uc694\uc18c \ubc18\ubcf5 \uc21c\ud68c\n\n\nset.keys()\n\n\nset.values()\n\n\nset.entries()\n\n\n\n\nlet set = new Set();\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\nalert( set.size ); // 3\nfor (let user of set) {\n  alert(user.name); // // John, Pete, Mary \uc21c\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4.\n}\n// forEach\nset.forEach((value, valueAgain, set) => {\n  alert(value);\n});\n\n\n\n\nWeakMap\n and \nWeakSet\n\n\nWeakMap\uc740 object\ub9cc\uc744 key\ub85c \uc0ac\uc6a9\ud558\uba70, object\uac00 unreachable\ud558\uba74, WeakMap\uc5d0 key\ub3c4 Garbage collection\uc5d0 \uc758\ud574 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc790\ub3d9\ud574\uc81c\ub428\n\n\n\n\nWeakMap\uc740 \ubd80\ucc28\uc801\uc778 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uacf3\uc774 \ud544\uc694\ud560 \ub54c \uc720\uc6a9 e.g. \uc0ac\uc6a9\uc790 \ubc29\ubb38\ud69f\uc218, caching\n\n\n\n\n\n\nweakMap.get(key)\n\n\nweakMap.set(key, value)\n\n\nweakMap.delete(key)\n\n\nweakMap.has(key)\n\n\n\n\nWeakSet\ub3c4 WeakMap\uacfc \uc720\uc0ac\ud558\ub098 \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4.\n\n\n\n\nnew WeakSet(iterable)\n: set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac\n\n\nweakSet.add(value)\n: \uac12\uc744 \ucd94\uac00\n\n\nweakSet.delete(value)\n: \uac12 \uc0ad\uc81c, it returns true or false.\n\n\nweakSet.has(value)\n: \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658\n\n\n\n\nlet john = { name: \"John\" };\nlet weakMap = new WeakMap();\nweakMap.set(john, \"...\");\njohn = null; // \ucc38\uc870\ub97c \ub36e\uc5b4\uc500\n// john\uc744 \ub098\ud0c0\ub0b4\ub294 \uac1d\uccb4\ub294 \uc774\uc81c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc9c0\uc6cc\uc9d1\ub2c8\ub2e4!\n\n// caching\nlet cache = new WeakMap();\n// \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \uc704\ud06c\ub9f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\nfunction process(obj) {\n  if (!cache.has(obj)) {\n    let result = /* \uc5f0\uc0b0 \uc218\ud589 */ obj;\n    cache.set(obj, result);\n  }\n  return cache.get(obj);\n}\n\n// \ud83d\udcc1 main.js\nlet obj = {/* ... \uac1d\uccb4 ... */};\nlet result1 = process(obj);\nlet result2 = process(obj);\n\n// \uac1d\uccb4\uac00 \uc4f8\ubaa8\uc5c6\uc5b4\uc9c0\uba74 \uc544\ub798\uc640 \uac19\uc774 null\ub85c \ub36e\uc5b4\uc501\ub2c8\ub2e4.\nobj = null;\n\n\n\n\nDate\n\n\nUTC \uae30\uc900(UTC+0) 1970\ub144 1\uc6d4 1\uc77c 0\uc2dc 0\ubd84 0\ucd08\uc5d0\uc11c milliseconds \ud6c4\uc758 \uc2dc\uac04\uac12\uc744 \uc800\uc7a5\ud558\ub294 object\n\n\n\n\nnew Date(milliseconds)\n\n\nnew Date(datestring)\n\n\nnew Date(year, month, date, hours, minutes, seconds, ms)\n\n\ngetFullYear()\n, \ngetMonth()\n, \ngetDate()\n, \ngetHours()\n, \ngetMinutes()\n, \ngetSeconds()\n, \ngetMilliseconds()\n\n\ngetDay()\n: \uc694\uc77c\n\n\ngetUTCFullYear()\n, \ngetUTCMonth()\n, \ngetUTCDay()\n: UTC timezone\n\n\ngetTime()\n: returns timestamp\n\n\ngetTimezoneOffset()\n: offset from UTC basetime\n\n\nsetFullYear(year, [month], [date])\n\n\nsetMonth(month, [date])\n\n\nsetDate(date)\n\n\nsetHours(hour, [min], [sec], [ms])\n\n\nsetMinutes(min, [sec], [ms])\n\n\nsetSeconds(sec, [ms])\n\n\nsetMilliseconds(ms)\n\n\nsetTime(milliseconds)\n\n\n\n\nlet date = new Date(\"2017-01-26\");\nlet now = new Date();\nalert( now ); // \ud604\uc7ac \ub0a0\uc9dc \ubc0f \uc2dc\uac04\uc774 \ucd9c\ub825\ub428\nlet timestamp = Date.now() // current timestamp\n\n\n\n\nAutocorrection\n\n\nlet date = new Date(2013, 0, 32); // 2013\ub144 1\uc6d4 32\uc77c\nalert(date); // 2013\ub144 2\uc6d4 1\uc77c\nalert(+date); // \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658 (timestamp)\n\n\n\n\nBenchmarking Test\n\n\nfunction diffGetTime(date1, date2) {\n  return date2.getTime() - date1.getTime();\n}\n\n\n\n\nDate.parse\n\n\nYYYY-MM-DDTHH:mm:ss.sssZ+-hh:mm\n \ud615\uc2dd\uc758 \ubb38\uc790\ub97c parsing\ud558\uc5ec Data object\ub85c \ubc18\ud658\n\n\nlet ms = Date.parse('2012-01-26T13:51:50.417-07:00');\n\n\n\n\nJSON (JavaScript Object Notation) Serialization\n\n\n\n\njavascript\uc758 object\uc758 serialization \uae30\uc220\ub85c RFC4627\ub85c \ud45c\uc900\ud654\n\n\nJSON.stringify\n: It serializes an object to a JSON-encoded string.\n\n\nJSON.parse\n: It de-serializes an object from a JSON-encoded string.\n\n\n\ud45c\ud604 \uc790\ub8cc\ud615: \nobject\n, \narray\n, \nstring\n, \nnumber\n, \nboolean\n, \nnull\n\n\n\uc774\uc678 \uc790\ub8cc\ud615\uc740 \ubaa8\ub450 ignored\n\n\n\uc21c\ud658 \ucc38\uc870 object\uac00 \uc788\uc744 \uacbd\uc6b0 error\n\n\n\n\nlet student = {\n  name: 'John',\n  age: 30,\n  isAdmin: false,\n  courses: ['html', 'css', 'js'],\n  wife: null\n};\nlet json = JSON.stringify(student);\nalert(typeof json); // string\nalert(json); // {\"name\":\"John\",\"age\":30,\"isAdmin\":false,\"courses\":[\"html\",\"css\",\"js\"],\"wife\":null}\nalart(JSON.stringify(json));\n\n// \uc21c\ud658 \ucc38\uc870\uc2dc error\nlet room = {\n  number: 23\n};\nlet meetup = {\n  title: \"Conference\",\n  participants: [\"john\", \"ann\"]\n};\nmeetup.place = room;       // meetup\uc740 room\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4.\nroom.occupiedBy = meetup; // room\uc740 meetup\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4.\nJSON.stringify(meetup); // Error: Converting circular structure to JSON\n\n// \uc6d0\ud558\ub294 \uac12\ub9cc \ucd94\ucd9c\n// let json = JSON.stringify(value[, replacer, space])\nlet room = {\n  number: 23\n};\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room // meetup references room\n};\nroom.occupiedBy = meetup; // room references meetup\nalert( JSON.stringify(meetup, ['title', 'participants', 'place', 'name', 'number']) ); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}}\n\n// replacer \uc0ac\uc6a9\nalert( JSON.stringify(meetup, function replacer(key, value) {\n  return (key == 'occupiedBy') ? undefined : value;\n})); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}}\n\n// reviver \uc0ac\uc6a9\nlet str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}';\nlet meetup = JSON.parse(str);\nalert( meetup.date.getDate() ); // \uc5d0\ub7ec!\nmeetup = JSON.parse(str, function(key, value) {\n  if (key == 'date') return new Date(value);\n  return value;\n});\nalert( meetup.date.getDate() ); // 30\n\n\n\n\ntoJSON()\n for customized serialization\n\n\nlet room = {\n  number: 23,\n  toJSON() {\n    return this.number;\n  }\n};\nlet meetup = {\n  title: \"Conference\",\n  room\n};\nalert( JSON.stringify(room) ); // 23\nalert( JSON.stringify(meetup) ); // {\"title\":\"Conference\",\"room\":23}\n\n\n\n\ntypeof\n\n\n\n\ntypeof X\n \uc5f0\uc0b0\uc790\ub294 \uc778\uc218\uc758 \uc790\ub8cc\ud615\uc744 \ubb38\uc790\uc5f4\ub85c \ubc18\ud658\n\n\n\uc790\ub8cc\ud615\uc5d0 \ub530\ub77c \ucc98\ub9ac \ubc29\uc2dd\uc744 \ub2e4\ub974\uac8c \ud560 \uacbd\uc6b0 \uc0ac\uc6a9\n\n\n\ubcc0\uc218\uc758 \uc790\ub8cc\ud615 \ud655\uc778\uc5d0 \uc0ac\uc6a9\n\n\n\uc5f0\uc0b0\uc790\ud615 \uc0ac\uc6a9: \ntypeof x\n\n\n\ud568\uc218\ud615 \uc0ac\uc6a9: \ntypeof(x)\n\n\n\n\ntypeof undefined // \"undefined\"\ntypeof 0 // \"number\"\ntypeof 10n // \"bigint\"\ntypeof true // \"boolean\"\ntypeof \"foo\" // \"string\"\ntypeof Symbol(\"id\") // \"symbol\"\ntypeof Math // \"object\"  (1)\ntypeof null // \"object\"  (2)\ntypeof alert // \"function\"  (3)\n\n\n\n\nBrowser functions\n\n\n\n\nalart\n: \uba54\uc2dc\uc9c0\uac00 \uc788\ub294 \uc791\uc740 \ucc3d, \ubaa8\ub2ec \ucc3d(modal window)\uc744 \ub744\uc6c0\n\n\nprompt\n: \uba54\uc2dc\uc9c0\uc640 \uc785\ub825 \ud544\ub4dc(input field), \ud655\uc778(OK) \ubc0f \ucde8\uc18c(Cancel) \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0\n\n\nconfirm\n: \uc9c8\ubb38\uacfc \ud655\uc778 \ubc0f \ucde8\uc18c \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0\n\n\n\n\nlet age = prompt('\ub098\uc774\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.', 100);\nalert(`\ub2f9\uc2e0\uc758 \ub098\uc774\ub294 ${age}\uc0b4 \uc785\ub2c8\ub2e4.`);\n\nlet isBoss = confirm(\"\ub2f9\uc2e0\uc774 \uc8fc\uc778\uc778\uac00\uc694?\");\nalert( isBoss );\n\n\n\n\n\ud615\ubcc0\ud658 (type conversion)\n\n\n// \ubb38\uc790\uc5f4 \ubcc0\ud658\nlet value = true; // boolean\ud615\nvalue = String(value); // \ubcc0\uc218 value\uc5d4 \ubb38\uc790\uc5f4 \"true\"\uac00 \uc800\uc7a5\nalert(typeof value); // string\n\n// \uc22b\uc790\ub85c \ubcc0\ud658\nlet str = \"123\";\nlet num = Number(str); // \ubb38\uc790\uc5f4 \"123\"\uc774 \uc22b\uc790 123\uc73c\ub85c \uba85\uc2dc\uc801 \ubcc0\ud658\nalert(typeof num); // number\nalert( \"6\" / \"2\" ); // 3, \ubb38\uc790\uc5f4\uc774 \uc22b\uc790\ud615\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\ub41c \ud6c4 \uc5f0\uc0b0\uc774 \uc218\ud589\n\nlet age = Number(\"\uc784\uc758\uc758 \ubb38\uc790\uc5f4 123\");\nalert(age); // NaN, \ud615 \ubcc0\ud658 \uc2e4\ud328\nalert( Number(\"   123   \") ); // 123\nalert( Number(\"123z\") );      // NaN (\"z\"\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\ub294 \ub370 \uc2e4\ud328\ud568)\nalert( Number(true) );        // 1\nalert( Number(false) );       // 0\n\n// boolean\uc73c\ub85c \ubcc0\ud658\nalert( Boolean(1) ); // \uc22b\uc790 1(true)\nalert( Boolean(0) ); // \uc22b\uc790 0(false)\nalert( Boolean(\"hello\") ); // \ubb38\uc790\uc5f4(true)\nalert( Boolean(\"\") ); // \ube48 \ubb38\uc790\uc5f4(false)\nalert( Boolean(NaN) ); // false\nalert( Boolean(undefined) ); // false\nalert( Boolean(null) ); // false\n\n\n\n\n\uc5f0\uc0b0\uc790\n\n\n\n\n+\n: \ub367\uc148 \uc5f0\uc0b0\uc790\n\n\n-\n: \ube84\uc148 \uc5f0\uc0b0\uc790\n\n\n*\n: \uacf1\uc148 \uc5f0\uc0b0\uc790\n\n\n/\n: \ub098\ub217\uc148 \uc5f0\uc0b0\uc790\n\n\n%\n: \ub098\uba38\uc9c0 \uc5f0\uc0b0\uc790\n\n\n**\n: \uac70\ub4ed\uc81c\uacf1 \uc5f0\uc0b0\uc790\n\n\n&\n: AND \ube44\ud2b8 \uc5f0\uc0b0\uc790\n\n\n|\n OR \ube44\ud2b8 \uc5f0\uc0b0\uc790\n\n\n^\n XOR \ube44\ud2b8 \uc5f0\uc0b0\uc790\n\n\n~\n NOT \ube44\ud2b8 \uc5f0\uc0b0\uc790\n\n\n<<\n: LEFT SHIFT\n\n\n>>\n: RIGHT SHIFT\n\n\n>>>\n: ZERO-FILL RIGHT SHIFT\n\n\n||\n: OR \ub17c\ub9ac\uc5f0\uc0b0\uc790\n\n\n&&\n: AND \ub17c\ub9ac\uc5f0\uc0b0\uc790\n\n\n!\n: NOT \ub17c\ub9ac\uc5f0\uc0b0\uc790\n\n\n\n\n// \uc22b\uc790\nalert( 5 % 2 ); // 5\ub97c 2\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 1\uc744 \ucd9c\ub825\nalert( 8 % 3 ); // 8\uc744 3\uc73c\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 2\ub97c \ucd9c\ub825\nalert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)\nalert( 4 ** (1/2) ); // 2 (1/2 \uac70\ub4ed\uc81c\uacf1\uc740 \uc81c\uacf1\uadfc)\nalert( 8 ** (1/3) ); // 2 (1/3 \uac70\ub4ed\uc81c\uacf1\uc740 \uc138\uc81c\uacf1\uadfc)\n\n// \ubb38\uc790\uc5f4\nlet s = \"my\" + \"string\";\nalert(s); // mystring\nalert( 2 + '1' ); // \"21\"\nalert(2 + 2 + '1' ); // '221'\uc774 \uc544\ub2c8\ub77c '41'\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4.\nalert( 6 - '2' ); // 4, '2'\ub97c \uc22b\uc790\ub85c \ubc14\uafbc \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.\nalert( '6' / '2' ); // 3, \ub450 \ud53c\uc5f0\uc0b0\uc790\uac00 \uc22b\uc790\ub85c \ubc14\ub010 \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.\n// \uc22b\uc790\ud615\uc774 \uc544\ub2cc \ud53c\uc5f0\uc0b0\uc790\ub294 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud654\ud569\ub2c8\ub2e4.\nalert( +true ); // 1\nalert( +\"\" );   // 0\n\nlet apples = \"2\";\nlet oranges = \"3\";\nalert( apples + oranges ); // 23, \ubb38\uc790\uc5f4 + \uc5f0\uc0b0\nalert( +apples + +oranges ); // 5 \uc22b\uc790\ubcc0\ud658 -> \uc22b\uc790 + \uc5f0\uc0b0\n\n\n\n\n\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table\n\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\n\n\ud560\ub2f9 \uc5f0\uc0b0\uc790\n\n\nlet a = 1;\nlet b = 2;\nlet c = 3 - (a = b + 1); // a = 3, c = 0\n\nalert( a ); // 3\nalert( c ); // 0\n\na = b = c = 2 + 2;\n\nalert( a ); // 4\nalert( b ); // 4\nalert( c ); // 4\n\nlet n = 2;\nn += 5; // n = n + 5\nn *= 2; // n = n * 2\nalert( n ); // 14\nn *= 3 + 5; // n *= 8\n\nlet counter = 2;\ncounter++; // counter = counter + 1\ncounter--; // counter = counter - 1\n\ncounter = 1;\nlet a = ++counter;\nalert(a); // 2\n\ncounter = 1;\na = counter++;\nalert(a); // 1\n\n\n\n\n\n\uc27c\ud45c \uc5f0\uc0b0\uc790\n\n\n// \ud55c \uc904\uc5d0\uc11c \uc138 \uac1c\uc758 \uc5f0\uc0b0\uc774 \uc218\ud589\ub428\nfor (a = 1, b = 3, c = a * b; a < 10; a++) {\n ...\n}\n\n\n\n\n\ube44\uad50 \uc5f0\uc0b0\uc790\n\n\n\n\na \n>\n b\n\n\na \n<\n b\n\n\na \n>=\n b\n\n\na \n<=\n b\n\n\na \n==\n b\n\n\na \n!=\n b\n\n\n\n\nerror \ube44\uad50\n\n\nconst err = new Error('\ud83d\udca3\ufe0f Something went wrong');\nconsole.log(err instanceof Error); // \ud83d\udc49\ufe0f true\n\n\n\n\n\ubb38\uc790\uc5f4 \ube44\uad50\n\n\n\uc790\ub9bf\uc218 \ubcc4\ub85c \uc0ac\uc804\uc21c\uc73c\ub85c \ube44\uad50; ascii\ub4f1\uc758 \ubb38\uc790 \uc21c\uc704\n\n\nalert( 'Z' > 'A' ); // true\nalert( 'Glow' > 'Glee' ); // true\nalert( 'Bee' > 'Be' ); // true\n\n\n\n\n\ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50\n\n\n\uc4f0\uc9c0 \uc54a\ub294\uac8c \uc88b\uc744 \ub4ef ..., \uba85\uc2dc\uc801\uc73c\ub85c \ubcc0\ud615\ud574 \uc0ac\uc6a9\ud558\uc2dc\ub77c.\n\n\n\uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) ===\n\n\n\uc790\ub8cc\ud615\uc758 \ub3d9\ub4f1 \uc5ec\ubd80\uae4c\uc9c0 \uac80\uc0ac; \ud53c\uc5f0\uc0b0\uc790 a\uc640 b\uc758 \ud615\uc774 \ub2e4\ub97c \uacbd\uc6b0 a === b\ub294 \uc989\uc2dc false\ub97c \ubc18\ud658\ud568\n\n\nnull\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30\n\n\nalert( null === undefined ); // false\nalert( null == undefined ); // true\n\nalert( undefined > 0 ); // false (1)\nalert( undefined < 0 ); // false (2)\nalert( undefined == 0 ); // false (3)\n\nalert( null > 0 );  // (1) false\nalert( null == 0 ); // (2) false\nalert( null >= 0 ); // (3) true\n\n\n\n\n\n\ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation\n\n\nbash\n \ub3d9\uc791\uacfc \ub3d9\uc77c\n\n\ntrue || alert(\"not printed\");\nfalse || alert(\"printed\");\n\n\n\n\nnullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) \n??\n\n\na ?? b\n\uc758 \ud3c9\uac00 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\na\uac00 \nnull\n\ub3c4 \uc544\ub2c8\uace0 \nundefined\n\ub3c4 \uc544\ub2c8\uba74 \na\n\n\uadf8 \uc678\uc758 \uacbd\uc6b0\ub294 \nb\n\n\nx = a ?? b // nullish \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5b4\uc4f8 \uc218 \uc788\uc74c.\nx = (a !== null && a !== undefined) ? a : b;\n\n// \uc0ac\uc6a9\uc608\nlet firstName = null;\nlet lastName = null;\nlet nickName = \"\ubc14\uc774\uc62c\ub81b\";\nalert(firstName ?? lastName ?? nickName ?? \"\uc775\uba85\uc758 \uc0ac\uc6a9\uc790\"); // \ubc14\uc774\uc62c\ub81b\n\n// '??'\uc640 '||'\uc758 \ucc28\uc774\nlet height = 0;\nalert(height || 100); // 100\nalert(height ?? 100); // 0\n\n\n\n\n\uc870\uac74\ubb38\n\n\n\n\nif\n, \nelse if\n and \nelse\n\n\n?\n\n\n\n\nlet year = prompt('ECMAScript-2015 \uba85\uc138\ub294 \uba87 \ub144\ub3c4\uc5d0 \ucd9c\ud310\ub418\uc5c8\uc744\uae4c\uc694?', '');\nif (year == 2015) {\n  alert( \"\uc815\ub2f5\uc785\ub2c8\ub2e4!\" );\n  alert( \"\uc544\uc8fc \ub611\ub611\ud558\uc2dc\ub124\uc694!\" );\n} else if (year > 2015) {\n  alert( '\uc22b\uc790\ub97c \uc880 \ub354 \ub0b4\ub824\ubcf4\uc138\uc694.' );\n} else {\n  alert( '\uc624\ub2f5\uc785\ub2c8\ub2e4!' );\n}\n\n// let result = condition ? value1 : value2;\nlet accessAllowed = (age > 18) ? true : false;\nlet message = (age < 3) ? '\uc544\uae30\uc57c \uc548\ub155?' :\n  (age < 18) ? '\uc548\ub155!' :\n  (age < 100) ? '\ud658\uc601\ud569\ub2c8\ub2e4!' :\n  '\ub098\uc774\uac00 \uc544\uc8fc \ub9ce\uc73c\uc2dc\uac70\ub098, \ub098\uc774\uac00 \uc544\ub2cc \uac12\uc744 \uc785\ub825 \ud558\uc168\uad70\uc694!';\n\n\n\n\n\n\ubc18\ubcf5\ubb38\n\n\n// while\nlet i = 0;\nwhile (i < 3) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n  alert( i );\n  i++;\n}\n\n// do while\nlet i = 0;\ndo {\n  alert( i );\n  i++;\n} while (i < 3);\n\n// for\nfor (let i = 0; i < 3; i++) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n  alert(i);\n}\n\n// break\nlet sum = 0;\nwhile (true) {\n  let value = +prompt(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694.\", '');\n  if (!value) break; // (*)\n  sum += value;\n}\nalert( '\ud569\uacc4: ' + sum );\n\n// object property \uc21c\ud68c\nfor (key in object) {\n  // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n}\n\n// for..of // array \uc21c\ud68c\nfor (let fruit of fruits) {\n}\n\n\n\n\nswitch/case\ubb38\n\n\nswitch/case\ubb38\uc758 \uc778\uc218\uc5d4 \uc5b4\ub5a4 \ud45c\ud604\uc2dd\uc774\ub4e0 \uc62c \uc218 \uc788\uc74c\n\n\nlet a = 2 + 2;\nlet b = 0;\nswitch (a) {\n  case b + 1:\n    break;\n  case 3:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.' );\n    break;\n  case 4:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\uacfc \uc77c\uce58\ud569\ub2c8\ub2e4.' );\n    break;\n  case 5:\n  case 6:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4.' );\n    break;\n  default:\n    alert( \"\uc5b4\ub5a4 \uac12\uc778\uc9c0 \ud30c\uc545\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\" );\n}\n\n\n\n\nFunction\n\n\n\n\nlocal variable: \ud568\uc218 \ub0b4 \uc120\uc5b8\n\n\n\ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc73c\uba74 \uadf8 \uac12\uc740 \nundefined\n\n\n\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 \ud568\uc218\ub97c \ud2b9\ubcc4\ud55c \uc885\ub958\uc758 variable\ub85c \ucde8\uae09\n\n\nnested function \uac00\ub2a5\n\n\n\n\n// Function declaration\nlet userName = 'John'; // global variable\nfunction showMessage() {\n  let message = 'Hello, ' + userName; // local variable\n  alert(message);\n}\n\nshowMessage(); // Hello, John\n\n// Function arguments\nfunction showMessage(from, text) { // \uc778\uc218: from, text\n  alert(from + ': ' + text);\n}\nshowMessage(from, \"Hello\"); // *Ann*: Hello\nshowMessage(\"Ann\"); // Ann: undefined\n\n// Function arguments with default value\nfunction showMessage(from, text= \"no text given\") { // \uc778\uc218: from, text\n  alert(from + ': ' + text);\n}\nshowMessage(\"Ann\"); // Ann: undefined\n\n// Function return; return\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined\nfunction sum(a, b) {\n  return a + b;\n}\n\n// Function return \uc8fc\uc758 \uc0ac\ud56d\nfunction sum(a, b) {\n  return \n    a + b; // return\ud6c4 ; \uc790\ub3d9 \uc0bd\uc785\ub418\ubbc0\ub85c return\uc2dc \uac1c\ud589 \ud558\uc9c0 \uc54a\uae30\n}\n\n\n\n\nFunction Expression (\ud568\uc218 \ud45c\ud604\uc2dd)\n\n\nlet sayHi = function() {\n  alert( \"Hello\" );\n}; // \ud568\uc218 \ud45c\ud604\uc2dd\uc5d0\uc11c \uc138\ubbf8\ucf5c\ub860 \ud544\uc218\n\nalert( sayHi ); // \ud568\uc218 \ucf54\ub4dc \ucd9c\ub825\nalert( sayHi() ); // \ud568\uc218 \uc2e4\ud589!!\n\n\n\n\n\nArrow function (\ud654\uc0b4\ud45c \ud568\uc218)\n\n\n\n\n\ud568\uc218 \ucd95\uc57d (python lambda)\n\n\nthis\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc74c (\uc120\uc5b8\ub41c \uc0c1\uc704 object\uc758 this \uac00\uc838\ub2e4 \uc500)\n\n\narguments \uc5c6\uc74c\n\n\nnew\uc640 \ud568\uaed8 \ud638\ucd9c \ubd88\uac00\ub2a5\n\n\nsuper\ub3c4 \uc5c6\uc74c\n\n\n\uc790\uccb4 '\ucee8\ud14d\uc2a4\ud2b8\u2019\uac00 \uc5c6\ub294 \uc9e7\uc740 \ucf54\ub4dc\uc6a9\n\n\n\n\nlet func = (arg1, arg2, ...argN) => expression\n\n// e.g.\nlet sum = (a, b) => a + b;\nlet double = n => n * 2; // let double = function(n) { return n * 2 }\nlet sayHi = () => alert(\"\uc548\ub155\ud558\uc138\uc694!\");\n\nlet age = prompt(\"\ub098\uc774\ub97c \uc54c\ub824\uc8fc\uc138\uc694.\", 18);\nlet welcome = (age < 18) ?\n  () => alert('\uc548\ub155') :\n  () => alert(\"\uc548\ub155\ud558\uc138\uc694!\");\nwelcome();\n\n// example 1\nlet group = {\n  title: \"1\ubaa8\ub460\",\n  students: [\"\ubcf4\ub77c\", \"\ud638\uc9c4\", \"\uc9c0\ubbfc\"],\n\n  showList() {\n    this.students.forEach(\n      student => alert(this.title + ': ' + student)\n    );\n  }\n};\n\ngroup.showList();\n\n// example 2\nfunction defer(f, ms) {\n  return function() {\n    setTimeout(() => f.apply(this, arguments), ms)\n  };\n}\n\nfunction sayHi(who) {\n  alert('\uc548\ub155, ' + who);\n}\n\nlet sayHiDeferred = defer(sayHi, 2000);\nsayHiDeferred(\"\ucca0\uc218\"); // 2\ucd08 \ud6c4 \"\uc548\ub155, \ucca0\uc218\"\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n\n\n\n\ndebugger\n\n\n\ucf54\ub4dc\uc5d0 \ndebugger\n \uc0bd\uc785\uc2dc breakpoint\uc640 \ub3d9\uc77c\ud55c \ub3d9\uc791\n\n\nfunction hello(name) {\n  let phrase = `Hello, ${name}!`;\n  debugger;  // <-- \uc5ec\uae30\uc11c \uc2e4\ud589\uc774 \uba48\ucda5\ub2c8\ub2e4.\n  say(phrase);\n}\n\n\n\n\nconsole.log\n\n\n// \ucf58\uc194\ucc3d\uc744 \uc5f4\uc5b4 \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uc138\uc694.\nfor (let i = 0; i < 5; i++) {\n  console.log(\"\uc22b\uc790\", i);\n}\n\n\n\n\nFunction property\n\n\n\n\nname\n\n\nlength\n: function parameter \uac2f\uc218\n\n\nfunction property \ucd94\uac00 \uac00\ub2a5\ud568\n\n\n\n\nfunction sayHi() {\n  alert(\"Hi\");\n}\nalert(sayHi.name); // sayHi\n\nfunction f(sayHi = function() {}) {\n  alert(sayHi.name); // sayHi (\uc774\ub984\uc774 \uc788\ub124\uc694!)\n}\nf();\n\n// property \ucd94\uac00\nfunction sayHi() {\n  alert(\"Hi\");\n  sayHi.counter++;\n}\nsayHi.counter = 0; // \ucd08\uae43\uac12\nsayHi(); // Hi\nsayHi(); // Hi\nalert( `\ud638\ucd9c \ud69f\uc218: ${sayHi.counter}\ud68c` ); // \ud638\ucd9c \ud69f\uc218: 2\ud68c\n\n\n\n\nvariable arguments\n\n\n...\n \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uc778\uc790\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ec\n\n\nfunction ask(question, ...handlers) {\n  let isYes = confirm(question);\n  for(let handler of handlers) {\n    if (handler.length == 0) {\n      if (isYes) handler();\n    } else {\n      handler(isYes);\n    }\n  }\n}\n\n\n\n\nInput argument spreading\n\n\n...\n\uc73c\ub85c array argument\ub97c \ud480\uc5b4 \uc785\ub825\ud560 \uc218 \uc788\uc74c\n\n\nlet arr1 = [1, -2, 3, 4];\nlet arr2 = [8, 3, -8, 1];\nalert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25\n\n\n\n\n\uc774\ub7ec\ud55c spreading \uae30\ubc95\uc740 array \uc120\uc5b8\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\uac00\ub2a5\n\n\nlet arr = [3, 5, 1];\nlet arr2 = [8, 9, 15];\nlet merged = [0, ...arr, 2, ...arr2];\nalert(merged); // 0,3,5,1,2,8,9,15 (0, arr, 2, arr2 \uc21c\uc11c\ub85c \ud569\uccd0\uc9d1\ub2c8\ub2e4.)\n\n\n\n\nClosure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815\n\n\n\n\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Closures\n\n\n\n\njavascript \ucf54\ub4dc \ube14\ub7ed \ub0b4\uc5d0\uc11c \ubcc0\uc218\uc640 \ud568\uc218\uc758 \uc720\ud6a8\ubc94\uc704\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc744 \uac00\uc9d0\n\n\n\n\njavascript\uc5d0\uc11c \ud568\uc218\ub294 \ucf54\ub4dc \ube14\ub85d\uc744 \uac00\uc9c0\uba70, \ub3d9\uc791\uc744 \uc218\ud589\ud558\ub294 \ud2b9\uc218\ud55c \ubcc0\uc218\n\n\n\ud568\uc218, \ucf54\ub4dc\ube14\ub85d, \uac1d\uccb4, \uc2a4\ud06c\ub9bd\ud2b8\ub4e4\uc740 \uac01\uc790 Lexical Environment\ub77c\ub294 \ub0b4\ubd80 \uac1d\uccb4\ub97c \uac00\uc9d0\n\n\njavascript\ub294 \uc120\uc5b8\ub41c \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc774 Lexical Env\uc5d0 property\ub85c \uc800\uc7a5\n\n\n\n\nfunction init() {\n  var name = \"Mozilla\"; // name\uc740 init\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c \uc9c0\uc5ed \ubcc0\uc218\uc774\ub2e4.\n  function displayName() { // displayName() \uc740 \ub0b4\ubd80 \ud568\uc218\uc774\uba70, \ud074\ub85c\uc800\ub2e4.\n    alert(name); // \ubd80\ubaa8 \ud568\uc218\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n  }\n  displayName();\n}\ninit();\n\n\n\n\n\n\n\uac01 Lexical Env\ub294 \uc678\ubd80 (\uc0c1\uc704) Lexical Env\uc5d0 \ub300\ud55c reference\ub97c \uac00\uc9d0 (e.g. \uc704 \ndisplayName()\n\uc758 \uc678\ubd80 Lexical Env\ub294 \ninit()\n)\n\n\n\uc704\uc5d0\uc11c displayName()\uacfc \uac19\uc774 \ub9ac\ud134\ub418\ub294 \ud568\uc218\ub97c \nclosure\n\ub77c \ud558\uba70, \n\n\nclosure\n\ub294 \ubaa8\ud568\uc218 init()\uc758 Lexical Env\ub97c \ucc38\uc870\ud560 \uc218 \uc788\uc74c.\n\n\nclosure\n\ub97c \uc0ac\uc6a9\ud574 javascript\uc5d0\uc11c\ub294 private method\ub97c \uad6c\ud604\ud568\n\n\n\n\n\uc544\ub798 \ucf54\ub4dc\ub294 \ud504\ub77c\uc774\ube57 \ud568\uc218\uc640 \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\ub294 \ud37c\ube14\ub9ad \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uc774\ub807\uac8c \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \n\ubaa8\ub4c8 \ud328\ud134\n\uc774\ub77c \ud55c\ub2e4.\n\n\nvar counter = (function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  };\n})();\n\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1\n\n\n\n\nnew Function\n\n\n\n\nnew\n\ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \uc0dd\uc131\n\n\n\ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub294 string\uc73c\ub85c \ud45c\ud604\ub41c \uc790\uc2e0\uc758 \ucf54\ub4dc \uc2e4\ud589\ud558\ub294 expr\n\n\n\uc0ac\uc6a9\uc608) \uc678\ubd80\uc5d0\uc11c \uc218\uc2e0\ud55c string function\uc758 \uc2e4\ud589\n\n\n\n\nlet sum = new Function('a', 'b', 'return a + b');\nalert( sum(1, 2) ); // 3\n\nlet sayHi = new Function('alert(\"Hello\")');\nsayHi(); // Hello\n\n\n\n\nTime scheduling - \nsetTimeout\n, \nsetInterval\n\n\n// \uc124\uc815\nlet timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\nlet timerId = setInterval(func|code, [interval], [arg1], [arg2], ...)\n\n// \ucde8\uc18c\nclearTimeout(timerId);\n\n\n\n\nsetTimeout\n\uc758 delay\uac00 0\uc77c \uacbd\uc6b0, \ucd5c\ub300\ud55c \ube68\ub9ac ..\n\n\nTesting - Mocha\n\n\nBDD (Behavior Driven Development)\ub294 \ud14c\uc2a4\ud2b8(test), \ubb38\uc11c(documentation), \uc608\uc2dc(example)\ub97c \ud55c\ub370 \ubaa8\uc544\ub193\uc740 \uac1c\ub150\n\n\nfunction pow(x, n) {\n    if (n < 0) return NaN;\n    if (Math.round(n) != n) return NaN;\n\n    let p = 1\n    for (let i = 0; i < n; i++) {\n        p = x * p ;\n    }\n    return p;\n}\n\n// ...\n\ndescribe(\"pow\", function() {\n  it(\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uc758 n \uc81c\uacf1\", function() {\n    assert.equal(pow(2, 3), 8);\n  });\n});\n\n// nested testing\ndescribe(\"pow.2\", function () {\n  describe(\"case 1\", function () {\n    before(() => console.log(\"testing starts\"));\n    after(() => console.log(\"testing ends\"));\n\n    beforeEach(() => console.log(\"each starts\"));\n    afterEach(() => console.log(\"each ends\"));\n\n    it(\"10^10\", function () {\n        assert.equal(pow(10, 10), 10000000000);\n    });\n    it(\"10^5\", function () {\n        assert.equal(pow(10, 6), 1000000);\n    });\n  })\n})\n\n\n\n\nchai (assertion logic)\n\n\n\n\nassert.equal(value1, value2) \u2013 value1\uacfc value2\uc758 \ub3d9\ub4f1\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 == value2).\n\n\nassert.strictEqual(value1, value2) \u2013 value1\uacfc value2\uc758 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 === value2).\n\n\nassert.notEqual, assert.notStrictEqual \u2013 \ube44 \ub3d9\ub4f1\uc131, \ube44 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\nassert.isTrue(value) \u2013 value\uac00 true\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === true).\n\n\nassert.isFalse(value) \u2013 value\uac00 false\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === false).\n\n\n\n\n\uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment)\n\n\n\n\n\uc6d0 \uc790\ub8cc\uc758 \uc694\uc18c\ub97c \ubd84\ud574, \ub2e4\ub978 \uad6c\uc870\ub85c \ubcc0\uacbd\ud558\uae30 \uc26c\uc6c0\n\n\nlet {prop : varName = default, ...rest} = object\n\n\nlet [item1 = default, item2, ...rest] = array\n\n\n...\n\ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30\n\n\n\n\n\ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9\n\n\n// \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 1)\nlet arr = [\"Bora\", \"Lee\"]\nlet [firstName, surname] = arr;\nalert(firstName); // Bora\nalert(surname);  // Lee\n\n// \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 2)\nlet [firstName, surname] = \"Bora Lee\".split(' ');\n\n// \uc694\uc18c \uc0dd\ub7b5\nlet [firstName, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nalert( title ); // Consul\n\n// iterable\ud55c \uc790\ub8cc\uad6c\uc870\ub294 \ubaa8\ub450 \uac00\ub2a5\nlet [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"]\nlet [one, two, three] = new Set([1, 2, 3]);\n\nlet user = {};\n[user.name, user.surname] = \"Bora Lee\".split(' ');\nalert(user.name); // Bora\n\nlet user = {\n  name: \"John\",\n  age: 30\n};\n// \uac1d\uccb4\uc758 \ud0a4\uc640 \uac12 \uc21c\ud68c\ud558\uae30\nfor (let [key, value] of Object.entries(user)) {\n  alert(`${key}:${value}`); // name:John, age:30\uc774 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\n}\n\n// map\uc5d0\uc11c\uc758 destructuring assignment\nlet user = new Map();\nuser.set(\"name\", \"John\");\nuser.set(\"age\", \"30\");\nfor (let [key, value] of user) {\n  alert(`${key}:${value}`); // name:John, then age:30\n}\n\n// destructuring assignment \uc0ac\uc6a9\ud55c \uad50\ud658\nlet guest = \"Jane\";\nlet admin = \"Pete\";\n// \ubcc0\uc218 guest\uc5d4 Pete, \ubcc0\uc218 admin\uc5d4 Jane\uc774 \uc800\uc7a5\ub418\ub3c4\ub85d \uac12\uc744 \uad50\ud658\ud568\n[guest, admin] = [admin, guest];\nalert(`${guest} ${admin}`); // Pete Jane(\uac12 \uad50\ud658\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc774\ub904\uc84c\uc2b5\ub2c8\ub2e4!)\n\n// '...'\ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30, rest\ub294 \ubc30\uc5f4\nlet [name1, name2, ...rest] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nalert(name1); // Julius\nalert(name2); // Caesar\nalert(rest[0]); // Consul\nalert(rest[1]); // of the Roman Republic\nalert(rest.length); // 2\n\n// \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined\nlet [firstName, surname] = [];\nalert(firstName); // undefined\nalert(surname); // undefined\n\n// default \uac12 \uc124\uc815\nlet [name = \"Guest\", surname = \"Anonymous\"] = [\"Julius\"];\nalert(name);    // Julius (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12)\nalert(surname); // Anonymous (\uae30\ubcf8\uac12)\n\n// name\uc758 prompt\ub9cc \uc2e4\ud589\ub428\nlet [surname = prompt('\uc131\uc744 \uc785\ub825\ud558\uc138\uc694.'), name = prompt('\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694.')] = [\"\uae40\"];\nalert(surname); // \uae40 (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12)\nalert(name);    // prompt\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12\n\n\n\n\n\uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9\n\n\n// \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\nlet {title, width, height} = options;\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n\n// let {...} \uc548\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uc5b4\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud568\nlet {height, width, title} = { title: \"Menu\", height: 200, width: 100 }\n\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n// { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 }\nlet {width: w, height: h, title} = options;\n// width -> w\n// height -> h\n// title -> title\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n\n// default \uc124\uc815\nlet options = {\n  title: \"Menu\"\n};\nlet {width = 100, height = 200, title} = options;\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n\n// { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } + default\nlet options = {\n  title: \"Menu\"\n};\nlet {width: w = 100, height: h = 200, title} = options;\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n\n// title\ub9cc \ubcc0\uc218\ub85c \ubf51\uc544\ub0b4\uae30\nlet { title } = options;\n\n// title = \uc774\ub984\uc774 title\uc778 \ud504\ub85c\ud37c\ud2f0\n// rest = \ub098\uba38\uc9c0 \ud504\ub85c\ud37c\ud2f0\ub4e4\nlet {title, ...rest} = options;\n// title\uc5d4 \"Menu\", rest\uc5d4 {height: 200, width: 100}\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4.\nalert(rest.height);  // 200\nalert(rest.width);   // 100\n\nlet title, width, height;\n{title, width, height} = {title: \"Menu\", width: 200, height: 100}; // SyntaxError: Unexpected token '=' \uc774\ub77c\ub294 \uc5d0\ub7ec\uac00 \uc544\ub7ab\uc904\uc5d0\uc11c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.\n({title, width, height} = {title: \"Menu\", width: 200, height: 100}); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring)\n\n\nlet options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true\n};\n\n// \ucf54\ub4dc\ub97c \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0 \uc791\uc131\ud574 \uc758\ub3c4\ud558\ub294 \ubc14\ub97c \uba85\ud655\ud788 \ub4dc\ub7ec\ub0c4\nlet {\n  size: { // size\ub294 \uc5ec\uae30,\n    width,\n    height\n  },\n  items: [item1, item2], // items\ub294 \uc5ec\uae30\uc5d0 \ud560\ub2f9\ud568\n  title = \"Menu\" // \ubd84\ud574\ud558\ub824\ub294 \uac1d\uccb4\uc5d0 title \ud504\ub85c\ud37c\ud2f0\uac00 \uc5c6\uc73c\ubbc0\ub85c \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud568\n} = options;\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\nalert(item1);  // Cake\nalert(item2);  // Donut\n\n\n\n\nfunction argument with destructuring assignment\n\n\nlet options = {\n  title: \"My menu\",\n  items: [\"Item1\", \"Item2\"]\n};\nfunction showMenu({\n  title = \"Untitled\",\n  width: w = 100,  // width\ub294 w\uc5d0,\n  height: h = 200, // height\ub294 h\uc5d0,\n  items: [item1, item2] // items\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub294 item1\uc5d0, \ub450 \ubc88\uc9f8 \uc694\uc18c\ub294 item2\uc5d0 \ud560\ub2f9\ud568\n}) {\n  alert( `${title} ${w} ${h}` ); // My Menu 100 200\n  alert( item1 ); // Item1\n  alert( item2 ); // Item2\n}\nshowMenu(options);\n\nshowMenu({}); // \ubaa8\ub4e0 \uc778\uc218\uc5d0 \uae30\ubcf8\uac12\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4.\nshowMenu(); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nfunction showMenu({ title = \"Menu\", width = 100, height = 200 } = {}) {\n  alert( `${title} ${width} ${height}` );\n}\nshowMenu(); // Menu 100 200 // \uc5d0\ub7ec \uc548\ub0a8\n\n\n\n\nPromise\n\n\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\n\n\n\n\n\nProducing code\uc640 Consuming code \uc0ac\uc774\uc758 \ube44\ub3d9\uae30\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uc7a5\uce58\n\n\n\ud504\ub77c\ubbf8\uc2a4\uac00 \ub300\uae30 \uc0c1\ud0dc\uc77c \ub54c, .then/catch/finally \ud578\ub4e4\ub7ec\ub294 \ud504\ub77c\ubbf8\uc2a4 \uc644\ub8cc\ub97c \ub300\uae30\n\n\n\ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ubbf8 \ucc98\ub9ac\uc0c1\ud0dc\ub77c\uba74 \ud578\ub4e4\ub7ec\uac00 \uc989\uac01 \uc2e4\ud589\n\n\n\n\n\n\n\n\n\ub0b4\ubd80\uc801\uc73c\ub85c \nstate\n, \nresult\n \uc815\ubcf4 \uc720\uc9c0\n\n\nexecutor \ud568\uc218\uc5d0\uc11c \nresolve(Object)\n \ud638\ucd9c\uc2dc \nstate\n => \nfulfiled\n\n\nexecutor \ud568\uc218\uc5d0\uc11c \nreject(Error)\n \ud638\ucd9c\uc2dc \nstate\n => \nrejected\n\n\n\ud55c\ubc88 \nresolve\n \ub610\ub294 \nreject\n \ud638\ucd9c\ub418\uba74, \uc7ac\uc2e4\ud589 X\n\n\n\n\nlet promise = new Promise(function(resolve, reject) {\n  // \ud504\ub77c\ubbf8\uc2a4\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uba74 executor \ud568\uc218\ub294 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\n  // 1\ucd08 \ub4a4\uc5d0 \uc77c\uc774 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\ub2e4\ub294 \uc2e0\ud638\uac00 \uc804\ub2ec\ub418\uba74\uc11c result\ub294 'done'\n  setTimeout(() => resolve(\"done\"), 1000);\n  // or\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});\n\n\n\n\n.then\n\n\nPromise\uac00 \uc644\ub8cc\ub418\uae38 \ub300\uae30\ud558\uace0 resolve, reject\ub97c \uc218\ud589\n\n\nlet promise = new Promise(function(resolve, reject) {\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});\n\n// reject \ud568\uc218\ub294 .then\uc758 \ub450 \ubc88\uc9f8 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.\npromise.then(\n  result => alert(result), // \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\n  error => alert(error) // 1\ucd08 \ud6c4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\"\ub97c \ucd9c\ub825\n);\n\n\n\n\n.catch\n\n\n.catch(f)\n\uacfc \n.then(null,f)\n \ub3d9\uc77c\ud55c \ub3d9\uc791\uc744 \uc218\ud589\ud558\uba70, \uc5d0\ub7ec\ub97c \ucc98\ub9ac\n\n\nlet promise = new Promise((resolve, reject) => {\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});\n\n// .catch(f)\ub294 promise.then(null, f)\uacfc \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4\npromise.catch(alert); // 1\ucd08 \ub4a4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\" \ucd9c\ub825\n\n\n\n\n.finally\n\n\n\uc5d0\ub7ec \uc720\ubb34\uc640 \uad00\uacc4\uc5c6\uc774 \uc2e4\ud589\ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589\n\n\nnew Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"\uacb0\uacfc\"), 2000)\n})\n  .finally(() => alert(\"\ud504\ub77c\ubbf8\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"))\n  .then(result => alert(result)); // <-- .then\uc5d0\uc11c result\ub97c \ub2e4\ub8f0 \uc218 \uc788\uc74c\n\n\n\n\nPromise chaining\n\n\nPromise chaining\uc774\ub780 promise \ub300\uae30\ud568\uc218\ub4e4\uc758 \uc5f0\uc1c4 \uc2e4\ud589\uc744 \uc758\ubbf8\ud55c\ub2e4.\n\uc544\ub798\uc640 \uac19\uc774 \ud578\ub4e4\ub7ec\ub97c \ub4f1\ub85d\ud588\uc744 \uacbd\uc6b0\uc5d0\ub9cc Promise \ub300\uae30\ud568\uc218\ub4e4\uc744 \uc5f0\uc18d\uc801 \uc2e4\ud589\ub428\n\n\nnew Promise(function(resolve, reject) {\n  setTimeout(() => resolve(1), 1000); // (*)\n}).then(function(result) { // (**)\n  alert(result); // 1\n  return result * 2;\n}).then(function(result) { // (***)\n  alert(result); // 2\n  return result * 2;\n}).then(function(result) {\n  alert(result); // 4\n  return result * 2;\n});\n\n\n\n\nPromise chaining\uc5d0\uc11c \uc2e0\uaddc promise\ub97c \ubc18\ud658\ud558\uc5ec chaining\ud560 \uc218 \uc788\uc74c.\n\n\nnew Promise(function(resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n}).then(function(result) {\n  alert(result); // 1\n  return new Promise((resolve, reject) => { // (*)\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n}).then(function(result) { // (**)\n  alert(result); // 2\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n}).then(function(result) {\n  alert(result); // 4\n});\n\n\n\n\nthenable\n\n\n.then\n\uc774\ub77c\ub294 \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\ub294 \ubaa8\ub450 thenable\uac1d\uccb4\ub77c\uace0 \ubd80\ub974\uba70, promise\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud568.\n\n\nclass Thenable {\n  constructor(num) {\n    this.num = num;\n  }\n  then(resolve, reject) {\n    alert(resolve); // function() { \ub124\uc774\ud2f0\ube0c \ucf54\ub4dc }\n    // 1\ucd08 \ud6c4 this.num*2\uc640 \ud568\uaed8 \uc774\ud589\ub428\n    setTimeout(() => resolve(this.num * 2), 1000); // (**)\n  }\n}\n\nnew Promise(resolve => resolve(1))\n  .then(result => {\n    return new Thenable(result); // (*)\n  })\n  .then(alert); // 1000\ubc00\ub9ac \ucd08 \ud6c4 2\ub97c \ubcf4\uc5ec\uc90c\n\n\n\n\nfetch\n\n\n\ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucd94\uac00 \uc815\ubcf4\ub97c \ubc1b\uc544\uc624\ub294 \ub3d9\uc791\uc744 \uc218\ud589\ud568; javascript \ub0b4\uc5d0\uc11c promise\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub3d9\uc791\ud568\n\n\n\n\nAJAX(Asynchronous JavaScript And XML)\n\n\nhttps://ko.javascript.info/fetch\n\n\n\n\nlet promise = fetch(url, [options]);\n\n\n\n\n\n\nurl \u2013 \uc811\uadfc\ud558\uace0\uc790 \ud558\ub294 URL\n\n\noptions \u2013 \uc120\ud0dd \ub9e4\uac1c\ubcc0\uc218, method\ub098 header \ub4f1\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc74c\n\n\n\n\nlet response = await fetch(url);\n\nif (response.ok) { // HTTP \uc0c1\ud0dc \ucf54\ub4dc\uac00 200~299\uc77c \uacbd\uc6b0\n  // \uc751\ub2f5 \ubaac\ubb38\uc744 \ubc1b\uc2b5\ub2c8\ub2e4(\uad00\ub828 \uba54\uc11c\ub4dc\ub294 \uc544\ub798\uc5d0\uc11c \uc124\uba85).\n  let json = await response.json();\n} else {\n  alert(\"HTTP-Error: \" + response.status);\n}\n\n\n\n\nThrow an error in promise\n\n\n// case 1) Throw an error\nnew Promise((resolve, reject) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 2) Throw an error\nnew Promise((resolve, reject) => {\n  reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"));\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 3) Throw an error\nnew Promise((resolve, reject) => {\n  resolve(\"ok\");\n}).then((result) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); // \ud504\ub77c\ubbf8\uc2a4\uac00 \uac70\ubd80\ub428\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 4)\n// \uc2e4\ud589 \uc21c\uc11c: catch -> then\nnew Promise((resolve, reject) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}).catch(function(error) {\n  alert(\"\uc5d0\ub7ec\uac00 \uc798 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\uc774 \uc774\uc5b4\uc9d1\ub2c8\ub2e4.\");\n}).then(() => alert(\"\ub2e4\uc74c \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub429\ub2c8\ub2e4.\"));\n\n\n\n\nMutilple promises\n\n\n\ub2e4\uc218\uc758 promise\uc5d0 \ub300\ud55c \ub2e8\uc77c handler \ucc98\ub9ac\n\n\nPromise.all([\n  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1\n  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2\n  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3\n]).then(alert); // \ud504\ub77c\ubbf8\uc2a4 \uc804\uccb4\uac00 \ucc98\ub9ac\ub418\uba74 1, 2, 3\uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. \uac01 \ud504\ub77c\ubbf8\uc2a4\ub294 \ubc30\uc5f4\uc744 \uad6c\uc131\ud558\ub294 \uc694\uc18c\uac00 \ub429\ub2c8\ub2e4.\n\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'https://api.github.com/users/jeresig'\n];\n\n// fetch\ub97c \uc0ac\uc6a9\ud574 url\uc744 \ud504\ub77c\ubbf8\uc2a4\ub85c \ub9e4\ud551\ud569\ub2c8\ub2e4.\nlet requests = urls.map(url => fetch(url));\n// Promise.all\uc740 \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4.\nPromise.all(requests)\n  .then(responses => responses.forEach(\n    response => alert(`${response.url}: ${response.status}`)\n  ));\n\n\n\n\n\n\nPromise.all\n: \uc5b4\ub290 \ud558\ub098\uc758 promise\uac00 \uac70\uc808\ub418\uba74, reject handler \uc218\ud589\n\n\nPromise.allSettled\n: \ubaa8\ub4e0 promise \ucc98\ub9ac \ub300\uae30, \uac01 promise \uc0c1\ud0dc \ubc18\ud658\n\n\n\uc751\ub2f5\uc774 \uc131\uacf5\ud560 \uacbd\uc6b0 \u2013 \n{status:\"fulfilled\", value:result}\n\n\n\uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \u2013 \n{status:\"rejected\", reason:error}\n\n\nPromise.race\n: \uac00\uc7a5 \uba3c\uc800 \ucc98\ub9ac\ub41c promise \uacb0\uacfc \ubc18\ud658\n\n\nPromise.resolve/reject\n: \ub9ce\uc774 \uc548\uc4f0\uc784\n\n\n\n\npromisify\n\n\nfunction promisify(f) {\n  return function (...args) { // \ub798\ud37c \ud568\uc218\ub97c \ubc18\ud658\ud568\n    return new Promise((resolve, reject) => {\n      function callback(err, result) { // f\uc5d0 \uc0ac\uc6a9\ud560 \ucee4\uc2a4\ud140 \ucf5c\ubc31\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      }\n\n      args.push(callback); // \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ucee4\uc2a4\ud140 \ucf5c\ubc31\uc744 \ud568\uc218 f\uc758 \uc778\uc218 \ub05d\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\n      f.call(this, ...args); // \uae30\uc874 \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\n    });\n  };\n};\n\nlet loadScriptPromise = promisify(loadScript);\nloadScriptPromise(...).then(...);\n\n\n\n\nMicrotask queue\n\n\njavascript\uc758 \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c internal work queue\ub85c \uc644\ub8cc\ub41c promise\uc758 handler\ub97c \ucc98\ub9ac\ud568\n\n\n\n\nFIFO, first-in-first-out\n\n\n\uc2e4\ud589\ub420 \uac83\uc774 \uc5c6\uc744 \ub300 task queue\uac00 \uc791\ub3d9\ub428\n\n\n\n\nAsync\n and \nAwait\n\n\nasync\n\uac00 \ud568\uc218 \uc55e\uc5d0 \ubd99\uc73c\uba74, \ud568\uc218\ub294 resolved promise\ub97c \ubc18\ud658\n\n\nasync function f() {\n  // return Promise.resolve(1);\uc640 \ub3d9\uc77c\ud55c \uacb0\uacfc\n  return 1;\n}\nf().then(alert); // 1\n\n\n\n\n\n\nawait\n\uc740 \nasync\n \ud568\uc218 \ub0b4\uc5d0\uc11c promise\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\ud55c\ub2e4.\n\n\nawait\n\uc740 \uc77c\ubc18\ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ubd88\uac00\n\n\npromise chaining \ub300\uccb4 \uc0ac\uc6a9\n\n\nawait\n\ub294 \nthenable\n \uac1d\uccb4\ub3c4 \uc218\uc2e0\n\n\nclass\uc5d0 \nawait\n \uc120\uc5b8 \uac00\ub2a5\n\n\n\n\nasync function f() {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\uc644\ub8cc!\"), 1000)\n  });\n  let result = await promise; // \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bc (*)\n  alert(result); // \"\uc644\ub8cc!\"\n}\nf();\n\n\n\n\n(async () => {\n  let response = await fetch('/article/promise-chaining/user.json');\n  let user = await response.json();\n  ...\n})();\n\n\n\n\n// .then \ub300\uc2e0 await \uc0ac\uc6a9\nasync function showAvatar() {\n  // JSON \uc77d\uae30\n  let response = await fetch('/article/promise-chaining/user.json');\n  let user = await response.json();\n\n  // github \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc77d\uae30\n  let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);\n  let githubUser = await githubResponse.json();\n\n  // \uc544\ubc14\ud0c0 \ubcf4\uc5ec\uc8fc\uae30\n  let img = document.createElement('img');\n  img.src = githubUser.avatar_url;\n  img.className = \"promise-avatar-example\";\n  document.body.append(img);\n\n  // 3\ucd08 \ub300\uae30\n  await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n  img.remove();\n  return githubUser;\n}\nshowAvatar();\n\n\n\n\nasync \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc\n\n\nclass Waiter {\n  async wait() {\n    return await Promise.resolve(1);\n  }\n}\nnew Waiter()\n  .wait()\n  .then(alert); // 1\n\n\n\n\nasync\n & \nawait\n error handling\n\n\n// case 1\nasync function f() {\n  await Promise.reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"));\n}\n// case 2\nasync function f() {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}\n\n// case 3 - try..catch\nasync function f() {\n  try {\n    let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url');\n    let user = await response.json();\n  } catch(err) {\n    // fetch\uc640 response.json\uc5d0\uc11c \ubc1c\ud589\ud55c \uc5d0\ub7ec \ubaa8\ub450\ub97c \uc5ec\uae30\uc11c \uc7a1\uc2b5\ub2c8\ub2e4.\n    alert(err);\n  }\n}\nf();\n\n// case 4\nasync function f() {\n  let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url');\n}\nf().catch(alert); // TypeError: failed to fetch // (*)\n\n// case 5 - await Promise.all\n// \ud504\ub77c\ubbf8\uc2a4 \ucc98\ub9ac \uacb0\uacfc\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4.\nlet results = await Promise.all([\n  fetch(url1),\n  fetch(url2),\n  ...\n]);\n\n\n\n\n\nFile Read/Write\n\n\nhttps://velog.io/@93jm/Node.js-File-System%EC%9D%98-%EC%82%AC%EC%9A%A9%EA%B3%BC-async-await-%EC%B2%98%EB%A6%AC\n\n\nDecorator (wrapping function)\n\n\nfunction slow(x) {\n  // CPU \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\uc774 \uc5ec\uae30\uc5d0 \uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n  alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`);\n  return x;\n}\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {    // cache\uc5d0 \ud574\ub2f9 \ud0a4\uac00 \uc788\uc73c\uba74\n      return cache.get(x); // \ub300\uc751\ud558\ub294 \uac12\uc744 cache\uc5d0\uc11c \uc77d\uc5b4\uc635\ub2c8\ub2e4.\n    }\n\n    // let result = func(x);  // \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d4 func\ub97c \ud638\ucd9c\ud558\uace0,\n\n    let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4.\n\n    cache.set(x, result);  // \uadf8 \uacb0\uacfc\ub97c \uce90\uc2f1(\uc800\uc7a5)\ud569\ub2c8\ub2e4.\n    return result;\n  };\n}\n\nslow = cachingDecorator(slow);\nalert( slow(1) ); // slow(1)\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\nalert( \"\ub2e4\uc2dc \ud638\ucd9c: \" + slow(1) ); // \ub3d9\uc77c\ud55c \uacb0\uacfc\n\n\n\n\n\uc704\uc5d0\uc11c \uad6c\ud604\ud55c \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\ub294 \nthis\n\uac00 \nundefined\n\uc774\uae30 \ub54c\ubb38\uc5d0 \uac1d\uccb4 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9\ud558\uae30\uc5d4 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4.\n\n\n\uac1d\uccb4\uc758 \ncall\n\ud568\uc218 \uc0ac\uc6a9\ud558\uae30\n\n\nfunction sayHi() {\n  alert(this.name);\n}\nlet user = { name: \"John\" };\nlet admin = { name: \"Admin\" };\n// call\uc744 \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uac1d\uccb4\uac00 'this'\uac00 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\nsayHi.call( user ); // this = John\nsayHi.call( admin ); // this = Admin\n\n\n\n\ndecorator \ub2e4\uc2dc \uc791\uc131\n\n\nlet worker = {\n  someMethod() {\n    return 1;\n  },\n\n  slow(x) {\n    alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`);\n    return x * this.someMethod(); // (*)\n  }\n};\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {\n      return cache.get(x);\n    }\n    let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4.\n    cache.set(x, result);\n    return result;\n  };\n}\n\nworker.slow = cachingDecorator(worker.slow); // \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9\nalert( worker.slow(2) ); // \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.\n\n\n\n\n\ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218\n\n\n\n\nfunc.call(context, ...args)\n // \uc804\uac1c \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud574 \uc778\uc218\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uacfc\n\n\nfunc.apply(context, args)\n   // call\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n\n\nfunc.bind(context)\n // context (\uac1d\uccb4)\ub97c func \ud568\uc218\uc640 \uc5f0\uacb0\ud568. func\uc758 this\uac00 context\uac00 \ub428\n\n\n\n\nobject property \uc18d\uc131 \uc124\uc815\n\n\nobject\uc758 property\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc218\uc815\uac00\ub2a5\ud568\n\n\n\n\nvalue\n\n\nwritable\n\n\nenumerable\n\n\nconfigurable\n\n\n\n\nlet user = {};\nObject.defineProperty(user, \"name\", {\n  value: \"John\"\n});\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": \"John\",\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n */\n\n// property write \uc18d\uc131 \ub044\uae30\nObject.defineProperty(user, \"name\", {\n  writable: false\n});\n\nuser.name = \"Pete\"; // Error: Cannot assign to read only property 'name'\n\n\n\n\ngetter, setter properties\n\n\nlet obj = {\n  get propName() {\n    // getter, obj.propName\uc744 \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\n  },\n\n  set propName(value) {\n    // setter, obj.propName = value\ub97c \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\n  }\n  // get, set \ub458\ub2e4 \uc815\uc758\ub418\uc5b4\uc57c \uc815\uc0c1 \ub3d9\uc791\n};\n\n// \uc608\uc81c\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n  set(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n});\n\nalert(user.fullName); // John Smith\nfor(let key in user) alert(key); // name, surname\n\n\n\n\nnodejs\n\n\nimport package\n\n\n\n\nrequire: CommonJS \ud0a4\uc6cc\ub4dc\n\n\nimport: ES6(ES2015) \ud0a4\uc6cc\ub4dc\n\n\n\n\nnodejs getting start\n\n\n\n\nhttps://www.nextree.co.kr/p8574/",
            "title": "Javascript"
        },
        {
            "location": "/javascript/#javascript",
            "text": "\uc774 \ubb38\uc11c\ub294 \uc544\ub798 javascript tutorial\uc744 \ubcf4\uace0 \uc815\ub9ac\ud55c \uac83\uc784  \ud83d\udcc1 https://ko.javascript.info   \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \uacf5\uc2dd\uc774\ub984?:  ECMAScript    Javascript  Javascript engine  Garbage Collection  javascript framework  Linter  JS \ubb38\uc11c\ud654  Polyfill  \ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654  Comment \uc8fc\uc11d  use strict  \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194  \uc804\uc5ed \uac1d\uccb4  Polyfill\uc758 \uad6c\ud604    \ubcc0\uc218\uc640 \uc0c1\uc218  \ubcc0\uc218 \uba85\uba85 \uaddc\uce59  \ud568\uc218\ud615 \uc5b8\uc5b4  \uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd    \uc790\ub8cc\ud615  \uc22b\uc790\ud615  isNaN, isFinite  parseInt, parseFloat  Math  \ubb38\uc790\ud615  boolean \ud615  null  \uac12  undefined  \uac12  object  const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5  \uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok  \ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658  object \ube44\uad50  \uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign  Methods and this  \uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function  \uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining)  ?. ,  ?.() ,  ?.[]  object \uc21c\ud68c \ud568\uc218  symbol  \uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive  iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator  Array  mapping function for array  sort  \ubb38\uc790\uc5f4 <==> \ubc30\uc5f4  reduce\uc640 reduceRight (\ub204\uc0b0\uae30)  \ubc30\uc5f4\uc778\uc9c0 \ud655\uc778  map  \uc81c\uacf5 \ud568\uc218  set  WeakMap  and  WeakSet  Date  Autocorrection  Benchmarking Test  Date.parse    JSON (JavaScript Object Notation) Serialization  toJSON()  for customized serialization    typeof  Browser functions  \ud615\ubcc0\ud658 (type conversion)  \uc5f0\uc0b0\uc790  \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table  \ud560\ub2f9 \uc5f0\uc0b0\uc790  \uc27c\ud45c \uc5f0\uc0b0\uc790    \ube44\uad50 \uc5f0\uc0b0\uc790  error \ube44\uad50  \ubb38\uc790\uc5f4 \ube44\uad50  \ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50  \uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) ===  null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30  \ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation  nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator)  ??    \uc870\uac74\ubb38  \ubc18\ubcf5\ubb38  switch/case\ubb38  Function  Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd)  Arrow function (\ud654\uc0b4\ud45c \ud568\uc218)  debugger  console.log  Function property  variable arguments  Input argument spreading  Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815  new Function    Time scheduling -  setTimeout ,  setInterval  Testing - Mocha  chai (assertion logic)    \uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment)  \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9  \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9  \uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring)  function argument with destructuring assignment    Promise  .then  .catch  .finally  Promise chaining  thenable  fetch  Throw an error in promise  Mutilple promises  promisify  Microtask queue    Async  and  Await  async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc  async  &  await  error handling    File Read/Write  Decorator (wrapping function)  \uac1d\uccb4\uc758  call \ud568\uc218 \uc0ac\uc6a9\ud558\uae30    \ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218  object property \uc18d\uc131 \uc124\uc815  getter, setter properties  nodejs  import package  nodejs getting start",
            "title": "Javascript"
        },
        {
            "location": "/javascript/#javascript-engine",
            "text": "V8  Firefox ?",
            "title": "Javascript engine"
        },
        {
            "location": "/javascript/#garbage-collection",
            "text": "reachability \ub3c4\ub2ec \uac00\ub2a5\uc131\uc774 \uc5c6\ub294 \ubcc0\uc218\ub294 \uc0ad\uc81c  mark-and-sweep  generational collection: \uc624\ub79c\uc2dc\uac04 \ub0a8\uc740 \uac1c\uccb4 \ub35c \uac10\uc2dc  incremental collection: \ud655\uc778 \uac1c\uccb4 grouping\ud558\uace0 \ubd84\uc0b0 \ucc98\ub9ac  idle-time collection: \uc720\ud734 \uc2dc\uac04 \uc2e4\ud589",
            "title": "Garbage Collection"
        },
        {
            "location": "/javascript/#javascript-framework",
            "text": "jQuery  Lodash",
            "title": "javascript framework"
        },
        {
            "location": "/javascript/#linter",
            "text": "JSLint  \u2013 \uc5ed\uc0ac\uac00 \uc624\ub798\ub41c linter  JSHint  \u2013 JSLint\ubcf4\ub2e4 \uc138\ud305\uc774 \uc880 \ub354 \uc720\uc5f0\ud55c linter  ESLint  \u2013 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ub098\uc628 linter,  npm install -g eslint",
            "title": "Linter"
        },
        {
            "location": "/javascript/#js",
            "text": "JSDoc : http://usejsdoc.org/   /**\n * x\ub97c n\ubc88 \uacf1\ud55c \uc218\ub97c \ubc18\ud658\ud568\n *\n * @param {number} x \uac70\ub4ed\uc81c\uacf1\ud560 \uc22b\uc790\n * @param {number} n \uacf1\ud560 \ud69f\uc218, \ubc18\ub4dc\uc2dc \uc790\uc5f0\uc218\uc5ec\uc57c \ud568\n * @return {number} x\uc758 n \uac70\ub4ed\uc81c\uacf1\uc744 \ubc18\ud658\ud568\n */\nfunction pow(x, n) {\n  ...\n}",
            "title": "JS \ubb38\uc11c\ud654"
        },
        {
            "location": "/javascript/#polyfill",
            "text": "\ud3f4\ub9ac\ud544(Polyfill)\uc774\ub780 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc9c0\uc6d0 \uac00\ub2a5\ud558\ub3c4\ub85d \ubcc0\ud658\ud55c \ucf54\ub4dc\n\ud558\uc704 \ube0c\ub77c\uc6b0\uc800\uac00 \uc9c0\uc6d0\ud558\ub294 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc758 \ucd5c\uc2e0 \uae30\ub2a5\uc744 \ub611\uac19\uc774 \uad6c\ud604\ud55c library?   \ud2b8\ub79c\uc2a4\ud30c\uc77c\ub7ec: \ubc14\ubca8\uc740 \uac1c\ubc1c\uc790\uc758 \ucef4\ud4e8\ud130\uc5d0\uc11c \ub3cc\uc544\uac00\ub294\ub370, \uc774\ub97c \uc2e4\ud589\ud558\uba74 \uae30\uc874 \ucf54\ub4dc\uac00 \uad6c \ud45c\uc900\uc744 \uc900\uc218\ud558\ub294 \ucf54\ub4dc\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc6f9\uc744 \ud1b5\ud574 load\ub428, \uc6f9\ud329(webpack)  \ud3f4\ub9ac\ud544: \uc0dd\ub7b5   \uc8fc\ubaa9\ud560 \ub9cc\ud55c \ud3f4\ub9ac\ud544 \ub450 \uac00\uc9c0\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.   core js  \u2013 \ub2e4\uc591\ud55c \ud3f4\ub9ac\ud544\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uae30\ub2a5\uc758 \ud3f4\ub9ac\ud544\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.  polyfill.io  \u2013 \uae30\ub2a5\uc774\ub098 \uc0ac\uc6a9\uc790\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0 \ub530\ub77c \ud3f4\ub9ac\ud544 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud574\uc8fc\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4.  Babel",
            "title": "Polyfill"
        },
        {
            "location": "/javascript/#_1",
            "text": "Mocha : describe, it\uacfc \uac19\uc740 \ud14c\uc2a4\ud305 \ud568\uc218\uc640 \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uad00\ub828 \uc8fc\uc694 \ud568\uc218\ub97c \uc81c\uacf5, https://mochajs.org/  Chai  \u2013 \ub2e4\uc591\ud55c assertion\uc744 \uc81c\uacf5\ud574 \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac  Sinon  \u2013 \ud568\uc218\uc758 \uc815\ubcf4\ub97c \uce90\ub0b4\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c, \ub0b4\uc7a5 \ud568\uc218 \ub4f1\uc744 \ubaa8\ubc29   FIXME: https://ko.javascript.info/testing-mocha",
            "title": "\ud14c\uc2a4\ud2b8 \uc790\ub3d9\ud654"
        },
        {
            "location": "/javascript/#comment",
            "text": "// ,  /* */",
            "title": "Comment \uc8fc\uc11d"
        },
        {
            "location": "/javascript/#use-strict",
            "text": "ECMAScript5(ES5)  \uae30\ubcf8 \ubb38\ubc95 \uc77c\ubd80    \"use strict\"\n// ES5 \ubaa8\ub4dc\ub85c \ub3d9\uc791",
            "title": "use strict"
        },
        {
            "location": "/javascript/#_2",
            "text": "\uac1c\ubc1c\ud55c \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud574 \ube0c\ub77c\uc6b0\uc800 \ucf58\uc194\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \uae30\ubcf8\uc801\uc73c\ub85c use strict\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c",
            "title": "\ube0c\ub77c\uc6b0\uc800 \ucf58\uc194"
        },
        {
            "location": "/javascript/#_3",
            "text": "\ube0c\ub77c\uc6b0\uc800 \ud658\uacbd\uc5d0\uc120 \uc804\uc5ed \uac1d\uccb4\ub97c  window , Node.js \ud658\uacbd\uc5d0\uc120  global  ( globalThis )  var gVar = 5;\n// var\ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub294 \uc804\uc5ed \uac1d\uccb4 property)\nalert(window.gVar); // 5",
            "title": "\uc804\uc5ed \uac1d\uccb4"
        },
        {
            "location": "/javascript/#polyfill_1",
            "text": "if (!window.Promise) {\n  alert(\"\uad6c\uc2dd \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9 \uc911\uc774\uc2dc\uad70\uc694!\");\n}\nif (!window.Promise) {\n  window.Promise = ... // \ubaa8\ub358 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uad6c\ud604\ud568\n}",
            "title": "Polyfill\uc758 \uad6c\ud604"
        },
        {
            "location": "/javascript/#_4",
            "text": "javascript primitive variables: \ubb38\uc790(string), \uc22b\uc790(number), bigint, \ubd88\ub9b0(boolean), \uc2ec\ubcfc(symbol), null, undefined\ud615  javascript\uc758 \ubcc0\uc218\ub294 \uac12 \uc218\uc815\uc774 \uc544\ub2c8\ub77c \uad50\uccb4\ub418\ub294 \uac1c\ub150   let message;\n\nmessage = 'Hello'; // \ubb38\uc790\uc5f4\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\nalert(message); // \ubcc0\uc218\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n// \uc120\uc5b8 \ubc29\ubc95\nlet user = 'John', age = 25, message = 'Hello';\n\nlet user = 'John';\nlet age = 25;\nlet message = 'Hello';\n\nlet user = 'John',\n  age = 25,\n  message = 'Hello';\n\n// var\ub294 let\uacfc \uac70\uc758 \ub3d9\uc77c\ud558\ub098, local\uc5d0\uc11c \uc120\uc5b8\ud558\ub354\ub77c\ub3c4 global\nvar message = 'Hello';\n\n// \uc0c1\uc218 \uc120\uc5b8; \ud55c\ubc88 \ud560\ub2f9\ub418\uba74 \ubcc0\uacbd \ubd88\uac00\nconst myBirthday = '18.04.1982';\nmyBirthday = '01.01.2001'; // error, can't reassign the constant!\n\n// \ub300\ubb38\uc790 \uc0c1\uc218 (\uc77c\ubc18\uc801 \uad00\uc2b5)\nconst COLOR_RED = \"#F00\";\nconst COLOR_GREEN = \"#0F0\";\n\n// \uc0c1\uc218 \uc0ac\uc6a9\nlet color = COLOR_ORANGE;\nalert(color); // #FF7F00\n\n// \uc544\ub798 \uc0c1\uc218\ub294 \uac12 \ud560\ub2f9 \uc804\uc774\ubbc0\ub85c \uc774\ud6c4 \ud560\ub2f9 \uac00\ub2a5\n// \ud560\ub2f9\ud6c4\uc5d0\ub294 \ubcc0\uacbd \ubd88\uac00\nconst pageLoadTime = ;",
            "title": "\ubcc0\uc218\uc640 \uc0c1\uc218"
        },
        {
            "location": "/javascript/#_5",
            "text": "\ubb38\uc790 \uc640  \uc22b\uc790 , \uadf8\ub9ac\uace0 \uae30\ud638  $ \uc640  _  \uc0ac\uc6a9  \uce74\uba5c \ud45c\uae30\ubc95(camelCase) \uc8fc\ub85c \uc0ac\uc6a9  \uc608\uc57d\uc5b4(reserved name) \uc0ac\uc6a9 X  \uccab\ub2e8\uc5b4  \uc22b\uc790  X  \ub300\uc18c\ubb38\uc790 \uad6c\ubcc4",
            "title": "\ubcc0\uc218 \uba85\uba85 \uaddc\uce59"
        },
        {
            "location": "/javascript/#_6",
            "text": "\ud568\uc218\ud615(functional) \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \ubcc0\uc22b\uac12 \ubcc0\uacbd\uc744 \uae08\uc9c0  e.g. \uc2a4\uce7c\ub77c(Scala)\uc640 \uc5bc\ub7ad(Erlang)  \ubcd1\ub82c \uacc4\uc0b0(parallel computation)\uc5d0 \uc720\uc6a9",
            "title": "\ud568\uc218\ud615 \uc5b8\uc5b4"
        },
        {
            "location": "/javascript/#_7",
            "text": "\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd(immediately-invoked function expressions): \uc120\uc5b8\uacfc \ud568\uaed8 \ud568\uc218 \uc2e4\ud589  // IIFE\ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95\n\n(function() {\n  alert(\"\ud568\uc218\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\");\n})();\n\n(function() {\n  alert(\"\uc804\uccb4\ub97c \uad04\ud638\ub85c \ub458\ub7ec\uc2f8\uae30\");\n}());\n\n!function() {\n  alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\");\n}();\n\n+function() {\n  alert(\"\ud45c\ud604\uc2dd \uc55e\uc5d0 \ub2e8\ud56d \ub367\uc148 \uc5f0\uc0b0\uc790 \ubd99\uc774\uae30\");\n}();",
            "title": "\uc989\uc2dc \uc2e4\ud589 \ud568\uc218 \ud45c\ud604\uc2dd"
        },
        {
            "location": "/javascript/#_8",
            "text": "",
            "title": "\uc790\ub8cc\ud615"
        },
        {
            "location": "/javascript/#_9",
            "text": "\uc22b\uc790\ud615 \ubc94\uc704:  (2^53-1)  ~  -(2^53-1) ;  9007199254740991  BigInt : \ub05d\uc5d0  n \uc744 \ubd99\uc774\uba74  BigInt  Infinity  : \ubb34\ud55c\ub300,  1/0  \ub85c\ub3c4 \uad6c\ud574\uc9d0  -Infinity  NaN : \uacc4\uc0b0 \uc624\ub958, e.g.  \"STR\"/2 , \uc218\ub85c \ubb38\uc790\ub97c \ub098\ub20c \uacbd\uc6b0   let n = 123;\nn = 12.345;\n\n// \ub05d\uc5d0 'n'\uc774 \ubd99\uc73c\uba74 BigInt\ud615 \uc790\ub8cc\uc785\ub2c8\ub2e4.\nconst bigInt = 1234567890123456789012345678901234567890n;\n\nlet billion = 1000000000;\nlet billion = 1e9;  // 10\uc5b5, 1\uacfc 9\uac1c\uc758 0\nalert( 7.3e9 );  // 73\uc5b5 (7,300,000,000)\n1e3 = 1 * 1000\n1.23e6 = 1.23 * 1000000\nlet ms = 0.000001;\nlet ms = 1e-6; // 1\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c 6\ubc88 \uc18c\uc218\uc810 \uc774\ub3d9\n// 10\uc744 \uc138 \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214\n1e-3 = 1 / 1000 (=0.001)\n// 10\uc744 \uc5ec\uc12f \ubc88 \uac70\ub4ed\uc81c\uacf1\ud55c \uc218\ub85c \ub098\ub214\n1.23e-6 = 1.23 / 1000000 (=0.00000123)\n\n// 16, 8, 2\uc9c4\uc218\ud45c\ud604\nalert( 0xff ); // 255\nalert( 0xFF ); // 255 (\ub300\u00b7\uc18c\ubb38\uc790\ub97c \uac00\ub9ac\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ub458 \ub2e4 \uac19\uc740 \uac12\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.)\nlet a = 0b11111111; // 255\uc758 2\uc9c4\uc218\nlet b = 0o377; // 255\uc758 8\uc9c4\uc218\nalert( a == b ); // true, \uc9c4\ubc95\uc740 \ub2e4\ub974\uc9c0\ub9cc, a\uc640 b\ub294 \uac19\uc740 \uc218\uc784\nlet num = 255;\nalert( num.toString(16) );  // ff\nalert( num.toString(2) );   // 11111111\nalert( 123456..toString(36) ); // 2n9c // base36\n\n// Rounding \uc5b4\ub9bc\uc218\nMath.floor // \uc18c\uc218\uc810 \uccab\ubc88\uc9f8 \uc790\ub9ac \ubc84\ub9bc\nMath.ceil // \uc18c\uc218\uc810 \uc62c\ub9bc\nMath.round // \ubc18\uc62c\ub9bc\n// https://ko.javascript.info/number\n\n//  \uc22b\uc790\uac00 \ub108\ubb34 \ucee4\uc9c0\uba74 64\ube44\ud2b8 \uacf5\uac04\uc774 \ub118\uccd0\uc11c Infinity\nalert( 1e500 ); // Infinity\n// \uc815\ubc00\ub3c4 \uc190\uc2e4\nalert( 0.1 + 0.2 == 0.3 ); // false\n// \uc815\ubc00\ub3c4 \uc190\uc2e4 \ud655\uc778 toFixed(n), n\uc740 \uc18c\uc218\uc810 \uc790\ub9bf\uc218\uc5d0\uc11c \uc5b4\ub9bc\nalert( 0.1.toFixed(20) ); // 0.10000000000000000555\nlet sum = 0.1 + 0.2;\nalert( sum.toFixed(2) ); // 0.30",
            "title": "\uc22b\uc790\ud615"
        },
        {
            "location": "/javascript/#isnan-isfinite",
            "text": "// NaN\uc740 NaN \uc790\uae30 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uc5ec \uadf8 \uc5b4\ub5a4 \uac12\uacfc\ub3c4 \uac19\uc9c0 \uc54a\ub2e4\ub294 \uc810\uc5d0\uc11c \ub3c5\ud2b9\ud569\ub2c8\ub2e4.\nalert( NaN === NaN ); // false\n\nalert( isNaN(NaN) ); // true\nalert( isNaN(\"str\") ); // true\n\nalert( isFinite(\"15\") ); // true\nalert( isFinite(\"str\") ); // false, NaN\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\nalert( isFinite(Infinity) ); // false, Infinity\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.",
            "title": "isNaN, isFinite"
        },
        {
            "location": "/javascript/#parseint-parsefloat",
            "text": "alert( parseInt('100px') ); // 100\nalert( parseFloat('12.5em') ); // 12.5\nalert( parseInt('12.3') ); // 12, \uc815\uc218 \ubd80\ubd84\ub9cc \ubc18\ud658\ub429\ub2c8\ub2e4.\nalert( parseFloat('12.3.4') ); // 12.3, \ub450 \ubc88\uc9f8 \uc810\uc5d0\uc11c \uc22b\uc790 \uc77d\uae30\ub97c \uba48\ucda5\ub2c8\ub2e4.\nalert( parseInt('a123') ); // NaN, a\ub294 \uc22b\uc790\uac00 \uc544\ub2c8\ubbc0\ub85c \uc22b\uc790\ub97c \uc77d\ub294 \uac8c \uc911\uc9c0\ub429\ub2c8\ub2e4.\nalert( parseInt('0xff', 16) ); // 255\nalert( parseInt('ff', 16) ); // 255, 0x\uac00 \uc5c6\uc5b4\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4.\nalert( parseInt('2n9c', 36) ); // 123456",
            "title": "parseInt, parseFloat"
        },
        {
            "location": "/javascript/#math",
            "text": "alert( Math.random() ); // 0.1234567894322\nalert( Math.random() ); // 0.5435252343232\nalert( Math.random() ); // ... (\ubb34\uc791\uc704 \uc218)\nalert( Math.max(3, 5, -10, 0, 1) ); // 5\nalert( Math.min(1, 2) ); // 1\nalert( Math.pow(2, 10) ); // 2\uc758 10\uc81c\uacf1 = 1024\n\n// \ube44\ud2b8 NOT \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c \uae30\ubc95\nalert( ~2 ); // -3, -(2+1)\uacfc \uac19\uc74c\nalert( ~1 ); // -2, -(1+1)\uacfc \uac19\uc74c\nalert( ~0 ); // -1, -(0+1)\uacfc \uac19\uc74c\nalert( ~-1 ); // 0, -(-1+1)\uacfc \uac19\uc74c",
            "title": "Math"
        },
        {
            "location": "/javascript/#_10",
            "text": "character type \uc5c6\uc74c  \ud070\ub530\uc634\ud45c: \"Hello\"  \uc791\uc740\ub530\uc634\ud45c: 'Hello'  \uc5ed \ub530\uc634\ud45c(\ubc31\ud2f1, backtick):  Hello  \ubb38\uc790\uc5f4 \uae38\uc774: \ubb38\uc790\uc5f4.length  \ubb38\uc790 \uc218\uc815 X, \ubb38\uc790\uc5f4\ub85c\ub9cc \ucde8\uae09  \ubaa8\ub4e0 \ubb38\uc790\uc5f4\uc740 UTF-16\uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529   let str = \"Hello\";\nlet str2 = 'Single quotes are ok too';\nlet phrase = `can embed another ${str}`;\n\nlet name = \"John\";\n// backtick \uc0ac\uc6a9\uc2dc - \ubcc0\uc218\ub97c \ubb38\uc790\uc5f4 \uc911\uac04\uc5d0 \uc0bd\uc785\ud558\uac70\ub098 \uacc4\uc0b0 \uac00\ub2a5\nalert( `Hello, ${name}!` ); // Hello, John!\nalert( `the result is ${1 + 2}` ); // the result is 3\n\n// multi-lines\nlet guestList = `\uc190\ub2d8:\n * John\n * Pete\n * Mary\n`;\nlet guestList = \"\uc190\ub2d8:\\n * John\\n * Pete\\n * Mary\";\nalert( \"\\u00A9\" ); // \u00a9\nalert( \"\\u{20331}\" ); // \u4f6b, \uc911\uad6d\uc5b4(\uae34 \uc720\ub2c8\ucf54\ub4dc)\nalert( \"\\u{1F60D}\" ); // \ud83d\ude0d, \uc6c3\ub294 \uc5bc\uad74 \uae30\ud638(\uae34 \uc720\ub2c8\ucf54\ub4dc)\nalert( 'I\\'m the Walrus!' ); // I'm the Walrus!\n\n// \ubb38\uc790\uc5f4 \uae38\uc774\nalert( `My\\n`.length ); // 3\n\n// \ubb38\uc790 \uc811\uadfc\nlet str = `Hello`;\nalert( str[0] ); // H\nalert( str.charAt(0) ); // H\nalert( str[str.length - 1] ); // o; // \ub9c8\uc9c0\ub9c9 \uae00\uc790\n// \ub300\uc18c\ubb38\uc790\nalert( 'Interface'.toUpperCase() ); // INTERFACE\nalert( 'Interface'.toLowerCase() ); // interface\n\n// \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucc3e\uae30\nlet str = 'Widget with id';\nalert( str.indexOf('Widget') ); // 0, str\uc740 'Widget'\uc73c\ub85c \uc2dc\uc791\ud568\nalert( str.indexOf('widget') ); // -1, indexOf\ub294 \ub300\u00b7\uc18c\ubb38\uc790\ub97c \ub530\uc9c0\ubbc0\ub85c \uc6d0\ud558\ub294 \ubb38\uc790\uc5f4\uc744 \ucc3e\uc9c0 \ubabb\ud568\nalert( str.indexOf(\"id\") ); // 1, \"id\"\ub294 \uccab \ubc88\uc9f8 \uc704\uce58\uc5d0\uc11c \ubc1c\uacac\ub428 (Widget\uc5d0\uc11c id)\n\nlet str = \"As sly as a fox, as strong as an ox\";\nlet target = \"as\";\nlet pos = -1;\nwhile ((pos = str.indexOf(target, pos + 1)) != -1) {\n  alert( `\uc704\uce58: ${pos}` );\n}\n\n// bit not \uc5f0\uc0b0\uc790 \uc0ac\uc6a9 \uae30\ubc95\nlet str = \"Widget\";\nif (~str.indexOf(\"Widget\")) {\n  alert( '\ucc3e\uc558\ub2e4!' ); // \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.\n}\n\nalert( \"Widget with id\".includes(\"Widget\") ); // true\nalert( \"Widget\".startsWith(\"Wid\") ); // true, \"Widget\"\uc740 \"Wid\"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4.\nalert( \"Widget\".endsWith(\"get\") ); // true, \"Widget\"\uc740 \"get\"\uc73c\ub85c \ub05d\ub0a9\ub2c8\ub2e4.\n\n// \ubd80\ubd84 \ubb38\uc790\uc5f4 \ucd94\ucd9c\nlet str = \"stringify\";\nalert( str.slice(0, 5) ); // 'strin', 0\ubc88\uc9f8\ubd80\ud130 5\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(5\ubc88\uc9f8 \uc704\uce58\uc758 \uae00\uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c)\nalert( str.slice(0, 1) ); // 's', 0\ubc88\uc9f8\ubd80\ud130 1\ubc88\uc9f8 \uc704\uce58\uae4c\uc9c0(1\ubc88\uc9f8 \uc704\uce58\uc758 \uc790\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c)\nalert( str.slice(2) ); // ringify, 2\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0\nalert( str.slice(-4, -1) ); // gif\n\nalert( str.substring(2, 6) ); // \"ring\"\nalert( str.substring(6, 2) ); // \"ring\"\n\nlet str = \"stringify\";\nalert( str.substr(2, 4) ); // ring, \ub450 \ubc88\uc9f8\ubd80\ud130 \uae00\uc790 \ub124 \uac1c\n\n// \ubb38\uc790\uc5f4 \ube44\uad50 UTF-16\nalert( 'a' > 'Z' ); // true\nalert( '\u00d6sterreich' > 'Zealand' ); // true\n\nalert( \"z\".codePointAt(0) ); // 122\nalert( \"Z\".codePointAt(0) ); // 90\nalert( String.fromCodePoint(90) ); // Z\nalert( '\\u005a' ); // Z\n\nalert( '\u00d6sterreich'.localeCompare('Zealand') ); // -1",
            "title": "\ubb38\uc790\ud615"
        },
        {
            "location": "/javascript/#boolean",
            "text": "let nameFieldChecked = true;\nlet ageFieldChecked = false;\nlet isGreater = 4 > 1;",
            "title": "boolean\ud615"
        },
        {
            "location": "/javascript/#null",
            "text": "\uc77c\ubc18 null point\uc758 \uc774\ubbf8\uac00 \uc544\ub2c8\ub77c,  \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294(nothing)  \uac12,  \ube44\uc5b4 \uc788\ub294(empty)  \uac12,  \uc54c \uc218 \uc5c6\ub294(unknown)  \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370 \uc0ac\uc6a9  let age = null; // \ub098\uc774(age)\ub97c \uc54c \uc218 \uc5c6\uac70\ub098 \uadf8 \uac12\uc774 \ube44\uc5b4\uc788\uc74c",
            "title": "null \uac12"
        },
        {
            "location": "/javascript/#undefined",
            "text": "undefined \ub294 '\uac12\uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\u2019\ub97c \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9  let age;\nalert(age); // 'undefined' \ucd9c\ub825",
            "title": "undefined \uac12"
        },
        {
            "location": "/javascript/#object",
            "text": "=  json ?  This is non-primitive type.  property : {key: value} pair, key=\ubb38\uc790\ud615, \uc2ec\ubcfc\ud615, value=\ubaa8\ub4e0 \uc790\ub8cc\ud615  dot notation ,  square bracket notation \uc73c\ub85c property \uc811\uadfc,\ucd94\uac00,\uc0ad\uc81c \uac00\ub2a5  in \uc744 \uc0ac\uc6a9\ud574 property \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778 \uac00\ub2a5 ( true / false )  property\ub294 object\uc5d0 \ucc38\uc870\ub85c \uad6c\ud604\ub428, object\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud560 \uacbd\uc6b0 \uac19\uc740 property\ub97c \ucc38\uc870\ud568   // empty object\nlet user = new Object(); // \uac1d\uccb4 \uc0dd\uc131\uc790\ub85c \uc0dd\uc131\nlet user = {};  // \uac1d\uccb4 \ub9ac\ud130\ub7f4(object literal)\ub85c \uc0dd\uc131\n\nlet user = {     // \uac1d\uccb4\n  name: \"John\",  // \ud0a4: \"name\",  \uac12: \"John\"\n  age: 30,       // \ud0a4: \"age\", \uac12: 30\n  \"likes birds\": true  // \ubcf5\uc218\uc758 \ub2e8\uc5b4\ub294 \ub530\uc634\ud45c\n};\n\nalert( user.name ); // John, dot notation\uc744 \uc0ac\uc6a9\ud574 \uc811\uadfc\nalert( user[\"name\"] ); // square bracket notation\uc744 \uc0ac\uc6a9\ud55c \uc811\uadfc\n\nuser.likes birds = false; // error, \uad6c\ubb38\ud574\uc11d \ubd88\ub2a5\nuser[\"likes birds\"] = false; // ok\n\nalart( user.weight === undefined ); // property\uac00 \uc5c6\uc744 \uacbd\uc6b0, undefined\nalart( user[\"weight\"] === undefined );\nalart( \"key\" in user ); // in \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud574 \uc874\uc7ac\uc720\ubb34 \ud655\uc778\n\n\nuser.isAdmin = true; // add property\ndelete user.age; // delete a property\ndelete user[\"likes birds\"];\n\nlet user = {\n  name: \"John\",\n  age: 30,\n};\n\n// computed property!\nlet fruit = \"apple\"\nlet fruit2 = \"banana\"\nlet bag = {\n  [fruit]: 5, // fruit\ub97c key\ub85c \uc0ac\uc6a9\n  [fruit + 'Computers']: 5 // key\ub85c \ubcf5\ud569 \uc5f0\uc0b0 \uac00\ub2a5\n};\nbag[fruit2] = 6; // fruit2\ub97c key\ub85c \uc0ac\uc6a9\nalert( bag.apple ); // fruit\uc5d0 \"apple\"\uc774 \ud560\ub2f9\ub418\uc5c8\ub2e4\uba74, 5\uac00 \ucd9c\ub825\n\n// property value shorthand (\ub2e8\ucd95 \uad6c\ubb38)\nfunction makeUser(name, age) {\n  return {\n    name, // name: name \uacfc \uac19\uc74c\n    age,  // age: age \uc640 \uac19\uc74c\n    // ...\n  };\n}\n\nlet user = {\n  name,  // name: name \uacfc \uac19\uc74c\n  age: 30\n};\n\n// property iteration\nfor (key in object) {\n  // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n}\n\n// object\uc758 property\ub294 \uc120\uc5b8\ud560 \ud544\uc694\uc5c6\uc74c\nfunction marry(man, woman) {\n  woman.husband = man;\n  man.wife = woman;\n\n  return {\n    father: man,\n    mother: woman\n  }\n}\n\nlet family = marry({\n  name: \"John\"\n}, {\n  name: \"Ann\"\n});",
            "title": "object"
        },
        {
            "location": "/javascript/#const-object",
            "text": "const user = {\n  name: \"John\"\n};\nuser.name = \"Pete\"; // (*)\nalert(user.name); // Pete",
            "title": "const object\uc758 \ub0b4\ubd80 \uc815\ubcf4 \ubcc0\uacbd \uac00\ub2a5"
        },
        {
            "location": "/javascript/#-ok",
            "text": "// \uc608\uc57d\uc5b4\ub97c \ud0a4\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4.\nlet obj = {\n  for: 1,\n  let: 2,\n  return: 3\n};",
            "title": "\uc608\uc57d\uc5b4 \ud0a4\ub85c \uc0ac\uc6a9 - ok"
        },
        {
            "location": "/javascript/#0-0",
            "text": "let obj = {\n  0: \"test\" // \"0\": \"test\"\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n};\n\nalert( obj[\"0\"] ); // test\nalert( obj[0] ); // test",
            "title": "\ud0a4\uc5d0 \uc22b\uc790 0\uc744 \ub123\uc73c\uba74 \ubb38\uc790\uc5f4 \"0\"\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658"
        },
        {
            "location": "/javascript/#object_1",
            "text": "let a = {};\nlet b = a; // \ucc38\uc870\uc5d0 \uc758\ud55c \ubcf5\uc0ac\nalert( a == b ); // true, \ub450 \ubcc0\uc218\ub294 \uac19\uc740 \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4.\nalert( a === b ); // true\n\nlet a = {};\nlet b = {}; // \ub3c5\ub9bd\ub41c \ub450 \uac1d\uccb4\nalert( a == b ); // false",
            "title": "object \ube44\uad50"
        },
        {
            "location": "/javascript/#objectassign",
            "text": "property loop\ub97c \ud1b5\ud574\uc11c \ubcf5\uc0ac  Object.assign(dest, [src1, src2, src3...])  \uc0ac\uc6a9  \uae4a\uc740 \ubcf5\uc0ac(deep cloning)\ub294 \uc9c1\uc811 \ub9cc\ub4e4\ub358\uc9c0, lodash\uc758  _.cloneDeep(obj)  \uc0ac\uc6a9   let user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = {}; // \uc0c8\ub85c\uc6b4 \ube48 \uac1d\uccb4\n// \ube48 \uac1d\uccb4\uc5d0 user \ud504\ub85c\ud37c\ud2f0 \uc804\ubd80\ub97c \ubcf5\uc0ac\ud574 \ub123\uc2b5\ub2c8\ub2e4.\nfor (let key in user) {\n  clone[key] = user[key];\n}\n\n// Object.assign \uc0ac\uc6a9\nlet user = { name: \"John\" };\nlet permissions1 = { canView: true };\nlet permissions2 = { canEdit: true };\n\n// permissions1\uacfc permissions2\uc758 \ud504\ub85c\ud37c\ud2f0\ub97c user\ub85c \ubcf5\uc0ac\nObject.assign(user, permissions1, permissions2);",
            "title": "\uac1d\uccb4 \ubcf5\uc0ac, \ubcd1\ud569\uacfc Object.assign"
        },
        {
            "location": "/javascript/#methods-and-this",
            "text": "\uac1c\uccb4\uc758 \ub3d9\uc791\uc744 \uba85\uc138  = property\uc5d0 \ud560\ub2f9\ub41c \ud568\uc218  this : method\uc5d0\uc11c \ud574\ub2f9 \uac1d\uccb4\uc758 property \uc811\uadfc\uc744 \uc704\ud574 \uc0ac\uc6a9  Arrow function\uc740  this \uac00 \uc5c6\uc74c, \ubcc4\uac1c\uc758 this\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \uac74 \uc6d0\ud558\uc9c0 \uc54a\uace0, \uc678\ubd80 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \uc788\ub294 this\ub97c \uc774\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 \ud654\uc0b4\ud45c \ud568\uc218\uac00 \uc720\uc6a9   let user = {\n  sayHi: function() {\n    alert(\"Hello\");\n  }\n};\n\n// method \ucd95\uc57d\ud615\nlet user = {\n  sayHi() { // \"sayHi: function()\"\uacfc \ub3d9\uc77c\n    alert(\"Hello\");\n  }\n};\n\n// Arrow function\uc740 \uc0c1\uc704 namespace\uc758 this\ub97c \uac00\uc838\uc634\nlet user = {\n  firstName: \"\ubcf4\ub77c\",\n  sayHi() {\n    let arrow = () => alert(this.firstName);\n    arrow();\n  }\n};\n\nuser.sayHi(); // sayHi\uc758 this \ucc28\uc6a9; \uacb0\uacfc '\ubcf4\ub77c'",
            "title": "Methods and this"
        },
        {
            "location": "/javascript/#constructor-function",
            "text": "",
            "title": "\uac1d\uccb4 \uc0dd\uc131 \ud568\uc218 constructor function"
        },
        {
            "location": "/javascript/#-constructor-function",
            "text": "\uad00\ub8401: \ud568\uc218 \uc774\ub984\uc758 \uccab \uae00\uc790\ub294 \ub300\ubb38\uc790\ub85c \uc2dc\uc791  \uad00\ub8402: \ubc18\ub4dc\uc2dc 'new' \uc5f0\uc0b0\uc790\ub97c \ubd99\uc5ec \uc2e4\ud589  new Constructor(...) \uc2dc  \ube48 \uac1d\uccb4 \uc0dd\uc131, this\uc5d0 \ud560\ub2f9  \ud568\uc218 \uc2e4\ud589 => property \ucd94\uac00  \uc0dd\uc131\ub41c this\ub97c \ubc18\ud658   // constructor function\nfunction User(name) {\n  // this = {};  (\ube48 \uac1d\uccb4\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9d0)\n  // \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud37c\ud2f0\ub97c this\uc5d0 \ucd94\uac00\ud568\n  this.name = name;\n  this.isAdmin = false;\n  // return this;  (this\uac00 \uc554\uc2dc\uc801\uc73c\ub85c \ubc18\ud658\ub428)\n}\n\nlet user = new User(\"\ubcf4\ub77c\");\nalert(user.isAdmin); // false\n\n// \uc775\uba85 \uc0dd\uc131\uc790 (anonymous constructor) - \ud55c\ubc88\ub9cc \uc0ac\uc6a9\nlet user = new function() {\n  this.name = \"John\";\n  this.isAdmin = false;\n};\n\n// new.target\uc73c\ub85c constructor\uac00 new\ud568\uaed8 \ud638\ucd9c\ub418\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\uc74c.\nfunction User() {\n  alert(new.target);\n}\n// 'new' \uc5c6\uc774 \ud638\ucd9c\ud568\nUser(); // undefined\n// 'new'\ub97c \ubd99\uc5ec \ud638\ucd9c\ud568\nnew User(); // function User { ... }\n\n// \uc0dd\uc131\uc790 () \uad04\ud638 \uc0dd\ub7b5\nlet user = new User; // <-- \uad04\ud638\uac00 \uc5c6\uc74c\nlet user = new User(); // \uc704 \ucf54\ub4dc\uc640 \ub611\uac19\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4.\n\n// \uc0dd\uc131\uc790\uc5d0\uc11c method \ucd94\uac00\nfunction User(name) {\n  this.name = name;\n\n  this.sayHi = function() {\n    alert( \"\uc81c \uc774\ub984\uc740 \" + this.name + \"\uc785\ub2c8\ub2e4.\" );\n  };\n}\nlet bora = new User(\"\uc774\ubcf4\ub77c\");\nbora.sayHi(); // \uc81c \uc774\ub984\uc740 \uc774\ubcf4\ub77c\uc785\ub2c8\ub2e4.",
            "title": "- \uc0dd\uc131\uc790 \ud568\uc218(constructor function)\uc640 \uc77c\ubc18 \ud568\uc218\uc5d0 \uae30\uc220\uc801\uc778 \ucc28\uc774\ub294 \uc5c6\uc74c"
        },
        {
            "location": "/javascript/#optional-chaining",
            "text": "property \uc874\uc7ac \uc720\ubb34 \ud3c9\uac00  method\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5  property \uc4f0\uae30\uc5d0\ub294 \uc0ac\uc6a9 \ubd88\uac00   let user = {}; // \uc8fc\uc18c \uc815\ubcf4\uac00 \uc5c6\ub294 \uc0ac\uc6a9\uc790\nalert(user.address.street); // TypeError: Cannot read property 'street' of undefined\nalert( user && user.address && user.address.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nalert( user?.address?.street ); // undefined, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. <= optional chaining\n\n// \ud568\uc218 \ud638\ucd9c\uc5d0\ub3c4 \uc0ac\uc6a9\nlet user1 = {\n  firstName: \"Violet\"\n  admin() {\n    alert(\"\uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\");\n  }\n}\n\nlet user2 = {};\n\nuser1.admin?.(); // \uad00\ub9ac\uc790 \uacc4\uc815\uc785\ub2c8\ub2e4.\nuser2.admin?.();\nalert( user1?.[\"firstName\"] ); // Violet",
            "title": "\uc635\uc154\ub110 \uccb4\uc774\ub2dd(optional chaining) ?., ?.(), ?.[]"
        },
        {
            "location": "/javascript/#object_2",
            "text": "\uc544\ub798 \ud568\uc218\ub294 \u2018\uc9c4\uc9dc\u2019 \ubc30\uc5f4\uc744 \ubc18\ud658\ud558\uba70, Symbol\uc740 \ubb34\uc2dc   Object.keys(obj) : \uac1d\uccb4\uc758 \ud0a4\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658  Object.values(obj) : \uac1d\uccb4\uc758 \uac12\ub9cc \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658  Object.entries(obj) : [\ud0a4, \uac12] \uc30d\uc744 \ub2f4\uc740 \ubc30\uc5f4\uc744 \ubc18\ud658  Object.fromEntries(array) :  Object.entries(obj) \uc758 \uc5ed\ubcc0\ud658   let user = {\n  name: \"John\",\n  age: 30\n};\n// Object.keys(user) = [\"name\", \"age\"]\n// Object.values(user) = [\"John\", 30]\n// Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ]\nfor (let value of Object.values(user)) {\n  alert(value);\n}\n\nlet prices = {\n  banana: 1,\n  orange: 2,\n  meat: 4,\n};\nlet doublePrices = Object.fromEntries(\n  // \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ubcc0\ud658\ud574\uc11c \ubc30\uc5f4 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc778 map\uc744 \uc801\uc6a9\ud558\uace0 fromEntries\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc744 \ub2e4\uc2dc \uac1d\uccb4\ub85c \ub418\ub3cc\ub9bd\ub2c8\ub2e4.\n  Object.entries(prices).map(([key, value]) => [key, value * 2])\n);\nalert(doublePrices.meat); // 8",
            "title": "object \uc21c\ud68c \ud568\uc218"
        },
        {
            "location": "/javascript/#symbol",
            "text": "\uc678\ubd80 \uac1d\uccb4\uc5d0 \uc790\uc2e0\uc758 \uc815\ubcf4\ub97c hidden property\ub85c \ucd94\uac00\uc2dc \uc720\uc6a9  for..in  \ubc18\ubcf5\ubb38\uc5d0\uc11c \ubc30\uc81c  Object.assign \uc740 symbol\ub3c4 \ubcf5\uc0ac\ud568  global symbol registry : global \uc601\uc5ed\uc5d0 symbol\uc744 \uc800\uc7a5, script \uacf3\uacf3\uc5d0\uc11c symbol\uc744 \ud638\ucd9c\ud558\uc5ec \uc0ac\uc6a9  system symbol : javascript \ub0b4\ubd80 symbol; https://tc39.github.io/ecma262/#sec-well-known-symbols  Symbol.hasInstance  Symbol.isConcatSpreadable  Symbol.iterator  Symbol.toPrimitive   let id = Symbol(\"id\");\nalert(id); // TypeError: Cannot convert a Symbol value to a string\nalert(id.toString()); // Symbol(id)\uac00 \uc5bc\ub7ff \ucc3d\uc5d0 \ucd9c\ub825\ub428\nalert(id.description); // id\n\n// Hidden property\nlet user = { // \uc11c\ub4dc\ud30c\ud2f0 \ucf54\ub4dc\uc5d0\uc11c \uac00\uc838\uc628 \uac1d\uccb4\n  name: \"John\"\n};\nlet id = Symbol(\"id\");\nuser[id] = 1;\nalert( user[id] ); // \uc2ec\ubcfc\uc744 \ud0a4\ub85c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n// \ub2e4\ub978 \ubc29\ubc95\nlet id = Symbol(\"id\");\nlet user = {\n  name: \"John\",\n  [id]: 123 // \"id\": 123\uc740 \uc548\ub428\n};\n\n// Object.assign\uacfc symbol \ub3d9\uc791\nlet id = Symbol(\"id\");\nlet user = {\n  [id]: 123\n};\n\nlet clone = Object.assign({}, user);\n\nalert( clone[id] ); // 123  // \uc804\uc5ed \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0\uc11c \uc2ec\ubcfc \uc77d\uae30\nlet id = Symbol.for(\"id\"); // \uc2ec\ubcfc\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c\uc6b4 \uc2ec\ubcfc \uc0dd\uc131\nlet idAgain = Symbol.for(\"id\");\nalert( id === idAgain ); // true\n// \uc2ec\ubcfc\uc744 \uc774\uc6a9\ud574 \uc774\ub984\uc744 \uc5bb\uc74c\nalert( Symbol.keyFor(id) ); // \"id\"\nalert( Symbol.keyFor(localSymbol) ); // \uc804\uc5ed \uc2ec\ubcfc\uc774 \uc544\ub2d8, undefined \ubc18\ud658",
            "title": "symbol"
        },
        {
            "location": "/javascript/#symboltoprimitive",
            "text": "\uac1d\uccb4\uc5d0  obj[Symbol.toPrimitive](hint) \uba54\uc11c\ub4dc\uac00 \uc788\ub294\uc9c0 \ucc3e\uace0, \uc788\ub2e4\uba74 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.  Symbol.toPrimitive \ub294 \uc2dc\uc2a4\ud15c \uc2ec\ubcfc\ub85c, \uc2ec\ubcfc\ud615 \ud0a4\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.  1\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0 hint\uac00 \"string\"\uc774\ub77c\uba74,  obj.toString() \uc774\ub098  obj.valueOf() \ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428).  1\uacfc 2\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uace0, hint\uac00 \"number\"\ub098 \"default\"\ub77c\uba74  obj.valueOf() \ub098  obj.toString() \uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4(\uc874\uc7ac\ud558\ub294 \uba54\uc11c\ub4dc\ub9cc \uc2e4\ud589\ub428).  hint\ub294 \"string\", \"number\", \"default\" \uc911 \ud558\ub098   let user = {\n  name: \"John\",\n  money: 1000,\n\n  [Symbol.toPrimitive](hint) {\n    alert(`hint: ${hint}`);\n    return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money;\n  }\n};\n\n// \ub370\ubaa8:\nalert(user); // hint: string -> {name: \"John\"}\nalert(+user); // hint: number -> 1000\nalert(user + 500); // hint: default -> 1500\n\n// toString, valueOf\nlet user = {\n  name: \"John\",\n  money: 1000,\n\n  // hint\uac00 \"string\"\uc778 \uacbd\uc6b0\n  toString() {\n    return `{name: \"${this.name}\"}`;\n  },\n\n  // hint\uac00 \"number\"\ub098 \"default\"\uc778 \uacbd\uc6b0\n  valueOf() {\n    return this.money;\n  }\n\n};\n\nalert(user); // toString -> {name: \"John\"}\nalert(+user); // valueOf -> 1000\nalert(user + 500); // valueOf -> 1500",
            "title": "\uac1d\uccb4\uc758 \ud615\ubcc0\ud658; Symbol.toPrimitive"
        },
        {
            "location": "/javascript/#iterable-symboliterator",
            "text": "\uc8fc\ub85c array\uc5d0 \uc0ac\uc6a9\ub418\ub358  for..in  \uc774 \ub3d9\uc791 \uac00\ub2a5\ud568  next()  \ub2e4\uc74c \uac12 iterater\ub97c \ubc18\ud658   let range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    this.current = this.from;\n    return this;\n  },\n\n  next() {\n    if (this.current <= this.to) {\n      return { done: false, value: this.current++ };\n    } else {\n      return { done: true };\n    }\n  }\n};\n\nfor (let num of range) {\n  alert(num); // 1, then 2, 3, 4, 5\n}  \ubb38\uc790\uc5f4 = iterable  for (let char of \"test\") {\n  // \uae00\uc790 \ud558\ub098\ub2f9 \ud55c \ubc88 \uc2e4\ud589\ub429\ub2c8\ub2e4(4\ud68c \ud638\ucd9c).\n  alert( char ); // t, e, s, t\uac00 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\ub428\n}  Array.from \uc73c\ub85c \uac1d\uccb4\ub97c \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uae30  let arrayLike = {\n  0: \"Hello\",\n  1: \"World\",\n  length: 2\n};\n\nlet arr = Array.from(arrayLike); // (*)\nalert(arr.pop()); // World (\uba54\uc11c\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.)",
            "title": "iterable \uac1d\uccb4 \ub9cc\ub4e4\uae30; Symbol.iterator"
        },
        {
            "location": "/javascript/#array",
            "text": "push\uc640 pop\uc740 \ube60\ub974\uc9c0\ub9cc shift\uc640 unshift\ub294 \ub290\ub9bc  https://ko.javascript.info/array  for..in loop \uc0ac\uc6a9\uc2dc \ub0b4\ubd80 property\ub85c \uac19\uc774 \uc21c\ud68c\ud558\ubbc0\ub85c \uc0ac\uc6a9 X   // \uc120\uc5b8\nlet arr = new Array();\nlet arr = [];\nlet arr = new Array(2); // [undefined, undefined]\nlet fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\uc790\ub450\"];\nlet fruits = [\n  \"\uc0ac\uacfc\",\n  \"\uc624\ub80c\uc9c0\",\n  \"\uc790\ub450\",\n];\nlet matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\n// \uc811\uadfc\nalert( fruits[0] ); // \uc0ac\uacfc\nfruits[2] = '\ubc30';\n\n// \ud06c\uae30\nalert( fruits.length ); // 3\n\n// \ubcf5\ud569 \ubc30\uc5f4\nlet arr = [ '\uc0ac\uacfc', { name: '\uc774\ubcf4\ub77c' }, true, function() { alert('\uc548\ub155\ud558\uc138\uc694.'); } ];\n\n// pop\u00b7push\uc640 shift\u00b7unshift\nlet fruits = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"];\nalert( fruits.pop() ); // \ubc30\uc5f4\uc5d0\uc11c \"\ubc30\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4.\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0\nfruits.push(\"\ubc30\");\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30\nalert( fruits.shift() ); // \ubc30\uc5f4\uc5d0\uc11c \"\uc0ac\uacfc\"\ub97c \uc81c\uac70\ud558\uace0 \uc81c\uac70\ub41c \uc694\uc18c\ub97c \uc5bc\ub7ff\ucc3d\uc5d0 \ub744\uc6c1\ub2c8\ub2e4.\nalert( fruits ); // \uc624\ub80c\uc9c0,\ubc30\nfruits.unshift('\uc0ac\uacfc'); // \uc55e\uc5d0 \uc694\uc18c \ucd94\uac00\nalert( fruits ); // \uc0ac\uacfc,\uc624\ub80c\uc9c0,\ubc30\n\n// \uc5ec\ub7ec \uc694\uc18c \uc0bd\uc785\nfruits.push(\"\uc624\ub80c\uc9c0\", \"\ubc30\");\nfruits.unshift(\"\ud30c\uc778\uc560\ud50c\", \"\ub808\ubaac\");\n\n// \uc694\uc18c \uc0ad\uc81c\nlet arr = [\"I\", \"go\", \"home\"];\ndelete arr[1]; // \"go\"\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4.\narr.splice(1, 1); // \uc778\ub371\uc2a4 1\ubd80\ud130 \uc694\uc18c \ud55c \uac1c\ub97c \uc81c\uac70\n\n// \uc694\uc18c \ub300\uccb4\nlet arr = [\"I\", \"study\", \"JavaScript\", \"right\", \"now\"];\n// \ucc98\uc74c(0) \uc138 \uac1c(3)\uc758 \uc694\uc18c\ub97c \uc9c0\uc6b0\uace0, \uc774 \uc790\ub9ac\ub97c \ub2e4\ub978 \uc694\uc18c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.\narr.splice(0, 3, \"Let's\", \"dance\");\nalert( arr ) // now [\"Let's\", \"dance\", \"right\", \"now\"]\n\n// \uc694\uc18c \ucd94\uac00 (deleteCount\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc694\uc18c\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub97c \ucd94\uac00)\narr.splice(2, 0, \"complex\", \"language\");\n\n// slicing, concat\nlet arr = [1, 2];\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4]) ); // 1,2,3,4\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, [5,6]\uc758 \uc694\uc18c \ubaa8\ub450\ub97c \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6\n// arr\uc758 \uc694\uc18c \ubaa8\ub450\uc640 [3,4]\uc758 \uc694\uc18c \ubaa8\ub450, 5\uc640 6\uc744 \ud55c\ub370 \ubaa8\uc740 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc774 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4.\nalert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6\n\nlet arr = [\"t\", \"e\", \"s\", \"t\"];\nalert( arr.slice(1, 3) ); // e,s (\uc778\ub371\uc2a4\uac00 1\uc778 \uc694\uc18c\ubd80\ud130 \uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac(\uc778\ub371\uc2a4\uac00 3\uc778 \uc694\uc18c\ub294 \uc81c\uc678))\nalert( arr.slice(-2) ); // s,t (\uc778\ub371\uc2a4\uac00 -2\uc778 \uc694\uc18c\ubd80\ud130 \uc81c\uc77c \ub05d \uc694\uc18c\uae4c\uc9c0\ub97c \ubcf5\uc0ac)\n\n// \ubc18\ubcf5\ubb38, \uc21c\ud68c\nlet arr = [\"\uc0ac\uacfc\", \"\uc624\ub80c\uc9c0\", \"\ubc30\"];\n\nfor (let i = 0; i < arr.length; i++) {\n  alert( arr[i] );\n}\n\n// for..of\nfor (let fruit of fruits) {\n  alert( fruit );\n}\n\narr.forEach(function(item, index, array) {\n  // \uc694\uc18c\uc5d0 \ubb34\uc5b8\uac00\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n});\n\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach(alert);\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) => {\n  alert(`${item} is at index ${index} in ${array}`);\n});\n\n// \ubc30\uc5f4 \ud0d0\uc0c9: indexOf, lastIndexOf\uc640 includes\nlet arr = [1, 0, false];\nalert( arr.indexOf(0) ); // 1\nalert( arr.indexOf(false) ); // 2\nalert( arr.indexOf(null) ); // -1\nalert( arr.includes(1) ); // true\n\nconst arr = [NaN];\nalert( arr.indexOf(NaN) ); // -1 (\uc644\uc804 \ud56d\ub4f1 \ube44\uad50 === \ub294 NaN\uc5d4 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c 0\uc774 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.)\nalert( arr.includes(NaN) );// true (NaN\uc758 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.)\n\nlet result = arr.find(function(item, index, array) {\n});\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\nlet user = users.find(item => item.id == 1);\nalert(user.name); // John\n\n// \uc870\uac74 \ud0d0\uc0c9\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\n// \uc55e\ucabd \uc0ac\uc6a9\uc790 \ub450 \uba85\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\nlet someUsers = users.filter(item => item.id < 3);\nalert(someUsers.length); // 2",
            "title": "Array"
        },
        {
            "location": "/javascript/#mapping-function-for-array",
            "text": "\ubc30\uc5f4\uc744 \ubcc0\ud615\uc2dc\ud0a4\uac70\ub098 \uc694\uc18c\ub97c \uc7ac \uc815\ub82c\ud574\uc8fc\ub294 \uba54\uc11c\ub4dc  let result = arr.map(function(item, index, array) {\n  // \uc694\uc18c \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n});\n\nlet lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item => item.length);\nalert(lengths); // 5,7,6",
            "title": "mapping function for array"
        },
        {
            "location": "/javascript/#sort",
            "text": "let arr = [ 1, 2, 15 ];\narr.sort(); // arr \ub0b4\ubd80\uac00 \uc7ac \uc815\ub82c\ub429\ub2c8\ub2e4.\nalert( arr );  // 1, 15, 2\n\nfunction compareNumeric(a, b) {\n  if (a > b) return 1;\n  if (a == b) return 0;\n  if (a < b) return -1;\n}\nlet arr = [ 1, 2, 15 ];\narr.sort(compareNumeric);\nalert(arr);  // 1, 2, 15\n\n[1, -2, 15, 2, 0, 8].sort(function(a, b) {\n  alert( a + \" <> \" + b );\n  return a - b;\n});\n\n// arrow function \uc0ac\uc6a9\narr.sort( (a, b) => a - b );\n\n// \ubb38\uc790\uc5f4 \uc815\ub82c\uc2dc\uc5d0\ub294 localeCompare \uc0ac\uc6a9\nlet countries = ['\u00d6sterreich', 'Andorra', 'Vietnam'];\nalert( countries.sort( (a, b) => a > b ? 1 : -1) ); // Andorra, Vietnam, \u00d6sterreich (\uc81c\ub300\ub85c \uc815\ub82c\uc774 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.)\nalert( countries.sort( (a, b) => a.localeCompare(b) ) ); // Andorra,\u00d6sterreich,Vietnam (\uc81c\ub300\ub85c \uc815\ub82c\ub418\uc5c8\ub124\uc694!)\n\n// \uc5ed\uc815\ub82c\nlet arr = [1, 2, 3, 4, 5];\narr.reverse();\nalert( arr ); // 5,4,3,2,1",
            "title": "sort"
        },
        {
            "location": "/javascript/#_11",
            "text": "let names = 'Bilbo, Gandalf, Nazgul';\nlet arr = names.split(', ');\nfor (let name of arr) {\n  alert( `${name}\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0` ); // Bilbo\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uba54\uc2dc\uc9c0\n}\n\nlet str = \"test\";\nalert( str.split('') ); // t,e,s,t\n\n\nlet arr = ['Bilbo', 'Gandalf', 'Nazgul'];\nlet str = arr.join(';'); // \ubc30\uc5f4 \uc694\uc18c \ubaa8\ub450\ub97c ;\ub97c \uc0ac\uc6a9\ud574 \ud558\ub098\uc758 \ubb38\uc790\uc5f4\ub85c \ud569\uce69\ub2c8\ub2e4.\nalert( str ); // Bilbo;Gandalf;Nazgul",
            "title": "\ubb38\uc790\uc5f4 &lt;==&gt; \ubc30\uc5f4"
        },
        {
            "location": "/javascript/#reduce-reduceright",
            "text": "let value = arr.reduce(function(accumulator, item, index, array) {\n  // ...\n}, [initial]);\nlet arr = [1, 2, 3, 4, 5];\nlet result = arr.reduce((sum, current) => sum + current, 0);\nalert(result); // 15",
            "title": "reduce\uc640 reduceRight (\ub204\uc0b0\uae30)"
        },
        {
            "location": "/javascript/#_12",
            "text": "alert(Array.isArray({})); // false\nalert(Array.isArray([])); // true",
            "title": "\ubc30\uc5f4\uc778\uc9c0 \ud655\uc778"
        },
        {
            "location": "/javascript/#map",
            "text": "\uac1d\uccb4\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, key\uc5d0 \ub2e4\uc591\ud55c \uc790\ub8cc\ud615 \uc9c0\uc6d0   \ub418\ub3c4\ub85d get(), set()\uc744 \uc0ac\uc6a9?  map\uc740 \ud0a4\ub85c \uac1d\uccb4\ub97c \ud5c8\uc6a9  SameValueZero \ub77c \ubd88\ub9ac\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uac12\uc758 \ub4f1\uac00 \uc5ec\ubd80\ub97c \ud655\uc778  call chaining \uc0ac\uc6a9\uac00\ub2a5: \ud638\ucd9c\ub9c8\ub2e4 map \uc790\uc2e0\uc744 \ubc18\ud658\ud568  \uc0bd\uc785 \uc21c\uc11c\ub97c \uae30\uc5b5\ud568 = ordered map  Object.entries : \uac1d\uccb4\ub97c map\uc73c\ub85c \ubc14\uafb8\uae30  Object.fromEntries : map\uc744 \uac1d\uccb4\ub85c \ubc14\uafb8\uae30",
            "title": "map"
        },
        {
            "location": "/javascript/#_13",
            "text": "new Map() : \uc0dd\uc131  map.set(key, value) : {key: value} \uc800\uc7a5  map.get(key) : value \ubc18\ud658, key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 undefined  map.has(key) : true if the key exists  map.delete(key) : key, value \uc0ad\uc81c  map.clear() : clear all in the map.  map.size :  size of the map  map.keys() : \uac01 \uc694\uc18c\uc758 \ud0a4\ub97c \ubaa8\uc740 \ubc18\ubcf5 \uac00\ub2a5\ud55c(iterable, \uc774\ud130\ub7ec\ube14) \uac1d\uccb4\ub97c \ubc18\ud658;  for..of  map.values() : \uac01 \uc694\uc18c\uc758 \uac12\uc744 \ubaa8\uc740 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658;  for..of  map.entries() : \uc694\uc18c\uc758 [\ud0a4, \uac12]\uc744 \ud55c \uc30d\uc73c\ub85c \ud558\ub294 \uc774\ud130\ub7ec\ube14 \uac1d\uccb4\ub97c \ubc18\ud658;  for..of  map.forEach((value, key, map) => {}) : map\uc758 {key: value} \uc21c\ud68c   let map = new Map();\n\nmap.set('1', 'str1');   // \ubb38\uc790\ud615 \ud0a4\nmap.set(1, 'num1');     // \uc22b\uc790\ud615 \ud0a4\nmap.set(true, 'bool1'); // \ubd88\ub9b0\ud615 \ud0a4\n\n// map\uc740 key\uc758 \ud0c0\uc785\uc744 \ubcc0\ud658\uc2dc\ud0a4\uc9c0 \uc54a\uace0 \uadf8\ub300\ub85c \uc720\uc9c0\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\nalert( map.size ); // 3\n\n// map call chaining\nmap.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n\n// map \uc694\uc18c \ubc18\ubcf5\ubb38\nlet recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// \ud0a4(vegetable)\ub97c \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// \uac12(amount)\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// [\ud0a4, \uac12] \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \uc21c\ud68c\ud569\ub2c8\ub2e4.\nfor (let entry of recipeMap) { // recipeMap.entries()\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n  alert(entry); // cucumber,500 ...\n}\n\n// \uac01 (\ud0a4, \uac12) \uc30d\uc744 \ub300\uc0c1\uc73c\ub85c \ud568\uc218\ub97c \uc2e4\ud589\nrecipeMap.forEach( (value, key, map) => {\n  alert(`${key}: ${value}`); // cucumber: 500 ...\n});\n\n// map\uc73c\ub85c \ubcc0\ud658\nlet map = new Map([ // \uac01 \uc694\uc18c\uac00 [\ud0a4, \uac12] \uc30d\uc778 \ubc30\uc5f4\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\nalert( map.get('1') ); // str1\n\nlet obj = {\n  name: \"John\",\n  age: 30\n};\n\nlet map = new Map(Object.entries(obj));\nalert( map.get('name') ); // John\n\n// map\uc744 object\ub85c \ubcc0\ud658\nlet prices = Object.fromEntries([\n  ['banana', 1],\n  ['orange', 2],\n  ['meat', 4]\n]);",
            "title": "\uc81c\uacf5 \ud568\uc218"
        },
        {
            "location": "/javascript/#set",
            "text": "\uac12\uc758 \uc911\ubcf5 \ubd88\uac00\ud55c collection\uc73c\ub85c call chaining \uc0ac\uc6a9\uac00\ub2a5   new Set(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac  set.add(value) : \uac12\uc744 \ucd94\uac00  set.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false.  set.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658  set.clear() : set\uc758 \ubaa8\ub4e0 \uac12 \uc0ad\uc81c  set.size : set \ub0b4 \uc694\uc18c\uc758 \uc218  set.forEach((value, valueAgain, set) => {}) : set \uc694\uc18c \ubc18\ubcf5 \uc21c\ud68c  set.keys()  set.values()  set.entries()   let set = new Set();\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\nalert( set.size ); // 3\nfor (let user of set) {\n  alert(user.name); // // John, Pete, Mary \uc21c\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4.\n}\n// forEach\nset.forEach((value, valueAgain, set) => {\n  alert(value);\n});",
            "title": "set"
        },
        {
            "location": "/javascript/#weakmap-and-weakset",
            "text": "WeakMap\uc740 object\ub9cc\uc744 key\ub85c \uc0ac\uc6a9\ud558\uba70, object\uac00 unreachable\ud558\uba74, WeakMap\uc5d0 key\ub3c4 Garbage collection\uc5d0 \uc758\ud574 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc790\ub3d9\ud574\uc81c\ub428   WeakMap\uc740 \ubd80\ucc28\uc801\uc778 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uacf3\uc774 \ud544\uc694\ud560 \ub54c \uc720\uc6a9 e.g. \uc0ac\uc6a9\uc790 \ubc29\ubb38\ud69f\uc218, caching    weakMap.get(key)  weakMap.set(key, value)  weakMap.delete(key)  weakMap.has(key)   WeakSet\ub3c4 WeakMap\uacfc \uc720\uc0ac\ud558\ub098 \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4.   new WeakSet(iterable) : set \uc0dd\uc131; iterable (\ubcf4\ud1b5 array) \uc77c \uacbd\uc6b0 \uac12 \ubcf5\uc0ac  weakSet.add(value) : \uac12\uc744 \ucd94\uac00  weakSet.delete(value) : \uac12 \uc0ad\uc81c, it returns true or false.  weakSet.has(value) : \uac12 \uc874\uc7ac \uc720\ubb34 \ubc18\ud658   let john = { name: \"John\" };\nlet weakMap = new WeakMap();\nweakMap.set(john, \"...\");\njohn = null; // \ucc38\uc870\ub97c \ub36e\uc5b4\uc500\n// john\uc744 \ub098\ud0c0\ub0b4\ub294 \uac1d\uccb4\ub294 \uc774\uc81c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc9c0\uc6cc\uc9d1\ub2c8\ub2e4!\n\n// caching\nlet cache = new WeakMap();\n// \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \uc704\ud06c\ub9f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\nfunction process(obj) {\n  if (!cache.has(obj)) {\n    let result = /* \uc5f0\uc0b0 \uc218\ud589 */ obj;\n    cache.set(obj, result);\n  }\n  return cache.get(obj);\n}\n\n// \ud83d\udcc1 main.js\nlet obj = {/* ... \uac1d\uccb4 ... */};\nlet result1 = process(obj);\nlet result2 = process(obj);\n\n// \uac1d\uccb4\uac00 \uc4f8\ubaa8\uc5c6\uc5b4\uc9c0\uba74 \uc544\ub798\uc640 \uac19\uc774 null\ub85c \ub36e\uc5b4\uc501\ub2c8\ub2e4.\nobj = null;",
            "title": "WeakMap and WeakSet"
        },
        {
            "location": "/javascript/#date",
            "text": "UTC \uae30\uc900(UTC+0) 1970\ub144 1\uc6d4 1\uc77c 0\uc2dc 0\ubd84 0\ucd08\uc5d0\uc11c milliseconds \ud6c4\uc758 \uc2dc\uac04\uac12\uc744 \uc800\uc7a5\ud558\ub294 object   new Date(milliseconds)  new Date(datestring)  new Date(year, month, date, hours, minutes, seconds, ms)  getFullYear() ,  getMonth() ,  getDate() ,  getHours() ,  getMinutes() ,  getSeconds() ,  getMilliseconds()  getDay() : \uc694\uc77c  getUTCFullYear() ,  getUTCMonth() ,  getUTCDay() : UTC timezone  getTime() : returns timestamp  getTimezoneOffset() : offset from UTC basetime  setFullYear(year, [month], [date])  setMonth(month, [date])  setDate(date)  setHours(hour, [min], [sec], [ms])  setMinutes(min, [sec], [ms])  setSeconds(sec, [ms])  setMilliseconds(ms)  setTime(milliseconds)   let date = new Date(\"2017-01-26\");\nlet now = new Date();\nalert( now ); // \ud604\uc7ac \ub0a0\uc9dc \ubc0f \uc2dc\uac04\uc774 \ucd9c\ub825\ub428\nlet timestamp = Date.now() // current timestamp",
            "title": "Date"
        },
        {
            "location": "/javascript/#autocorrection",
            "text": "let date = new Date(2013, 0, 32); // 2013\ub144 1\uc6d4 32\uc77c\nalert(date); // 2013\ub144 2\uc6d4 1\uc77c\nalert(+date); // \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658 (timestamp)",
            "title": "Autocorrection"
        },
        {
            "location": "/javascript/#benchmarking-test",
            "text": "function diffGetTime(date1, date2) {\n  return date2.getTime() - date1.getTime();\n}",
            "title": "Benchmarking Test"
        },
        {
            "location": "/javascript/#dateparse",
            "text": "YYYY-MM-DDTHH:mm:ss.sssZ+-hh:mm  \ud615\uc2dd\uc758 \ubb38\uc790\ub97c parsing\ud558\uc5ec Data object\ub85c \ubc18\ud658  let ms = Date.parse('2012-01-26T13:51:50.417-07:00');",
            "title": "Date.parse"
        },
        {
            "location": "/javascript/#json-javascript-object-notation-serialization",
            "text": "javascript\uc758 object\uc758 serialization \uae30\uc220\ub85c RFC4627\ub85c \ud45c\uc900\ud654  JSON.stringify : It serializes an object to a JSON-encoded string.  JSON.parse : It de-serializes an object from a JSON-encoded string.  \ud45c\ud604 \uc790\ub8cc\ud615:  object ,  array ,  string ,  number ,  boolean ,  null  \uc774\uc678 \uc790\ub8cc\ud615\uc740 \ubaa8\ub450 ignored  \uc21c\ud658 \ucc38\uc870 object\uac00 \uc788\uc744 \uacbd\uc6b0 error   let student = {\n  name: 'John',\n  age: 30,\n  isAdmin: false,\n  courses: ['html', 'css', 'js'],\n  wife: null\n};\nlet json = JSON.stringify(student);\nalert(typeof json); // string\nalert(json); // {\"name\":\"John\",\"age\":30,\"isAdmin\":false,\"courses\":[\"html\",\"css\",\"js\"],\"wife\":null}\nalart(JSON.stringify(json));\n\n// \uc21c\ud658 \ucc38\uc870\uc2dc error\nlet room = {\n  number: 23\n};\nlet meetup = {\n  title: \"Conference\",\n  participants: [\"john\", \"ann\"]\n};\nmeetup.place = room;       // meetup\uc740 room\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4.\nroom.occupiedBy = meetup; // room\uc740 meetup\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4.\nJSON.stringify(meetup); // Error: Converting circular structure to JSON\n\n// \uc6d0\ud558\ub294 \uac12\ub9cc \ucd94\ucd9c\n// let json = JSON.stringify(value[, replacer, space])\nlet room = {\n  number: 23\n};\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room // meetup references room\n};\nroom.occupiedBy = meetup; // room references meetup\nalert( JSON.stringify(meetup, ['title', 'participants', 'place', 'name', 'number']) ); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}}\n\n// replacer \uc0ac\uc6a9\nalert( JSON.stringify(meetup, function replacer(key, value) {\n  return (key == 'occupiedBy') ? undefined : value;\n})); // {\"title\":\"Conference\",\"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\"place\":{\"number\":23}}\n\n// reviver \uc0ac\uc6a9\nlet str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}';\nlet meetup = JSON.parse(str);\nalert( meetup.date.getDate() ); // \uc5d0\ub7ec!\nmeetup = JSON.parse(str, function(key, value) {\n  if (key == 'date') return new Date(value);\n  return value;\n});\nalert( meetup.date.getDate() ); // 30",
            "title": "JSON (JavaScript Object Notation) Serialization"
        },
        {
            "location": "/javascript/#tojson-for-customized-serialization",
            "text": "let room = {\n  number: 23,\n  toJSON() {\n    return this.number;\n  }\n};\nlet meetup = {\n  title: \"Conference\",\n  room\n};\nalert( JSON.stringify(room) ); // 23\nalert( JSON.stringify(meetup) ); // {\"title\":\"Conference\",\"room\":23}",
            "title": "toJSON() for customized serialization"
        },
        {
            "location": "/javascript/#typeof",
            "text": "typeof X  \uc5f0\uc0b0\uc790\ub294 \uc778\uc218\uc758 \uc790\ub8cc\ud615\uc744 \ubb38\uc790\uc5f4\ub85c \ubc18\ud658  \uc790\ub8cc\ud615\uc5d0 \ub530\ub77c \ucc98\ub9ac \ubc29\uc2dd\uc744 \ub2e4\ub974\uac8c \ud560 \uacbd\uc6b0 \uc0ac\uc6a9  \ubcc0\uc218\uc758 \uc790\ub8cc\ud615 \ud655\uc778\uc5d0 \uc0ac\uc6a9  \uc5f0\uc0b0\uc790\ud615 \uc0ac\uc6a9:  typeof x  \ud568\uc218\ud615 \uc0ac\uc6a9:  typeof(x)   typeof undefined // \"undefined\"\ntypeof 0 // \"number\"\ntypeof 10n // \"bigint\"\ntypeof true // \"boolean\"\ntypeof \"foo\" // \"string\"\ntypeof Symbol(\"id\") // \"symbol\"\ntypeof Math // \"object\"  (1)\ntypeof null // \"object\"  (2)\ntypeof alert // \"function\"  (3)",
            "title": "typeof"
        },
        {
            "location": "/javascript/#browser-functions",
            "text": "alart : \uba54\uc2dc\uc9c0\uac00 \uc788\ub294 \uc791\uc740 \ucc3d, \ubaa8\ub2ec \ucc3d(modal window)\uc744 \ub744\uc6c0  prompt : \uba54\uc2dc\uc9c0\uc640 \uc785\ub825 \ud544\ub4dc(input field), \ud655\uc778(OK) \ubc0f \ucde8\uc18c(Cancel) \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0  confirm : \uc9c8\ubb38\uacfc \ud655\uc778 \ubc0f \ucde8\uc18c \ubc84\ud2bc\uc774 \uc788\ub294 \ubaa8\ub2ec \ucc3d\uc744 \ub744\uc6c0   let age = prompt('\ub098\uc774\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.', 100);\nalert(`\ub2f9\uc2e0\uc758 \ub098\uc774\ub294 ${age}\uc0b4 \uc785\ub2c8\ub2e4.`);\n\nlet isBoss = confirm(\"\ub2f9\uc2e0\uc774 \uc8fc\uc778\uc778\uac00\uc694?\");\nalert( isBoss );",
            "title": "Browser functions"
        },
        {
            "location": "/javascript/#type-conversion",
            "text": "// \ubb38\uc790\uc5f4 \ubcc0\ud658\nlet value = true; // boolean\ud615\nvalue = String(value); // \ubcc0\uc218 value\uc5d4 \ubb38\uc790\uc5f4 \"true\"\uac00 \uc800\uc7a5\nalert(typeof value); // string\n\n// \uc22b\uc790\ub85c \ubcc0\ud658\nlet str = \"123\";\nlet num = Number(str); // \ubb38\uc790\uc5f4 \"123\"\uc774 \uc22b\uc790 123\uc73c\ub85c \uba85\uc2dc\uc801 \ubcc0\ud658\nalert(typeof num); // number\nalert( \"6\" / \"2\" ); // 3, \ubb38\uc790\uc5f4\uc774 \uc22b\uc790\ud615\uc73c\ub85c \uc790\ub3d9\ubcc0\ud658\ub41c \ud6c4 \uc5f0\uc0b0\uc774 \uc218\ud589\n\nlet age = Number(\"\uc784\uc758\uc758 \ubb38\uc790\uc5f4 123\");\nalert(age); // NaN, \ud615 \ubcc0\ud658 \uc2e4\ud328\nalert( Number(\"   123   \") ); // 123\nalert( Number(\"123z\") );      // NaN (\"z\"\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\ub294 \ub370 \uc2e4\ud328\ud568)\nalert( Number(true) );        // 1\nalert( Number(false) );       // 0\n\n// boolean\uc73c\ub85c \ubcc0\ud658\nalert( Boolean(1) ); // \uc22b\uc790 1(true)\nalert( Boolean(0) ); // \uc22b\uc790 0(false)\nalert( Boolean(\"hello\") ); // \ubb38\uc790\uc5f4(true)\nalert( Boolean(\"\") ); // \ube48 \ubb38\uc790\uc5f4(false)\nalert( Boolean(NaN) ); // false\nalert( Boolean(undefined) ); // false\nalert( Boolean(null) ); // false",
            "title": "\ud615\ubcc0\ud658 (type conversion)"
        },
        {
            "location": "/javascript/#_14",
            "text": "+ : \ub367\uc148 \uc5f0\uc0b0\uc790  - : \ube84\uc148 \uc5f0\uc0b0\uc790  * : \uacf1\uc148 \uc5f0\uc0b0\uc790  / : \ub098\ub217\uc148 \uc5f0\uc0b0\uc790  % : \ub098\uba38\uc9c0 \uc5f0\uc0b0\uc790  ** : \uac70\ub4ed\uc81c\uacf1 \uc5f0\uc0b0\uc790  & : AND \ube44\ud2b8 \uc5f0\uc0b0\uc790  |  OR \ube44\ud2b8 \uc5f0\uc0b0\uc790  ^  XOR \ube44\ud2b8 \uc5f0\uc0b0\uc790  ~  NOT \ube44\ud2b8 \uc5f0\uc0b0\uc790  << : LEFT SHIFT  >> : RIGHT SHIFT  >>> : ZERO-FILL RIGHT SHIFT  || : OR \ub17c\ub9ac\uc5f0\uc0b0\uc790  && : AND \ub17c\ub9ac\uc5f0\uc0b0\uc790  ! : NOT \ub17c\ub9ac\uc5f0\uc0b0\uc790   // \uc22b\uc790\nalert( 5 % 2 ); // 5\ub97c 2\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 1\uc744 \ucd9c\ub825\nalert( 8 % 3 ); // 8\uc744 3\uc73c\ub85c \ub098\ub208 \ud6c4\uc758 \ub098\uba38\uc9c0\uc778 2\ub97c \ucd9c\ub825\nalert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)\nalert( 4 ** (1/2) ); // 2 (1/2 \uac70\ub4ed\uc81c\uacf1\uc740 \uc81c\uacf1\uadfc)\nalert( 8 ** (1/3) ); // 2 (1/3 \uac70\ub4ed\uc81c\uacf1\uc740 \uc138\uc81c\uacf1\uadfc)\n\n// \ubb38\uc790\uc5f4\nlet s = \"my\" + \"string\";\nalert(s); // mystring\nalert( 2 + '1' ); // \"21\"\nalert(2 + 2 + '1' ); // '221'\uc774 \uc544\ub2c8\ub77c '41'\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4.\nalert( 6 - '2' ); // 4, '2'\ub97c \uc22b\uc790\ub85c \ubc14\uafbc \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.\nalert( '6' / '2' ); // 3, \ub450 \ud53c\uc5f0\uc0b0\uc790\uac00 \uc22b\uc790\ub85c \ubc14\ub010 \ud6c4 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.\n// \uc22b\uc790\ud615\uc774 \uc544\ub2cc \ud53c\uc5f0\uc0b0\uc790\ub294 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud654\ud569\ub2c8\ub2e4.\nalert( +true ); // 1\nalert( +\"\" );   // 0\n\nlet apples = \"2\";\nlet oranges = \"3\";\nalert( apples + oranges ); // 23, \ubb38\uc790\uc5f4 + \uc5f0\uc0b0\nalert( +apples + +oranges ); // 5 \uc22b\uc790\ubcc0\ud658 -> \uc22b\uc790 + \uc5f0\uc0b0",
            "title": "\uc5f0\uc0b0\uc790"
        },
        {
            "location": "/javascript/#operator-precedence-table",
            "text": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",
            "title": "\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 Operator precedence table"
        },
        {
            "location": "/javascript/#_15",
            "text": "let a = 1;\nlet b = 2;\nlet c = 3 - (a = b + 1); // a = 3, c = 0\n\nalert( a ); // 3\nalert( c ); // 0\n\na = b = c = 2 + 2;\n\nalert( a ); // 4\nalert( b ); // 4\nalert( c ); // 4\n\nlet n = 2;\nn += 5; // n = n + 5\nn *= 2; // n = n * 2\nalert( n ); // 14\nn *= 3 + 5; // n *= 8\n\nlet counter = 2;\ncounter++; // counter = counter + 1\ncounter--; // counter = counter - 1\n\ncounter = 1;\nlet a = ++counter;\nalert(a); // 2\n\ncounter = 1;\na = counter++;\nalert(a); // 1",
            "title": "\ud560\ub2f9 \uc5f0\uc0b0\uc790"
        },
        {
            "location": "/javascript/#_16",
            "text": "// \ud55c \uc904\uc5d0\uc11c \uc138 \uac1c\uc758 \uc5f0\uc0b0\uc774 \uc218\ud589\ub428\nfor (a = 1, b = 3, c = a * b; a < 10; a++) {\n ...\n}",
            "title": "\uc27c\ud45c \uc5f0\uc0b0\uc790"
        },
        {
            "location": "/javascript/#_17",
            "text": "a  >  b  a  <  b  a  >=  b  a  <=  b  a  ==  b  a  !=  b",
            "title": "\ube44\uad50 \uc5f0\uc0b0\uc790"
        },
        {
            "location": "/javascript/#error",
            "text": "const err = new Error('\ud83d\udca3\ufe0f Something went wrong');\nconsole.log(err instanceof Error); // \ud83d\udc49\ufe0f true",
            "title": "error \ube44\uad50"
        },
        {
            "location": "/javascript/#_18",
            "text": "\uc790\ub9bf\uc218 \ubcc4\ub85c \uc0ac\uc804\uc21c\uc73c\ub85c \ube44\uad50; ascii\ub4f1\uc758 \ubb38\uc790 \uc21c\uc704  alert( 'Z' > 'A' ); // true\nalert( 'Glow' > 'Glee' ); // true\nalert( 'Bee' > 'Be' ); // true",
            "title": "\ubb38\uc790\uc5f4 \ube44\uad50"
        },
        {
            "location": "/javascript/#_19",
            "text": "\uc4f0\uc9c0 \uc54a\ub294\uac8c \uc88b\uc744 \ub4ef ..., \uba85\uc2dc\uc801\uc73c\ub85c \ubcc0\ud615\ud574 \uc0ac\uc6a9\ud558\uc2dc\ub77c.",
            "title": "\ub2e4\ub978\ud615\uac04\uc758 \ube44\uad50"
        },
        {
            "location": "/javascript/#strict-equality-operator",
            "text": "\uc790\ub8cc\ud615\uc758 \ub3d9\ub4f1 \uc5ec\ubd80\uae4c\uc9c0 \uac80\uc0ac; \ud53c\uc5f0\uc0b0\uc790 a\uc640 b\uc758 \ud615\uc774 \ub2e4\ub97c \uacbd\uc6b0 a === b\ub294 \uc989\uc2dc false\ub97c \ubc18\ud658\ud568",
            "title": "\uc77c\uce58 \uc5f0\uc0b0\uc790(strict equality operator) ==="
        },
        {
            "location": "/javascript/#null-undefined",
            "text": "alert( null === undefined ); // false\nalert( null == undefined ); // true\n\nalert( undefined > 0 ); // false (1)\nalert( undefined < 0 ); // false (2)\nalert( undefined == 0 ); // false (3)\n\nalert( null > 0 );  // (1) false\nalert( null == 0 ); // (2) false\nalert( null >= 0 ); // (3) true",
            "title": "null\uc774\ub098 undefined\uc640 \ube44\uad50\ud558\uae30"
        },
        {
            "location": "/javascript/#-short-circuit-evaluation",
            "text": "bash  \ub3d9\uc791\uacfc \ub3d9\uc77c  true || alert(\"not printed\");\nfalse || alert(\"printed\");",
            "title": "\ub2e8\ub77d \ud3c9\uac00 - short circuit evaluation"
        },
        {
            "location": "/javascript/#nullish-nullish-coalescing-operator",
            "text": "a ?? b \uc758 \ud3c9\uac00 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.  a\uac00  null \ub3c4 \uc544\ub2c8\uace0  undefined \ub3c4 \uc544\ub2c8\uba74  a \n\uadf8 \uc678\uc758 \uacbd\uc6b0\ub294  b  x = a ?? b // nullish \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5b4\uc4f8 \uc218 \uc788\uc74c.\nx = (a !== null && a !== undefined) ? a : b;\n\n// \uc0ac\uc6a9\uc608\nlet firstName = null;\nlet lastName = null;\nlet nickName = \"\ubc14\uc774\uc62c\ub81b\";\nalert(firstName ?? lastName ?? nickName ?? \"\uc775\uba85\uc758 \uc0ac\uc6a9\uc790\"); // \ubc14\uc774\uc62c\ub81b\n\n// '??'\uc640 '||'\uc758 \ucc28\uc774\nlet height = 0;\nalert(height || 100); // 100\nalert(height ?? 100); // 0",
            "title": "nullish \ubcd1\ud569 \uc5f0\uc0b0\uc790 (nullish coalescing operator) ??"
        },
        {
            "location": "/javascript/#_20",
            "text": "if ,  else if  and  else  ?   let year = prompt('ECMAScript-2015 \uba85\uc138\ub294 \uba87 \ub144\ub3c4\uc5d0 \ucd9c\ud310\ub418\uc5c8\uc744\uae4c\uc694?', '');\nif (year == 2015) {\n  alert( \"\uc815\ub2f5\uc785\ub2c8\ub2e4!\" );\n  alert( \"\uc544\uc8fc \ub611\ub611\ud558\uc2dc\ub124\uc694!\" );\n} else if (year > 2015) {\n  alert( '\uc22b\uc790\ub97c \uc880 \ub354 \ub0b4\ub824\ubcf4\uc138\uc694.' );\n} else {\n  alert( '\uc624\ub2f5\uc785\ub2c8\ub2e4!' );\n}\n\n// let result = condition ? value1 : value2;\nlet accessAllowed = (age > 18) ? true : false;\nlet message = (age < 3) ? '\uc544\uae30\uc57c \uc548\ub155?' :\n  (age < 18) ? '\uc548\ub155!' :\n  (age < 100) ? '\ud658\uc601\ud569\ub2c8\ub2e4!' :\n  '\ub098\uc774\uac00 \uc544\uc8fc \ub9ce\uc73c\uc2dc\uac70\ub098, \ub098\uc774\uac00 \uc544\ub2cc \uac12\uc744 \uc785\ub825 \ud558\uc168\uad70\uc694!';",
            "title": "\uc870\uac74\ubb38"
        },
        {
            "location": "/javascript/#_21",
            "text": "// while\nlet i = 0;\nwhile (i < 3) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n  alert( i );\n  i++;\n}\n\n// do while\nlet i = 0;\ndo {\n  alert( i );\n  i++;\n} while (i < 3);\n\n// for\nfor (let i = 0; i < 3; i++) { // 0, 1, 2\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n  alert(i);\n}\n\n// break\nlet sum = 0;\nwhile (true) {\n  let value = +prompt(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694.\", '');\n  if (!value) break; // (*)\n  sum += value;\n}\nalert( '\ud569\uacc4: ' + sum );\n\n// object property \uc21c\ud68c\nfor (key in object) {\n  // \uac01 \ud504\ub85c\ud37c\ud2f0 \ud0a4(key)\ub97c \uc774\uc6a9\ud558\uc5ec \ubcf8\ubb38(body)\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n}\n\n// for..of // array \uc21c\ud68c\nfor (let fruit of fruits) {\n}",
            "title": "\ubc18\ubcf5\ubb38"
        },
        {
            "location": "/javascript/#switchcase",
            "text": "switch/case\ubb38\uc758 \uc778\uc218\uc5d4 \uc5b4\ub5a4 \ud45c\ud604\uc2dd\uc774\ub4e0 \uc62c \uc218 \uc788\uc74c  let a = 2 + 2;\nlet b = 0;\nswitch (a) {\n  case b + 1:\n    break;\n  case 3:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4.' );\n    break;\n  case 4:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\uacfc \uc77c\uce58\ud569\ub2c8\ub2e4.' );\n    break;\n  case 5:\n  case 6:\n    alert( '\ube44\uad50\ud558\ub824\ub294 \uac12\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4.' );\n    break;\n  default:\n    alert( \"\uc5b4\ub5a4 \uac12\uc778\uc9c0 \ud30c\uc545\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\" );\n}",
            "title": "switch/case\ubb38"
        },
        {
            "location": "/javascript/#function",
            "text": "local variable: \ud568\uc218 \ub0b4 \uc120\uc5b8  \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc73c\uba74 \uadf8 \uac12\uc740  undefined  \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 \ud568\uc218\ub97c \ud2b9\ubcc4\ud55c \uc885\ub958\uc758 variable\ub85c \ucde8\uae09  nested function \uac00\ub2a5   // Function declaration\nlet userName = 'John'; // global variable\nfunction showMessage() {\n  let message = 'Hello, ' + userName; // local variable\n  alert(message);\n}\n\nshowMessage(); // Hello, John\n\n// Function arguments\nfunction showMessage(from, text) { // \uc778\uc218: from, text\n  alert(from + ': ' + text);\n}\nshowMessage(from, \"Hello\"); // *Ann*: Hello\nshowMessage(\"Ann\"); // Ann: undefined\n\n// Function arguments with default value\nfunction showMessage(from, text= \"no text given\") { // \uc778\uc218: from, text\n  alert(from + ': ' + text);\n}\nshowMessage(\"Ann\"); // Ann: undefined\n\n// Function return; return\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined\nfunction sum(a, b) {\n  return a + b;\n}\n\n// Function return \uc8fc\uc758 \uc0ac\ud56d\nfunction sum(a, b) {\n  return \n    a + b; // return\ud6c4 ; \uc790\ub3d9 \uc0bd\uc785\ub418\ubbc0\ub85c return\uc2dc \uac1c\ud589 \ud558\uc9c0 \uc54a\uae30\n}",
            "title": "Function"
        },
        {
            "location": "/javascript/#function-expression",
            "text": "let sayHi = function() {\n  alert( \"Hello\" );\n}; // \ud568\uc218 \ud45c\ud604\uc2dd\uc5d0\uc11c \uc138\ubbf8\ucf5c\ub860 \ud544\uc218\n\nalert( sayHi ); // \ud568\uc218 \ucf54\ub4dc \ucd9c\ub825\nalert( sayHi() ); // \ud568\uc218 \uc2e4\ud589!!",
            "title": "Function Expression (\ud568\uc218 \ud45c\ud604\uc2dd)"
        },
        {
            "location": "/javascript/#arrow-function",
            "text": "\ud568\uc218 \ucd95\uc57d (python lambda)  this\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc74c (\uc120\uc5b8\ub41c \uc0c1\uc704 object\uc758 this \uac00\uc838\ub2e4 \uc500)  arguments \uc5c6\uc74c  new\uc640 \ud568\uaed8 \ud638\ucd9c \ubd88\uac00\ub2a5  super\ub3c4 \uc5c6\uc74c  \uc790\uccb4 '\ucee8\ud14d\uc2a4\ud2b8\u2019\uac00 \uc5c6\ub294 \uc9e7\uc740 \ucf54\ub4dc\uc6a9   let func = (arg1, arg2, ...argN) => expression\n\n// e.g.\nlet sum = (a, b) => a + b;\nlet double = n => n * 2; // let double = function(n) { return n * 2 }\nlet sayHi = () => alert(\"\uc548\ub155\ud558\uc138\uc694!\");\n\nlet age = prompt(\"\ub098\uc774\ub97c \uc54c\ub824\uc8fc\uc138\uc694.\", 18);\nlet welcome = (age < 18) ?\n  () => alert('\uc548\ub155') :\n  () => alert(\"\uc548\ub155\ud558\uc138\uc694!\");\nwelcome();\n\n// example 1\nlet group = {\n  title: \"1\ubaa8\ub460\",\n  students: [\"\ubcf4\ub77c\", \"\ud638\uc9c4\", \"\uc9c0\ubbfc\"],\n\n  showList() {\n    this.students.forEach(\n      student => alert(this.title + ': ' + student)\n    );\n  }\n};\n\ngroup.showList();\n\n// example 2\nfunction defer(f, ms) {\n  return function() {\n    setTimeout(() => f.apply(this, arguments), ms)\n  };\n}\n\nfunction sayHi(who) {\n  alert('\uc548\ub155, ' + who);\n}\n\nlet sayHiDeferred = defer(sayHi, 2000);\nsayHiDeferred(\"\ucca0\uc218\"); // 2\ucd08 \ud6c4 \"\uc548\ub155, \ucca0\uc218\"\uac00 \ucd9c\ub825\ub429\ub2c8\ub2e4.",
            "title": "Arrow function (\ud654\uc0b4\ud45c \ud568\uc218)"
        },
        {
            "location": "/javascript/#debugger",
            "text": "\ucf54\ub4dc\uc5d0  debugger  \uc0bd\uc785\uc2dc breakpoint\uc640 \ub3d9\uc77c\ud55c \ub3d9\uc791  function hello(name) {\n  let phrase = `Hello, ${name}!`;\n  debugger;  // <-- \uc5ec\uae30\uc11c \uc2e4\ud589\uc774 \uba48\ucda5\ub2c8\ub2e4.\n  say(phrase);\n}",
            "title": "debugger"
        },
        {
            "location": "/javascript/#consolelog",
            "text": "// \ucf58\uc194\ucc3d\uc744 \uc5f4\uc5b4 \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uc138\uc694.\nfor (let i = 0; i < 5; i++) {\n  console.log(\"\uc22b\uc790\", i);\n}",
            "title": "console.log"
        },
        {
            "location": "/javascript/#function-property",
            "text": "name  length : function parameter \uac2f\uc218  function property \ucd94\uac00 \uac00\ub2a5\ud568   function sayHi() {\n  alert(\"Hi\");\n}\nalert(sayHi.name); // sayHi\n\nfunction f(sayHi = function() {}) {\n  alert(sayHi.name); // sayHi (\uc774\ub984\uc774 \uc788\ub124\uc694!)\n}\nf();\n\n// property \ucd94\uac00\nfunction sayHi() {\n  alert(\"Hi\");\n  sayHi.counter++;\n}\nsayHi.counter = 0; // \ucd08\uae43\uac12\nsayHi(); // Hi\nsayHi(); // Hi\nalert( `\ud638\ucd9c \ud69f\uc218: ${sayHi.counter}\ud68c` ); // \ud638\ucd9c \ud69f\uc218: 2\ud68c",
            "title": "Function property"
        },
        {
            "location": "/javascript/#variable-arguments",
            "text": "...  \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uc778\uc790\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4ec  function ask(question, ...handlers) {\n  let isYes = confirm(question);\n  for(let handler of handlers) {\n    if (handler.length == 0) {\n      if (isYes) handler();\n    } else {\n      handler(isYes);\n    }\n  }\n}",
            "title": "variable arguments"
        },
        {
            "location": "/javascript/#input-argument-spreading",
            "text": "... \uc73c\ub85c array argument\ub97c \ud480\uc5b4 \uc785\ub825\ud560 \uc218 \uc788\uc74c  let arr1 = [1, -2, 3, 4];\nlet arr2 = [8, 3, -8, 1];\nalert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25  \uc774\ub7ec\ud55c spreading \uae30\ubc95\uc740 array \uc120\uc5b8\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\uac00\ub2a5  let arr = [3, 5, 1];\nlet arr2 = [8, 9, 15];\nlet merged = [0, ...arr, 2, ...arr2];\nalert(merged); // 0,3,5,1,2,8,9,15 (0, arr, 2, arr2 \uc21c\uc11c\ub85c \ud569\uccd0\uc9d1\ub2c8\ub2e4.)",
            "title": "Input argument spreading"
        },
        {
            "location": "/javascript/#closure-and-lexical-scoping",
            "text": "https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures   javascript \ucf54\ub4dc \ube14\ub7ed \ub0b4\uc5d0\uc11c \ubcc0\uc218\uc640 \ud568\uc218\uc758 \uc720\ud6a8\ubc94\uc704\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc744 \uac00\uc9d0   javascript\uc5d0\uc11c \ud568\uc218\ub294 \ucf54\ub4dc \ube14\ub85d\uc744 \uac00\uc9c0\uba70, \ub3d9\uc791\uc744 \uc218\ud589\ud558\ub294 \ud2b9\uc218\ud55c \ubcc0\uc218  \ud568\uc218, \ucf54\ub4dc\ube14\ub85d, \uac1d\uccb4, \uc2a4\ud06c\ub9bd\ud2b8\ub4e4\uc740 \uac01\uc790 Lexical Environment\ub77c\ub294 \ub0b4\ubd80 \uac1d\uccb4\ub97c \uac00\uc9d0  javascript\ub294 \uc120\uc5b8\ub41c \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc774 Lexical Env\uc5d0 property\ub85c \uc800\uc7a5   function init() {\n  var name = \"Mozilla\"; // name\uc740 init\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c \uc9c0\uc5ed \ubcc0\uc218\uc774\ub2e4.\n  function displayName() { // displayName() \uc740 \ub0b4\ubd80 \ud568\uc218\uc774\uba70, \ud074\ub85c\uc800\ub2e4.\n    alert(name); // \ubd80\ubaa8 \ud568\uc218\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n  }\n  displayName();\n}\ninit();   \uac01 Lexical Env\ub294 \uc678\ubd80 (\uc0c1\uc704) Lexical Env\uc5d0 \ub300\ud55c reference\ub97c \uac00\uc9d0 (e.g. \uc704  displayName() \uc758 \uc678\ubd80 Lexical Env\ub294  init() )  \uc704\uc5d0\uc11c displayName()\uacfc \uac19\uc774 \ub9ac\ud134\ub418\ub294 \ud568\uc218\ub97c  closure \ub77c \ud558\uba70,   closure \ub294 \ubaa8\ud568\uc218 init()\uc758 Lexical Env\ub97c \ucc38\uc870\ud560 \uc218 \uc788\uc74c.  closure \ub97c \uc0ac\uc6a9\ud574 javascript\uc5d0\uc11c\ub294 private method\ub97c \uad6c\ud604\ud568   \uc544\ub798 \ucf54\ub4dc\ub294 \ud504\ub77c\uc774\ube57 \ud568\uc218\uc640 \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\ub294 \ud37c\ube14\ub9ad \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uc774\ub807\uac8c \ud074\ub85c\uc800\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744  \ubaa8\ub4c8 \ud328\ud134 \uc774\ub77c \ud55c\ub2e4.  var counter = (function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  };\n})();\n\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1",
            "title": "Closure and Lexical scoping \ud074\ub85c\uc800\uc640 \uc5b4\ud718 \ubc94\uc704 \uc9c0\uc815"
        },
        {
            "location": "/javascript/#new-function",
            "text": "new \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \uc0dd\uc131  \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub294 string\uc73c\ub85c \ud45c\ud604\ub41c \uc790\uc2e0\uc758 \ucf54\ub4dc \uc2e4\ud589\ud558\ub294 expr  \uc0ac\uc6a9\uc608) \uc678\ubd80\uc5d0\uc11c \uc218\uc2e0\ud55c string function\uc758 \uc2e4\ud589   let sum = new Function('a', 'b', 'return a + b');\nalert( sum(1, 2) ); // 3\n\nlet sayHi = new Function('alert(\"Hello\")');\nsayHi(); // Hello",
            "title": "new Function"
        },
        {
            "location": "/javascript/#time-scheduling-settimeout-setinterval",
            "text": "// \uc124\uc815\nlet timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)\nlet timerId = setInterval(func|code, [interval], [arg1], [arg2], ...)\n\n// \ucde8\uc18c\nclearTimeout(timerId);  setTimeout \uc758 delay\uac00 0\uc77c \uacbd\uc6b0, \ucd5c\ub300\ud55c \ube68\ub9ac ..",
            "title": "Time scheduling - setTimeout, setInterval"
        },
        {
            "location": "/javascript/#testing-mocha",
            "text": "BDD (Behavior Driven Development)\ub294 \ud14c\uc2a4\ud2b8(test), \ubb38\uc11c(documentation), \uc608\uc2dc(example)\ub97c \ud55c\ub370 \ubaa8\uc544\ub193\uc740 \uac1c\ub150  function pow(x, n) {\n    if (n < 0) return NaN;\n    if (Math.round(n) != n) return NaN;\n\n    let p = 1\n    for (let i = 0; i < n; i++) {\n        p = x * p ;\n    }\n    return p;\n}\n\n// ...\n\ndescribe(\"pow\", function() {\n  it(\"\uc8fc\uc5b4\uc9c4 \uc22b\uc790\uc758 n \uc81c\uacf1\", function() {\n    assert.equal(pow(2, 3), 8);\n  });\n});\n\n// nested testing\ndescribe(\"pow.2\", function () {\n  describe(\"case 1\", function () {\n    before(() => console.log(\"testing starts\"));\n    after(() => console.log(\"testing ends\"));\n\n    beforeEach(() => console.log(\"each starts\"));\n    afterEach(() => console.log(\"each ends\"));\n\n    it(\"10^10\", function () {\n        assert.equal(pow(10, 10), 10000000000);\n    });\n    it(\"10^5\", function () {\n        assert.equal(pow(10, 6), 1000000);\n    });\n  })\n})",
            "title": "Testing - Mocha"
        },
        {
            "location": "/javascript/#chai-assertion-logic",
            "text": "assert.equal(value1, value2) \u2013 value1\uacfc value2\uc758 \ub3d9\ub4f1\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 == value2).  assert.strictEqual(value1, value2) \u2013 value1\uacfc value2\uc758 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4(value1 === value2).  assert.notEqual, assert.notStrictEqual \u2013 \ube44 \ub3d9\ub4f1\uc131, \ube44 \uc77c\uce58\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.  assert.isTrue(value) \u2013 value\uac00 true\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === true).  assert.isFalse(value) \u2013 value\uac00 false\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4(value === false).",
            "title": "chai (assertion logic)"
        },
        {
            "location": "/javascript/#destructuring-assignment",
            "text": "\uc6d0 \uc790\ub8cc\uc758 \uc694\uc18c\ub97c \ubd84\ud574, \ub2e4\ub978 \uad6c\uc870\ub85c \ubcc0\uacbd\ud558\uae30 \uc26c\uc6c0  let {prop : varName = default, ...rest} = object  let [item1 = default, item2, ...rest] = array  ... \ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30",
            "title": "\uad6c\uc870 \ubd84\ud574 \ud560\ub2f9 (destructuring assignment)"
        },
        {
            "location": "/javascript/#_22",
            "text": "// \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 1)\nlet arr = [\"Bora\", \"Lee\"]\nlet [firstName, surname] = arr;\nalert(firstName); // Bora\nalert(surname);  // Lee\n\n// \ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9 2)\nlet [firstName, surname] = \"Bora Lee\".split(' ');\n\n// \uc694\uc18c \uc0dd\ub7b5\nlet [firstName, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nalert( title ); // Consul\n\n// iterable\ud55c \uc790\ub8cc\uad6c\uc870\ub294 \ubaa8\ub450 \uac00\ub2a5\nlet [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"]\nlet [one, two, three] = new Set([1, 2, 3]);\n\nlet user = {};\n[user.name, user.surname] = \"Bora Lee\".split(' ');\nalert(user.name); // Bora\n\nlet user = {\n  name: \"John\",\n  age: 30\n};\n// \uac1d\uccb4\uc758 \ud0a4\uc640 \uac12 \uc21c\ud68c\ud558\uae30\nfor (let [key, value] of Object.entries(user)) {\n  alert(`${key}:${value}`); // name:John, age:30\uc774 \ucc28\ub840\ub300\ub85c \ucd9c\ub825\n}\n\n// map\uc5d0\uc11c\uc758 destructuring assignment\nlet user = new Map();\nuser.set(\"name\", \"John\");\nuser.set(\"age\", \"30\");\nfor (let [key, value] of user) {\n  alert(`${key}:${value}`); // name:John, then age:30\n}\n\n// destructuring assignment \uc0ac\uc6a9\ud55c \uad50\ud658\nlet guest = \"Jane\";\nlet admin = \"Pete\";\n// \ubcc0\uc218 guest\uc5d4 Pete, \ubcc0\uc218 admin\uc5d4 Jane\uc774 \uc800\uc7a5\ub418\ub3c4\ub85d \uac12\uc744 \uad50\ud658\ud568\n[guest, admin] = [admin, guest];\nalert(`${guest} ${admin}`); // Pete Jane(\uac12 \uad50\ud658\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc774\ub904\uc84c\uc2b5\ub2c8\ub2e4!)\n\n// '...'\ub85c \ub098\uba38\uc9c0 \uc694\uc18c \uac00\uc838\uc624\uae30, rest\ub294 \ubc30\uc5f4\nlet [name1, name2, ...rest] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nalert(name1); // Julius\nalert(name2); // Caesar\nalert(rest[0]); // Consul\nalert(rest[1]); // of the Roman Republic\nalert(rest.length); // 2\n\n// \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0 undefined\nlet [firstName, surname] = [];\nalert(firstName); // undefined\nalert(surname); // undefined\n\n// default \uac12 \uc124\uc815\nlet [name = \"Guest\", surname = \"Anonymous\"] = [\"Julius\"];\nalert(name);    // Julius (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12)\nalert(surname); // Anonymous (\uae30\ubcf8\uac12)\n\n// name\uc758 prompt\ub9cc \uc2e4\ud589\ub428\nlet [surname = prompt('\uc131\uc744 \uc785\ub825\ud558\uc138\uc694.'), name = prompt('\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694.')] = [\"\uae40\"];\nalert(surname); // \uae40 (\ubc30\uc5f4\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12)\nalert(name);    // prompt\uc5d0\uc11c \ubc1b\uc544\uc628 \uac12",
            "title": "\ubc30\uc5f4 \ubd84\ud574 \ud560\ub2f9"
        },
        {
            "location": "/javascript/#_23",
            "text": "// \uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\nlet {title, width, height} = options;\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n\n// let {...} \uc548\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uc5b4\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud568\nlet {height, width, title} = { title: \"Menu\", height: 200, width: 100 }\n\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n// { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 }\nlet {width: w, height: h, title} = options;\n// width -> w\n// height -> h\n// title -> title\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n\n// default \uc124\uc815\nlet options = {\n  title: \"Menu\"\n};\nlet {width = 100, height = 200, title} = options;\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n\n// { \uac1d\uccb4 \ud504\ub85c\ud37c\ud2f0: \ubaa9\ud45c \ubcc0\uc218 } + default\nlet options = {\n  title: \"Menu\"\n};\nlet {width: w = 100, height: h = 200, title} = options;\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n\n// title\ub9cc \ubcc0\uc218\ub85c \ubf51\uc544\ub0b4\uae30\nlet { title } = options;\n\n// title = \uc774\ub984\uc774 title\uc778 \ud504\ub85c\ud37c\ud2f0\n// rest = \ub098\uba38\uc9c0 \ud504\ub85c\ud37c\ud2f0\ub4e4\nlet {title, ...rest} = options;\n// title\uc5d4 \"Menu\", rest\uc5d4 {height: 200, width: 100}\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4.\nalert(rest.height);  // 200\nalert(rest.width);   // 100\n\nlet title, width, height;\n{title, width, height} = {title: \"Menu\", width: 200, height: 100}; // SyntaxError: Unexpected token '=' \uc774\ub77c\ub294 \uc5d0\ub7ec\uac00 \uc544\ub7ab\uc904\uc5d0\uc11c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.\n({title, width, height} = {title: \"Menu\", width: 200, height: 100}); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.",
            "title": "\uac1d\uccb4 \ubd84\ud574 \ud560\ub2f9"
        },
        {
            "location": "/javascript/#nested-destructuring",
            "text": "let options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true\n};\n\n// \ucf54\ub4dc\ub97c \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0 \uc791\uc131\ud574 \uc758\ub3c4\ud558\ub294 \ubc14\ub97c \uba85\ud655\ud788 \ub4dc\ub7ec\ub0c4\nlet {\n  size: { // size\ub294 \uc5ec\uae30,\n    width,\n    height\n  },\n  items: [item1, item2], // items\ub294 \uc5ec\uae30\uc5d0 \ud560\ub2f9\ud568\n  title = \"Menu\" // \ubd84\ud574\ud558\ub824\ub294 \uac1d\uccb4\uc5d0 title \ud504\ub85c\ud37c\ud2f0\uac00 \uc5c6\uc73c\ubbc0\ub85c \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud568\n} = options;\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\nalert(item1);  // Cake\nalert(item2);  // Donut",
            "title": "\uc911\ucca9 \uad6c\uc870 \ubd84\ud574(nested destructuring)"
        },
        {
            "location": "/javascript/#function-argument-with-destructuring-assignment",
            "text": "let options = {\n  title: \"My menu\",\n  items: [\"Item1\", \"Item2\"]\n};\nfunction showMenu({\n  title = \"Untitled\",\n  width: w = 100,  // width\ub294 w\uc5d0,\n  height: h = 200, // height\ub294 h\uc5d0,\n  items: [item1, item2] // items\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub294 item1\uc5d0, \ub450 \ubc88\uc9f8 \uc694\uc18c\ub294 item2\uc5d0 \ud560\ub2f9\ud568\n}) {\n  alert( `${title} ${w} ${h}` ); // My Menu 100 200\n  alert( item1 ); // Item1\n  alert( item2 ); // Item2\n}\nshowMenu(options);\n\nshowMenu({}); // \ubaa8\ub4e0 \uc778\uc218\uc5d0 \uae30\ubcf8\uac12\uc774 \ud560\ub2f9\ub429\ub2c8\ub2e4.\nshowMenu(); // \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nfunction showMenu({ title = \"Menu\", width = 100, height = 200 } = {}) {\n  alert( `${title} ${width} ${height}` );\n}\nshowMenu(); // Menu 100 200 // \uc5d0\ub7ec \uc548\ub0a8",
            "title": "function argument with destructuring assignment"
        },
        {
            "location": "/javascript/#promise",
            "text": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.    Producing code\uc640 Consuming code \uc0ac\uc774\uc758 \ube44\ub3d9\uae30\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uc7a5\uce58  \ud504\ub77c\ubbf8\uc2a4\uac00 \ub300\uae30 \uc0c1\ud0dc\uc77c \ub54c, .then/catch/finally \ud578\ub4e4\ub7ec\ub294 \ud504\ub77c\ubbf8\uc2a4 \uc644\ub8cc\ub97c \ub300\uae30  \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ubbf8 \ucc98\ub9ac\uc0c1\ud0dc\ub77c\uba74 \ud578\ub4e4\ub7ec\uac00 \uc989\uac01 \uc2e4\ud589     \ub0b4\ubd80\uc801\uc73c\ub85c  state ,  result  \uc815\ubcf4 \uc720\uc9c0  executor \ud568\uc218\uc5d0\uc11c  resolve(Object)  \ud638\ucd9c\uc2dc  state  =>  fulfiled  executor \ud568\uc218\uc5d0\uc11c  reject(Error)  \ud638\ucd9c\uc2dc  state  =>  rejected  \ud55c\ubc88  resolve  \ub610\ub294  reject  \ud638\ucd9c\ub418\uba74, \uc7ac\uc2e4\ud589 X   let promise = new Promise(function(resolve, reject) {\n  // \ud504\ub77c\ubbf8\uc2a4\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uba74 executor \ud568\uc218\ub294 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\n  // 1\ucd08 \ub4a4\uc5d0 \uc77c\uc774 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\ub2e4\ub294 \uc2e0\ud638\uac00 \uc804\ub2ec\ub418\uba74\uc11c result\ub294 'done'\n  setTimeout(() => resolve(\"done\"), 1000);\n  // or\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});",
            "title": "Promise"
        },
        {
            "location": "/javascript/#then",
            "text": "Promise\uac00 \uc644\ub8cc\ub418\uae38 \ub300\uae30\ud558\uace0 resolve, reject\ub97c \uc218\ud589  let promise = new Promise(function(resolve, reject) {\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});\n\n// reject \ud568\uc218\ub294 .then\uc758 \ub450 \ubc88\uc9f8 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.\npromise.then(\n  result => alert(result), // \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\n  error => alert(error) // 1\ucd08 \ud6c4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\"\ub97c \ucd9c\ub825\n);",
            "title": ".then"
        },
        {
            "location": "/javascript/#catch",
            "text": ".catch(f) \uacfc  .then(null,f)  \ub3d9\uc77c\ud55c \ub3d9\uc791\uc744 \uc218\ud589\ud558\uba70, \uc5d0\ub7ec\ub97c \ucc98\ub9ac  let promise = new Promise((resolve, reject) => {\n  setTimeout(() => reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\")), 1000);\n});\n\n// .catch(f)\ub294 promise.then(null, f)\uacfc \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4\npromise.catch(alert); // 1\ucd08 \ub4a4 \"Error: \uc5d0\ub7ec \ubc1c\uc0dd!\" \ucd9c\ub825",
            "title": ".catch"
        },
        {
            "location": "/javascript/#finally",
            "text": "\uc5d0\ub7ec \uc720\ubb34\uc640 \uad00\uacc4\uc5c6\uc774 \uc2e4\ud589\ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589  new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"\uacb0\uacfc\"), 2000)\n})\n  .finally(() => alert(\"\ud504\ub77c\ubbf8\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"))\n  .then(result => alert(result)); // <-- .then\uc5d0\uc11c result\ub97c \ub2e4\ub8f0 \uc218 \uc788\uc74c",
            "title": ".finally"
        },
        {
            "location": "/javascript/#promise-chaining",
            "text": "Promise chaining\uc774\ub780 promise \ub300\uae30\ud568\uc218\ub4e4\uc758 \uc5f0\uc1c4 \uc2e4\ud589\uc744 \uc758\ubbf8\ud55c\ub2e4.\n\uc544\ub798\uc640 \uac19\uc774 \ud578\ub4e4\ub7ec\ub97c \ub4f1\ub85d\ud588\uc744 \uacbd\uc6b0\uc5d0\ub9cc Promise \ub300\uae30\ud568\uc218\ub4e4\uc744 \uc5f0\uc18d\uc801 \uc2e4\ud589\ub428  new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(1), 1000); // (*)\n}).then(function(result) { // (**)\n  alert(result); // 1\n  return result * 2;\n}).then(function(result) { // (***)\n  alert(result); // 2\n  return result * 2;\n}).then(function(result) {\n  alert(result); // 4\n  return result * 2;\n});  Promise chaining\uc5d0\uc11c \uc2e0\uaddc promise\ub97c \ubc18\ud658\ud558\uc5ec chaining\ud560 \uc218 \uc788\uc74c.  new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n}).then(function(result) {\n  alert(result); // 1\n  return new Promise((resolve, reject) => { // (*)\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n}).then(function(result) { // (**)\n  alert(result); // 2\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n}).then(function(result) {\n  alert(result); // 4\n});",
            "title": "Promise chaining"
        },
        {
            "location": "/javascript/#thenable",
            "text": ".then \uc774\ub77c\ub294 \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\ub294 \ubaa8\ub450 thenable\uac1d\uccb4\ub77c\uace0 \ubd80\ub974\uba70, promise\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud568.  class Thenable {\n  constructor(num) {\n    this.num = num;\n  }\n  then(resolve, reject) {\n    alert(resolve); // function() { \ub124\uc774\ud2f0\ube0c \ucf54\ub4dc }\n    // 1\ucd08 \ud6c4 this.num*2\uc640 \ud568\uaed8 \uc774\ud589\ub428\n    setTimeout(() => resolve(this.num * 2), 1000); // (**)\n  }\n}\n\nnew Promise(resolve => resolve(1))\n  .then(result => {\n    return new Thenable(result); // (*)\n  })\n  .then(alert); // 1000\ubc00\ub9ac \ucd08 \ud6c4 2\ub97c \ubcf4\uc5ec\uc90c",
            "title": "thenable"
        },
        {
            "location": "/javascript/#fetch",
            "text": "\ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucd94\uac00 \uc815\ubcf4\ub97c \ubc1b\uc544\uc624\ub294 \ub3d9\uc791\uc744 \uc218\ud589\ud568; javascript \ub0b4\uc5d0\uc11c promise\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub3d9\uc791\ud568   AJAX(Asynchronous JavaScript And XML)  https://ko.javascript.info/fetch   let promise = fetch(url, [options]);   url \u2013 \uc811\uadfc\ud558\uace0\uc790 \ud558\ub294 URL  options \u2013 \uc120\ud0dd \ub9e4\uac1c\ubcc0\uc218, method\ub098 header \ub4f1\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc74c   let response = await fetch(url);\n\nif (response.ok) { // HTTP \uc0c1\ud0dc \ucf54\ub4dc\uac00 200~299\uc77c \uacbd\uc6b0\n  // \uc751\ub2f5 \ubaac\ubb38\uc744 \ubc1b\uc2b5\ub2c8\ub2e4(\uad00\ub828 \uba54\uc11c\ub4dc\ub294 \uc544\ub798\uc5d0\uc11c \uc124\uba85).\n  let json = await response.json();\n} else {\n  alert(\"HTTP-Error: \" + response.status);\n}",
            "title": "fetch"
        },
        {
            "location": "/javascript/#throw-an-error-in-promise",
            "text": "// case 1) Throw an error\nnew Promise((resolve, reject) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 2) Throw an error\nnew Promise((resolve, reject) => {\n  reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"));\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 3) Throw an error\nnew Promise((resolve, reject) => {\n  resolve(\"ok\");\n}).then((result) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"); // \ud504\ub77c\ubbf8\uc2a4\uac00 \uac70\ubd80\ub428\n}).catch(alert); // Error: \uc5d0\ub7ec \ubc1c\uc0dd!\n\n// case 4)\n// \uc2e4\ud589 \uc21c\uc11c: catch -> then\nnew Promise((resolve, reject) => {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}).catch(function(error) {\n  alert(\"\uc5d0\ub7ec\uac00 \uc798 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\uc774 \uc774\uc5b4\uc9d1\ub2c8\ub2e4.\");\n}).then(() => alert(\"\ub2e4\uc74c \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub429\ub2c8\ub2e4.\"));",
            "title": "Throw an error in promise"
        },
        {
            "location": "/javascript/#mutilple-promises",
            "text": "\ub2e4\uc218\uc758 promise\uc5d0 \ub300\ud55c \ub2e8\uc77c handler \ucc98\ub9ac  Promise.all([\n  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1\n  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2\n  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3\n]).then(alert); // \ud504\ub77c\ubbf8\uc2a4 \uc804\uccb4\uac00 \ucc98\ub9ac\ub418\uba74 1, 2, 3\uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. \uac01 \ud504\ub77c\ubbf8\uc2a4\ub294 \ubc30\uc5f4\uc744 \uad6c\uc131\ud558\ub294 \uc694\uc18c\uac00 \ub429\ub2c8\ub2e4.\n\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'https://api.github.com/users/jeresig'\n];\n\n// fetch\ub97c \uc0ac\uc6a9\ud574 url\uc744 \ud504\ub77c\ubbf8\uc2a4\ub85c \ub9e4\ud551\ud569\ub2c8\ub2e4.\nlet requests = urls.map(url => fetch(url));\n// Promise.all\uc740 \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4.\nPromise.all(requests)\n  .then(responses => responses.forEach(\n    response => alert(`${response.url}: ${response.status}`)\n  ));   Promise.all : \uc5b4\ub290 \ud558\ub098\uc758 promise\uac00 \uac70\uc808\ub418\uba74, reject handler \uc218\ud589  Promise.allSettled : \ubaa8\ub4e0 promise \ucc98\ub9ac \ub300\uae30, \uac01 promise \uc0c1\ud0dc \ubc18\ud658  \uc751\ub2f5\uc774 \uc131\uacf5\ud560 \uacbd\uc6b0 \u2013  {status:\"fulfilled\", value:result}  \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \u2013  {status:\"rejected\", reason:error}  Promise.race : \uac00\uc7a5 \uba3c\uc800 \ucc98\ub9ac\ub41c promise \uacb0\uacfc \ubc18\ud658  Promise.resolve/reject : \ub9ce\uc774 \uc548\uc4f0\uc784",
            "title": "Mutilple promises"
        },
        {
            "location": "/javascript/#promisify",
            "text": "function promisify(f) {\n  return function (...args) { // \ub798\ud37c \ud568\uc218\ub97c \ubc18\ud658\ud568\n    return new Promise((resolve, reject) => {\n      function callback(err, result) { // f\uc5d0 \uc0ac\uc6a9\ud560 \ucee4\uc2a4\ud140 \ucf5c\ubc31\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      }\n\n      args.push(callback); // \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ucee4\uc2a4\ud140 \ucf5c\ubc31\uc744 \ud568\uc218 f\uc758 \uc778\uc218 \ub05d\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\n      f.call(this, ...args); // \uae30\uc874 \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\n    });\n  };\n};\n\nlet loadScriptPromise = promisify(loadScript);\nloadScriptPromise(...).then(...);",
            "title": "promisify"
        },
        {
            "location": "/javascript/#microtask-queue",
            "text": "javascript\uc758 \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c internal work queue\ub85c \uc644\ub8cc\ub41c promise\uc758 handler\ub97c \ucc98\ub9ac\ud568   FIFO, first-in-first-out  \uc2e4\ud589\ub420 \uac83\uc774 \uc5c6\uc744 \ub300 task queue\uac00 \uc791\ub3d9\ub428",
            "title": "Microtask queue"
        },
        {
            "location": "/javascript/#async-and-await",
            "text": "async \uac00 \ud568\uc218 \uc55e\uc5d0 \ubd99\uc73c\uba74, \ud568\uc218\ub294 resolved promise\ub97c \ubc18\ud658  async function f() {\n  // return Promise.resolve(1);\uc640 \ub3d9\uc77c\ud55c \uacb0\uacfc\n  return 1;\n}\nf().then(alert); // 1   await \uc740  async  \ud568\uc218 \ub0b4\uc5d0\uc11c promise\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\ud55c\ub2e4.  await \uc740 \uc77c\ubc18\ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ubd88\uac00  promise chaining \ub300\uccb4 \uc0ac\uc6a9  await \ub294  thenable  \uac1d\uccb4\ub3c4 \uc218\uc2e0  class\uc5d0  await  \uc120\uc5b8 \uac00\ub2a5   async function f() {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\uc644\ub8cc!\"), 1000)\n  });\n  let result = await promise; // \ud504\ub77c\ubbf8\uc2a4\uac00 \uc774\ud589\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bc (*)\n  alert(result); // \"\uc644\ub8cc!\"\n}\nf();  (async () => {\n  let response = await fetch('/article/promise-chaining/user.json');\n  let user = await response.json();\n  ...\n})();  // .then \ub300\uc2e0 await \uc0ac\uc6a9\nasync function showAvatar() {\n  // JSON \uc77d\uae30\n  let response = await fetch('/article/promise-chaining/user.json');\n  let user = await response.json();\n\n  // github \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc77d\uae30\n  let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);\n  let githubUser = await githubResponse.json();\n\n  // \uc544\ubc14\ud0c0 \ubcf4\uc5ec\uc8fc\uae30\n  let img = document.createElement('img');\n  img.src = githubUser.avatar_url;\n  img.className = \"promise-avatar-example\";\n  document.body.append(img);\n\n  // 3\ucd08 \ub300\uae30\n  await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n  img.remove();\n  return githubUser;\n}\nshowAvatar();",
            "title": "Async and Await"
        },
        {
            "location": "/javascript/#async",
            "text": "class Waiter {\n  async wait() {\n    return await Promise.resolve(1);\n  }\n}\nnew Waiter()\n  .wait()\n  .then(alert); // 1",
            "title": "async \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc"
        },
        {
            "location": "/javascript/#async-await-error-handling",
            "text": "// case 1\nasync function f() {\n  await Promise.reject(new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\"));\n}\n// case 2\nasync function f() {\n  throw new Error(\"\uc5d0\ub7ec \ubc1c\uc0dd!\");\n}\n\n// case 3 - try..catch\nasync function f() {\n  try {\n    let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url');\n    let user = await response.json();\n  } catch(err) {\n    // fetch\uc640 response.json\uc5d0\uc11c \ubc1c\ud589\ud55c \uc5d0\ub7ec \ubaa8\ub450\ub97c \uc5ec\uae30\uc11c \uc7a1\uc2b5\ub2c8\ub2e4.\n    alert(err);\n  }\n}\nf();\n\n// case 4\nasync function f() {\n  let response = await fetch('http://\uc720\ud6a8\ud558\uc9c0-\uc54a\uc740-url');\n}\nf().catch(alert); // TypeError: failed to fetch // (*)\n\n// case 5 - await Promise.all\n// \ud504\ub77c\ubbf8\uc2a4 \ucc98\ub9ac \uacb0\uacfc\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4.\nlet results = await Promise.all([\n  fetch(url1),\n  fetch(url2),\n  ...\n]);",
            "title": "async &amp; await error handling"
        },
        {
            "location": "/javascript/#file-readwrite",
            "text": "https://velog.io/@93jm/Node.js-File-System%EC%9D%98-%EC%82%AC%EC%9A%A9%EA%B3%BC-async-await-%EC%B2%98%EB%A6%AC",
            "title": "File Read/Write"
        },
        {
            "location": "/javascript/#decorator-wrapping-function",
            "text": "function slow(x) {\n  // CPU \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\uc774 \uc5ec\uae30\uc5d0 \uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n  alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`);\n  return x;\n}\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {    // cache\uc5d0 \ud574\ub2f9 \ud0a4\uac00 \uc788\uc73c\uba74\n      return cache.get(x); // \ub300\uc751\ud558\ub294 \uac12\uc744 cache\uc5d0\uc11c \uc77d\uc5b4\uc635\ub2c8\ub2e4.\n    }\n\n    // let result = func(x);  // \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d4 func\ub97c \ud638\ucd9c\ud558\uace0,\n\n    let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4.\n\n    cache.set(x, result);  // \uadf8 \uacb0\uacfc\ub97c \uce90\uc2f1(\uc800\uc7a5)\ud569\ub2c8\ub2e4.\n    return result;\n  };\n}\n\nslow = cachingDecorator(slow);\nalert( slow(1) ); // slow(1)\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\nalert( \"\ub2e4\uc2dc \ud638\ucd9c: \" + slow(1) ); // \ub3d9\uc77c\ud55c \uacb0\uacfc  \uc704\uc5d0\uc11c \uad6c\ud604\ud55c \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\ub294  this \uac00  undefined \uc774\uae30 \ub54c\ubb38\uc5d0 \uac1d\uccb4 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9\ud558\uae30\uc5d4 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4.",
            "title": "Decorator (wrapping function)"
        },
        {
            "location": "/javascript/#call",
            "text": "function sayHi() {\n  alert(this.name);\n}\nlet user = { name: \"John\" };\nlet admin = { name: \"Admin\" };\n// call\uc744 \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uac1d\uccb4\uac00 'this'\uac00 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\nsayHi.call( user ); // this = John\nsayHi.call( admin ); // this = Admin  decorator \ub2e4\uc2dc \uc791\uc131  let worker = {\n  someMethod() {\n    return 1;\n  },\n\n  slow(x) {\n    alert(`slow(${x})\uc744/\ub97c \ud638\ucd9c\ud568`);\n    return x * this.someMethod(); // (*)\n  }\n};\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {\n      return cache.get(x);\n    }\n    let result = func.call(this, x); // \uc774\uc820 'this'\uac00 \uc81c\ub300\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4.\n    cache.set(x, result);\n    return result;\n  };\n}\n\nworker.slow = cachingDecorator(worker.slow); // \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9\nalert( worker.slow(2) ); // \uc81c\ub300\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4.",
            "title": "\uac1d\uccb4\uc758 call\ud568\uc218 \uc0ac\uc6a9\ud558\uae30"
        },
        {
            "location": "/javascript/#_24",
            "text": "func.call(context, ...args)  // \uc804\uac1c \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud574 \uc778\uc218\uac00 \ub2f4\uae34 \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uacfc  func.apply(context, args)    // call\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4.  func.bind(context)  // context (\uac1d\uccb4)\ub97c func \ud568\uc218\uc640 \uc5f0\uacb0\ud568. func\uc758 this\uac00 context\uac00 \ub428",
            "title": "\ud568\uc218\uc758 \ud638\ucd9c \ud568\uc218"
        },
        {
            "location": "/javascript/#object-property",
            "text": "object\uc758 property\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc218\uc815\uac00\ub2a5\ud568   value  writable  enumerable  configurable   let user = {};\nObject.defineProperty(user, \"name\", {\n  value: \"John\"\n});\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": \"John\",\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n */\n\n// property write \uc18d\uc131 \ub044\uae30\nObject.defineProperty(user, \"name\", {\n  writable: false\n});\n\nuser.name = \"Pete\"; // Error: Cannot assign to read only property 'name'",
            "title": "object property \uc18d\uc131 \uc124\uc815"
        },
        {
            "location": "/javascript/#getter-setter-properties",
            "text": "let obj = {\n  get propName() {\n    // getter, obj.propName\uc744 \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\n  },\n\n  set propName(value) {\n    // setter, obj.propName = value\ub97c \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\n  }\n  // get, set \ub458\ub2e4 \uc815\uc758\ub418\uc5b4\uc57c \uc815\uc0c1 \ub3d9\uc791\n};\n\n// \uc608\uc81c\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n  set(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n});\n\nalert(user.fullName); // John Smith\nfor(let key in user) alert(key); // name, surname",
            "title": "getter, setter properties"
        },
        {
            "location": "/javascript/#nodejs",
            "text": "",
            "title": "nodejs"
        },
        {
            "location": "/javascript/#import-package",
            "text": "require: CommonJS \ud0a4\uc6cc\ub4dc  import: ES6(ES2015) \ud0a4\uc6cc\ub4dc",
            "title": "import package"
        },
        {
            "location": "/javascript/#nodejs-getting-start",
            "text": "https://www.nextree.co.kr/p8574/",
            "title": "nodejs getting start"
        },
        {
            "location": "/python3/",
            "text": "Python3 handbook\n\n\n\n\nPython3 handbook\n\n\nReference\n\n\nVariables\n\n\nString\n\n\nString formatting\n\n\nf-string (Literal String Interpolation)\n\n\n%-string\n\n\nstr.format()\n\n\n\n\n\n\nByte\n\n\nCondition (if/elif/else)\n\n\nwhile / for\n\n\nfunction and lambda express\n\n\nbuilt-in functions\n\n\nInput\n\n\nMath\n\n\nlist\n\n\ntuple\n\n\nset (\uc9d1\ud569)\n\n\ndict (dictionary) = map\n\n\nIterable Generators (yield)\n\n\nDecorator\n\n\nComprehesion\n\n\nUseful libraries or simple implementation\n\n\nPrefix Tree (Trie)\n\n\nitertools\n\n\nfunctools\n\n\nLRU (least recently used) caching for memoization (dynamic programming)\n\n\nreduce\n\n\nheapq (Min heap)\n\n\ncollections\n\n\ndeque\n\n\nCounter\n\n\n\n\n\n\nType Hint (Type Annotation)\n\n\nVariable Type Annotation\n\n\nFunction Type Annotation\n\n\nType Module\n\n\nFinal (Constraint), Union (Multiple Types)\n\n\nOptional\n\n\nCallable (Function Type Annotation)\n\n\nAbstraction Type Annotation\n\n\nUser Type Annotation\n\n\n\n\n\n\nType Check\n\n\nEnvironment Variables\n\n\nFile\n\n\nCreate, Write\n\n\nExist\n\n\nCopy\n\n\nGet files\n\n\n\n\n\n\nException\n\n\n\n\nReference\n\n\n\n\nhttps://note.nkmk.me/en/python-list-clear-pop-remove-del/\n\n\nhttps://freedeveloper.tistory.com/271 # summary\n\n\nhttps://seongbindb.tistory.com/54 # summary\n\n\nhttps://wikidocs.net/book/1553\n\n\n\n\nVariables\n\n\na = 5. # 5.0\na = 1e9 # 100000000.0\na = 0.3 + 0.6\n\nimport sys\nsys.maxsize # max int\n\n\n\n\nString\n\n\na = \"hello\"\nb = 'world'\nc = \"\"\"hello\\nworld\"\"\"\nd = a+b # helloworld\nc = [\"goodbye\", \"world\", \"!\"]\n\" \".join(c) # goodbye world !\n\na.startswith(\"Hello\")\ntxt = \"welcome to the jungle\"\nx = txt.split() # ['welcome', 'to', 'the', 'jungle']\n\n\n\n\n\n\nString formatting\n\n\nf-string (Literal String Interpolation)\n\n\n\ub2e4\ub978 formatting \ubc29\ubc95\ubcf4\ub2e4 \uc9c1\uad00\uc801\uc784\n\n\nname = 'Song'\nsex = 'male'\nf'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.'\nF'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.'\n\nx = 10\ny = 3\nf'x + y = {x+y} | x * y = {x*y}' # 'x + y = 13 | x * y = 30'\n\ntuple = ('Hi, I am', 'song', 123)\nf'tuple: {tuple}' # \"tuple: ('Hi, I am', 'song', 123)\"\n\n\n\n\n%-string\n\n\n'x + y = %d | x * y = %d' %(x+y, x*y) # 'x + y = 13 | x * y = 30'\n# Positional argument\n'Hey %s, there is a 0x%x error!' % (name, errno)\n# 'Hey Bob, there is a 0xbadc0ffee error!'\n\n# keyward argument\n'Hey %(name)s, there is a 0x%(errno)x error!' % {\"name\": name, \"errno\": errno }\n# 'Hey Bob, there is a 0xbadc0ffee error!'\n\n\n\n\nstr.format()\n\n\n'x + y = {} | x * y = {}'.format(x+y, x*y) # 'x + y = 13 | x * y = 30'\n\n'Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno)\n# 'Hey Bob, there is a 0xbadc0ffee error!'\n\n\n\n\n\n\nREF> \n- https://docs.python.org/3/library/string.html#string-formatting\n- https://realpython.com/python-string-formatting\n\n\n\n\n\"First, thou shalt count to {0}\"  # References first positional argument\n\"Bring me a {}\"                   # Implicitly references the first positional argument\n\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n\"My quest is {name}\"              # References keyword argument 'name'\n\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional arg\n\"Units destroyed: {players[0]}\"   # First element of keyword argument 'players'.\n\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n\"More {!a}\"                      # Calls ascii() on the argument first\n\n\n\n\nformat_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]\nfill            ::=  <any character>\nalign           ::=  \"<\" | \">\" | \"=\" | \"^\"\nsign            ::=  \"+\" | \"-\" | \" \"\nwidth           ::=  digit+\ngrouping_option ::=  \"_\" | \",\"\nprecision       ::=  digit+\ntype            ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"\n\n\n\n\nByte\n\n\nb'\\xde\\xad\\xbe\\xef'.hex() # 'deadbeef'\nbytes.fromhex('deadbeef') # b'\\xde\\xad\\xbe\\xef'\n\n\n\n\nCondition (if/elif/else)\n\n\n# \ube44\uad50 \uc5f0\uc0b0\nx == y \nx != y \nx > y \nx < y \nx >= y \nx <= y\n\n# \ub17c\ub9ac \uc5f0\uc0b0\nx and y\nx or y\nnot x\n\nx in [1, 2, 3]\nx not in [1, 2, 3]\n\n# if/elif/else\nx = 100\nif x >= 100:\n    pass\nelif x >= 200:\n    print(\">=200\")\nelse:\n    print(\"<100\")\n\nif x >= 100: pass\nelse: print(\"x >= 100\")\n\nr = \">=100\" if x >= 100 else \"<100\"\n\n# list \uc0dd\uc131\uc2dc \uc870\uac74\ubb38\na = [1,2,3,4,5,5,5]\nremove_set = {3,5}\nresult = [i for i in a if i not in remove_set]\n\n\n\n\nwhile / for\n\n\ni = 0\nwhile i < 10:\n    i++\n\n# for i in ITERATABLE_OBJECT: e.g. list, tuple, set, dict\nfor i in range(5): # 0,1,2,3,4\n    pass\n\nfor i in range(1, 10, 2): # 1,3,5,7,9\n    pass\n\nfor i in range(1, 10, 2): # 1\n    break # break the loop\n\n\n\n\nfunction and lambda express\n\n\n# function declaration\ndef add(a,b):\n    return a + b\n\n# call a function\nprint(add(3,7))\nprint(add(b=3, a=7))\n\nprint((lambda a, b: a+b)(3, 7))\n\n\n\n\nbuilt-in functions\n\n\na = [6,2,3,4,5]\nsum(a) # \ud569\nmin(a) # \uc791\uc740 \uc218 \uc120\ud0dd\nmax(a) # \ud070 \uc218 \uc120\ud0dd\neval(\"(3+3) * 10\") # \ubb38\uc790 \uc218\uc2dd \uacc4\uc0b0\nsorted(a) # \uc624\ub984\ucc28\uc21c \uc815\ub82c\nsorted(a, reverse=True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\na.sort() # \uc815\ub82c\nb = [('A', 1),('D', 0),('B', 2)]\nsorted(jobs, key = lambda x: x[0]) # \uccab\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c\nsorted(b, key = lambda x: x[1], reverse=True) # \ub450\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c\nb.sort(key = lambda x: x[1], reverse=True)\n\n# sort \ucc38\uace0: https://docs.python.org/ko/3/howto/sorting.html#sortinghowto\n\n\n\n\n\n# ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\n# map(FUNC, ITERABLE)\na = [1.2, 2.5, 3.7, 4.6]\nfor i in range(len(a)):\n    a[i] = int(a[i])\na = [1.2, 2.5, 3.7, 4.6]\na = list(map(int, a))\na # [1, 2, 3, 4]\n\n\n# ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\ud558\uace0, \uacb0\uacfc\ub97c \ubcd1\ud569\n# reduce(FUNC, ITERABLE)\nfrom functools import reduce \ndata = [1, 2, 3, 4, 5]\ndef sum(a, b):\n    return a + b\nreduce(sum, data) # 15\n\n\n\n\n\nInput\n\n\n# Example1\n>>> a = input().split()\n10 20 (\uc785\ub825) # a=['10', '20']\n\n>>> a = map(int, input().split())\n10 20 (\uc785\ub825)\n>>> a\n<map object at 0x03DFB0D0>\n>>> list(a)\n[10, 20]\n\n# Example2\nimport sys \nsys.stdin.readline().rstrip()\n\n\n\n\nMath\n\n\na = 7 b = 3\na / b # \ub098\ub204\uae30\na % b # \ub098\uba38\uc9c0\na // b # \ubaab\na ** b # \uac70\ub4ed\uc81c\uacf1; a\uc758 b\uc2b9\n\n\n\n\nimport math\n\nmath.log10(5) # log10\nmath.log2(5) # log2\nmath.log(2) # log e \uc790\uc5f0\ub85c\uadf8 \ubc11\nmath.ceil(3.1) # \uc62c\ub9bc\ud568\uc218\nmath.floor(2.5) # \ub0b4\ub9bc\ud568\uc218\nmath.factorial(a) # !a\nmath.sqrt(a) # \uc81c\uacf1\uadfc\nmath.pow(a) # a\uc758 \uc81c\uacf1\nmath.trunc(f) # \uc18c\uc218\uc810\uc744 \uc790\ub974\ub294 \ud568\uc218\nmath.gcd(a, b) # a, b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218\nmath.radians(t) # \uac01\ub3c4 -> \ub77c\ub514\uc548\nmath.degrees(t) # \ub77c\ub514\uc548 -> \uac01\ub3c4\nmath.fabs(x) # x\uc758 \uc808\ub300\uac12; \ub0b4\uc7a5\ud568\uc218 abs\uc640 \ub2ec\ub9ac \uc2e4\uc218 \uac00\ub2a5\nmath.exp(x) # e\uc758 x\uc2b9\nround(a,4) # \ubc18\uc62c\ub9bc\n\n\n\n\nlist\n\n\na = [1,2,3,4,5,6]\na[-1] # 6\na[-3] # 4\na[1:4] # [2,3,4]\n\n# \ucd08\uae30\ud654\narray = [i for i in range(20) if i % 2 == 1] # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nm = 3\nn = 4\narray = [[0] * m for _ in range(n) ] # [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\narray[2][0] = 1 # [[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0]]s\n\na = [1,4,3]\na.append(2) \na.sort() # \uc624\ub984\ucc28\uc21c \uc815\ub82c\na.sort(reverse = True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\na.reverse() # \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c \ub4a4\uc9d1\uae30\na.insert(2,3) # \ud2b9\uc815 \uc778\ub371\uc2a4\uc5d0 \ub370\uc774\ud130 \ucd94\uac00\na.count(3) # \ub370\uc774\ud130 \uac1c\uc218 \na.remove(1) # \ub370\uc774\ud130 \uc0ad\uc81c # \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uace0\ub824\ud574\uc11c remove\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ucd94\ucc9c (?)\na.pop(0) # \ub370\uc774\ud130 \uc0ad\uc81c (index\uac00 \uc5c6\uc73c\uba74, \ub9c8\uc9c0\ub9c9 \ub370\uc774\ud130 \uc0ad\uc81c)\na.clear() # \ub370\uc774\ud130 \ubaa8\ub450 \uc0ad\uc81c\ndel a[1] # \ub370\uc774\ud130 \uc0ad\uc81c\ndel a[1:4] # \ubc94\uc704 \uc0ad\uc81c\ndel a[:] # \ubaa8\ub450 \uc0ad\uc81c\ndel a[::step] # step \uac04\uaca9\uc5d0 \uc788\ub294 \ub370\uc774\ud130 \uc0ad\uc81c\n\n\n\n\ntuple\n\n\n\n\nlist\uc640 \ub3d9\uc77c\n\n\nimmutable value: \uc218\uc815 x\n\n\n\uc18c\uad04\ud638 \uc0ac\uc6a9\n\n\n\n\na = (10, 20)\na[0] = 20 # error\n\n\n\n\nset (\uc9d1\ud569)\n\n\n# \ucd08\uae30\ud654\na = set([1,1,2,3,4,4,5]) \nb = {1,2,5,6}\n\na | b # {1, 2, 3, 4, 5, 6}\na & b # {1, 2, 5}\na - b # {3, 4}\n\na.add(7)\na.update([8, 9])\na.remove(7) # {1, 2, 3, 4, 5, 8, 9}\n\n\n\n\ndict (dictionary) = map\n\n\n\n\nmapping immutable key to mutable value\n\n\nnot duplicatable key\n\n\nvalue access through keys\n\n\n\n\n>>> a = {1: 5, 2: 3}   # int \uc0ac\uc6a9\n>>> a = {(1,5): 5, (3,3): 3} # tuple\uc0ac\uc6a9\n>>> a = { 3.6: 5, \"abc\": 3} # float \uc0ac\uc6a9\n>>> a = { True: 5, \"abc\": 3} # bool \uc0ac\uc6a9\n\n\n\n\nd = dict()\nd = dict( alice = 5, bob = 20, tony= 15, suzy = 30)\n\nd = {}\nd = {'abc' : 1, 'def' : 2}\nd['abc'] = 5\n\n# nested list (tuple) to a dict\nname_and_ages = [['alice', 5], ['Bob', 13]]\nname_and_ages = [('alice', 5), ('Bob', 13)]\nname_and_ages = (('alice', 5), ('Bob', 13))\nname_and_ages = (['alice', 5], ['Bob', 13])\ndict(name_and_ages) # \uc704 \ub3d9\uc77c\ud55c \uacb0\uacfc\n\n# deepcopy\nimport copy\na = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\nb = copy.deepcopy(a)\nb['alice'].append(5)\n# b {'alice': [1, 2, 3, 5], 'bob': 20, 'tony': 15, 'suzy': 30}\n# a {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\n\n# update\na = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\na.update({'bob':99, 'tony':99, 'kim': 30})\n# a {'alice': [1, 2, 3], 'bob': 99, 'tony': 99, 'suzy': 30, 'kim': 30}\n\n# loop\nfor key in a: # key loop\n    print(key, a[key])\n\nfor val in a.values(): # value loop\n    print(val)\n\nfor key, val in a.items(): # key, value loop\n    print(\"key = {key}, value={value}\".format(key=key,value=val))\n\n# check a key available\n'alice' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # True\n'teacher' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # False\n\n# delete\ndel a['alice']\n\n\n\n\nIterable Generators (yield)\n\n\nGenerators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:\n\n\ndef generater():\n   mylist = range(3)\n   for i in mylist:\n       yield i * i\n\niterable = generater() # Generater \uc0dd\uc131\nprint(iterable) # <generator object generater at 0xb7555c34>\nfor i in iterable:\n    print(i)\n\n\n\n\nDecorator\n\n\nComprehesion\n\n\n\n\nREF: https://wikidocs.net/16064\n\n\n\n\n\nwords = \"\ub098\ub294 \ud30c\uc774\uc36c\uc744 \uacf5\ubd80\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubb34\ucc99 \uc2ec\ud50c\ud558\uace0 \uba85\ub8cc\ud569\ub2c8\ub2e4.\".split()\n\n# List representation\n[len(word) for word in words if len(word)> 3]\n\n# Set representation\n{len(word) for word in words if len(word)> 3}\n\n# dict (hash)\n# {key\ud45c\ud604\uc2dd : value\ud45c\ud604\uc2dd for item in iterable}\ncountry_capital = {'\ub300\ud55c\ubbfc\uad6d':'\uc11c\uc6b8', '\uc601\uad6d' :'\ub7f0\ub358', '\ubbf8\uad6d' :'\uc6cc\uc2f1\ud134', '\uc77c\ubcf8' :'\ub3c4\ucfc4'}\ncapital_country = {capital: country for country, capital in country_capital.items()}\n\n\n\n\nUseful libraries or simple implementation\n\n\nPrefix Tree (Trie)\n\n\nclass Trie(object):\n    def __init__(self):\n        self.child = {}\n    def insert(self, word):\n        current = self.child\n        for l in word:\n            if l not in current:\n            current[l] = {}\n            current = current[l]\n        current['#']=1\n    def search(self, word):\n        current = self.child\n        for l in word:\n            if l not in current:\n            return False\n            current = current[l]\n        return '#' in current\n    def startsWith(self, prefix):\n        current = self.child\n        for l in prefix:\n            if l not in current:\n            return False\n            current = current[l]\n        return True\nob1 = Trie()\nob1.insert(\"apple\")\nprint(ob1.search(\"apple\"))\nprint(ob1.search(\"app\"))\nprint(ob1.startsWith(\"app\"))\nob1.insert(\"app\")\nprint(ob1.search(\"app\"))\n\n\n\n\nitertools\n\n\n\n\nhttps://docs.python.org/ko/3/library/itertools.html\n\n\n\n\n\n\npermutations (\uc21c\uc5f4)\n\n\ncombinations (\uc870\ud569)\n\n\nproduct (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \uc21c\uc5f4)\n\n\ncombinations_with_replacement (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc870\ud569)\n\n\n\n\nfrom itertools import permutations, combinations, product, combinations_with_replacement\n\n# \ub370\uce74\ub974\ud2b8 \uacf1(cartesian product) - \uc911\ubcf5\ud5c8\uc6a9 \uc21c\uc5f4\nproduct('ABCD', repeat=2) # AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD\n\n# \uc21c\uc5f4\npermutations('ABCD', 2) # AB AC AD BA BC BD CA CB CD DA DB DC\n\n# \uc870\ud569 (\uc911\ubcf5X)\ncombinations('ABCD', 2) # AB AC AD BC BD CD\n\n# \uc870\ud569 (\uc911\ubcf5\ud5c8\uc6a9)\ncombinations_with_replacement('ABCD', 2) # AA AB AC AD BB BC BD CC CD DD\n\n\n\n\nfunctools\n\n\n\n\nhttps://docs.python.org/ko/3/library/functools.html\n\n\n\n\nLRU (least recently used) caching for memoization (dynamic programming)\n\n\nfunctools\uc758 lru_cache decorator\ub97c \uc0ac\uc6a9\ud574 memoization \uad6c\ud604\n\n\nfrom functools import lru_cache\n# \ub3d9\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(dynamic programming) \uae30\ubc95\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 \n# \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud53c\ubcf4\ub098\uce58 \uc218\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \uc608:\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n>>> [fib(n) for n in range(16)]\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\n>>> fib.cache_info()\nCacheInfo(hits=28, misses=16, maxsize=None, currsize=16)\n#\ubc84\uc804 3.2\uc5d0 \ucd94\uac00.\n\n\n\n\nreduce\n\n\n\uc704\uc5d0\uc11c \uc5b8\uae09\ud568.\n\n\nheapq (Min heap)\n\n\n\n\n\ucd5c\uc18c \ud799\n\n\nPriorityQueue\n\n\nO(NlogN)\n\n\n\n\nimport heapq\nheaplist = []\nheapq.heappush(heaplist, 4)\nheapq.heappush(heaplist, 1)\nheapq.heappush(heaplist, 7)\nheapq.heappush(heaplist, 3) # [1, 3, 7, 4]\na = heapq.heappop(heaplist) # [3, 4, 7]\nprint(a) # 1\nprint(heaplist) # [3, 4, 7]\n\n# list -> priority queue\na = [10, 4, 111, 40]\nheapq.heapify(a) # min heap order\ub85c \uc815\ub82c\n# [4, 10, 111, 40]\n\n# max heap\nnums = [4, 1, 7, 3, 8, 5]\nheap = []\n\nfor num in nums:\n  heapq.heappush(heap, (-num, num))  # (\uc6b0\uc120 \uc21c\uc704, \uac12)\n\nwhile heap:\n  print(heapq.heappop(heap)[1])  # index 1\n\n\n\n\ncollections\n\n\ndeque\n\n\nfrom collections import deque\n\nq = deque()\nq.append('a')\nq.append('b')\nq.append('c')\nprint(\"Initial queue\")\nprint(q)\nprint(\"\\nElements dequeued from the queue\")\nprint(q.popleft())\nprint(q.popleft())\nprint(q.popleft())\nprint(\"\\nQueue after removing elements\")\nprint(q)\n\n# Uncommenting q.popleft()\n# will raise an IndexError\n# as queue is now empty\n\n\n\n\nCounter\n\n\nA Counter is a dict subclass for counting hashable objects (e.g. dict).\n\n\n\n# A Python program to show different ways to create\n# Counter\nfrom collections import Counter\n\n# With sequence of items \nprint(Counter(['B','B','A','B','C','A','B','B','A','C']))\n# with dictionary\nprint(Counter({'A':3, 'B':5, 'C':2}))\n# with keyword arguments\nprint(Counter(A=3, B=5, C=2))\n\n# output\n# Counter({'B': 5, 'A': 3, 'C': 2})\n# Counter({'B': 5, 'A': 3, 'C': 2})\n# Counter({'B': 5, 'A': 3, 'C': 2})\n\ncoun = Counter()\ncoun.update([1, 2, 3, 1, 2, 1, 1, 2]) # Counter({1: 4, 2: 3, 3: 1})\ncoun.update([1, 2, 4]) # Counter({1: 5, 2: 4, 3: 1, 4: 1})\n\n# Python program to demonstrate that counts in \n# Counter can be 0 and negative\nc1 = Counter(A=4,  B=3, C=10)\nc2 = Counter(A=10, B=3, C=4)\nc1.subtract(c2) #  Counter({'c': 6, 'B': 0, 'A': -6})\nc1 - c2 ##  Counter({'c': 6, 'B': 0, 'A': -6})\n\n\n\n\nType Hint (Type Annotation)\n\n\n\n\nREF: https://www.daleseo.com/python-type-annotations/\n\n\n\n\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n\n\n\nVariable Type Annotation\n\n\nname: str = \"John Doe\"\nage: int = 25\nemails: list: [\"john1@doe.com\", \"john2@doe.com\"]\naddress: dict = {\n  \"state\": \"NM\",\n  \"zip\": \"80556\"\n}\n\n\n\n\nFunction Type Annotation\n\n\ndef stringify(num: int) -> str:\n    return str(num)\n\ndef plus(num1: int, num2: float = 3.5) -> float:\n    return num1 + num2\n\ndef greet(name: str) -> None:\n    return \"Hi! \" + str\n\ndef repeat(message: str, times: int = 2) -> list:\n    return [message] * times\n\n\n\n\nType Module\n\n\nfrom typing import List, Set, Dict, Tuple\n\nnums: List[int] = [1]\nunique_nums: Set[int] = {6, 7}\nvision: Dict[str, float] = {'left': 1.0, 'right': 0.9}\njohn: Tuple[int, str, List[float]] = (25, \"John Doe\", [1.0, 0.9])\n\n\n\n\nFinal (Constraint), Union (Multiple Types)\n\n\nfrom typing import Final, Union\n\nTIME_OUT: Final[int] = 10\n\ndef toString(num: Union[int, float]) -> str:\n    return str(num)\n\ntoString(1)\ntoString(1.5)\n\n\n\n\nOptional\n\n\nOptional\uc740 None\uc774 \ud5c8\uc6a9\ub418\ub294 \ud568\uc218\uc758 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0c0\uc785\uc744 \uba85\uc2dc\ud560 \ub54c \uc720\uc6a9\n\n\nfrom typing import Optional\n\ndef repeat(message: str, times: Optional[int] = None) -> list:\n    if times:\n        return [message] * times\n    else:\n        return [message]\n\n\n\n\nCallable (Function Type Annotation)\n\n\nfrom typing import Callable\n\ndef repeat(greet: Callable[[str], str], name: str, times: int = 2) -> None:\n    for _ in range(times):\n        print(greet(name))\n\n# Lamda\ngreet: Callable[[str], str] = lambda name: f\"Hi, {name}!\"\n\n\n\n\nAbstraction Type Annotation\n\n\nfrom typing import Iterable, List\n\ndef toStrings(nums: Iterable[int]) -> List[str]:\n    return [str(x) for x in nums]\n\n\n\n\n\n\nOther types: \nSequence\n, \nMapping\n, \nMutableMapping\n\n\n\n\nUser Type Annotation\n\n\nclass User:\n    ...\n\ndef find_user(id: str) -> User:\n    ...\n\ndef create_user(user: User) -> User:\n    ...\n\n\n\n\nType Check\n\n\npip install mypy\nmypy our_file.py our_directory\n\n\n\n\nEnvironment Variables\n\n\n>>> import os\n>>> user = os.environ['USER']\n>>> user\n'willing'\n\n\n\n\nFile\n\n\nCreate, Write\n\n\ntry:\n    #  w: write, +: newly\n    with open('docs/readme.txt', 'w+') as f:\n        f.write('Create a new text file!')\nexcept FileNotFoundError:\n    print(\"The 'docs' directory does not exist\")\n\n\n\n\nf = open('docs/readme.txt', 'w+')\nf.write(\"write data\")\nf.close()\n\n\n\n\nExist\n\n\nimport os.path\nfrom os import path\npath.exists(\"guru99.txt\")\n\n\n\n\nCopy\n\n\nshutil.copyfile(original, target) # copy a file to a target file.\nshutil.copy(src, dest) # copy a file to a directory.\n\n\n\n\nGet files\n\n\nimport os\nimport glob\nfrom pprint import pprint as pp\nfile_info = {os.path.realpath(p) : os.stat(p).st_size for p in glob.glob('*.*')}\npp(file_info)\n{'/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.log': 68,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.txt': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.log': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.txt': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/c.log': 68,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/err.log': 13,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/exceptional.py': 566,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/words.py': 910}\n\n\n\n\nException\n\n\n\n\nhttps://docs.python.org/3/library/exceptions.html",
            "title": "Python3"
        },
        {
            "location": "/python3/#python3-handbook",
            "text": "Python3 handbook  Reference  Variables  String  String formatting  f-string (Literal String Interpolation)  %-string  str.format()    Byte  Condition (if/elif/else)  while / for  function and lambda express  built-in functions  Input  Math  list  tuple  set (\uc9d1\ud569)  dict (dictionary) = map  Iterable Generators (yield)  Decorator  Comprehesion  Useful libraries or simple implementation  Prefix Tree (Trie)  itertools  functools  LRU (least recently used) caching for memoization (dynamic programming)  reduce  heapq (Min heap)  collections  deque  Counter    Type Hint (Type Annotation)  Variable Type Annotation  Function Type Annotation  Type Module  Final (Constraint), Union (Multiple Types)  Optional  Callable (Function Type Annotation)  Abstraction Type Annotation  User Type Annotation    Type Check  Environment Variables  File  Create, Write  Exist  Copy  Get files    Exception",
            "title": "Python3 handbook"
        },
        {
            "location": "/python3/#reference",
            "text": "https://note.nkmk.me/en/python-list-clear-pop-remove-del/  https://freedeveloper.tistory.com/271 # summary  https://seongbindb.tistory.com/54 # summary  https://wikidocs.net/book/1553",
            "title": "Reference"
        },
        {
            "location": "/python3/#variables",
            "text": "a = 5. # 5.0\na = 1e9 # 100000000.0\na = 0.3 + 0.6\n\nimport sys\nsys.maxsize # max int",
            "title": "Variables"
        },
        {
            "location": "/python3/#string",
            "text": "a = \"hello\"\nb = 'world'\nc = \"\"\"hello\\nworld\"\"\"\nd = a+b # helloworld\nc = [\"goodbye\", \"world\", \"!\"]\n\" \".join(c) # goodbye world !\n\na.startswith(\"Hello\")\ntxt = \"welcome to the jungle\"\nx = txt.split() # ['welcome', 'to', 'the', 'jungle']",
            "title": "String"
        },
        {
            "location": "/python3/#string-formatting",
            "text": "",
            "title": "String formatting"
        },
        {
            "location": "/python3/#f-string-literal-string-interpolation",
            "text": "\ub2e4\ub978 formatting \ubc29\ubc95\ubcf4\ub2e4 \uc9c1\uad00\uc801\uc784  name = 'Song'\nsex = 'male'\nf'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.'\nF'Hi, I am {name}. I am {sex}.' # 'Hi, I am song. I am male.'\n\nx = 10\ny = 3\nf'x + y = {x+y} | x * y = {x*y}' # 'x + y = 13 | x * y = 30'\n\ntuple = ('Hi, I am', 'song', 123)\nf'tuple: {tuple}' # \"tuple: ('Hi, I am', 'song', 123)\"",
            "title": "f-string (Literal String Interpolation)"
        },
        {
            "location": "/python3/#-string",
            "text": "'x + y = %d | x * y = %d' %(x+y, x*y) # 'x + y = 13 | x * y = 30'\n# Positional argument\n'Hey %s, there is a 0x%x error!' % (name, errno)\n# 'Hey Bob, there is a 0xbadc0ffee error!'\n\n# keyward argument\n'Hey %(name)s, there is a 0x%(errno)x error!' % {\"name\": name, \"errno\": errno }\n# 'Hey Bob, there is a 0xbadc0ffee error!'",
            "title": "%-string"
        },
        {
            "location": "/python3/#strformat",
            "text": "'x + y = {} | x * y = {}'.format(x+y, x*y) # 'x + y = 13 | x * y = 30'\n\n'Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno)\n# 'Hey Bob, there is a 0xbadc0ffee error!'   REF> \n- https://docs.python.org/3/library/string.html#string-formatting\n- https://realpython.com/python-string-formatting   \"First, thou shalt count to {0}\"  # References first positional argument\n\"Bring me a {}\"                   # Implicitly references the first positional argument\n\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n\"My quest is {name}\"              # References keyword argument 'name'\n\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional arg\n\"Units destroyed: {players[0]}\"   # First element of keyword argument 'players'.\n\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n\"More {!a}\"                      # Calls ascii() on the argument first  format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]\nfill            ::=  <any character>\nalign           ::=  \"<\" | \">\" | \"=\" | \"^\"\nsign            ::=  \"+\" | \"-\" | \" \"\nwidth           ::=  digit+\ngrouping_option ::=  \"_\" | \",\"\nprecision       ::=  digit+\ntype            ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"",
            "title": "str.format()"
        },
        {
            "location": "/python3/#byte",
            "text": "b'\\xde\\xad\\xbe\\xef'.hex() # 'deadbeef'\nbytes.fromhex('deadbeef') # b'\\xde\\xad\\xbe\\xef'",
            "title": "Byte"
        },
        {
            "location": "/python3/#condition-ifelifelse",
            "text": "# \ube44\uad50 \uc5f0\uc0b0\nx == y \nx != y \nx > y \nx < y \nx >= y \nx <= y\n\n# \ub17c\ub9ac \uc5f0\uc0b0\nx and y\nx or y\nnot x\n\nx in [1, 2, 3]\nx not in [1, 2, 3]\n\n# if/elif/else\nx = 100\nif x >= 100:\n    pass\nelif x >= 200:\n    print(\">=200\")\nelse:\n    print(\"<100\")\n\nif x >= 100: pass\nelse: print(\"x >= 100\")\n\nr = \">=100\" if x >= 100 else \"<100\"\n\n# list \uc0dd\uc131\uc2dc \uc870\uac74\ubb38\na = [1,2,3,4,5,5,5]\nremove_set = {3,5}\nresult = [i for i in a if i not in remove_set]",
            "title": "Condition (if/elif/else)"
        },
        {
            "location": "/python3/#while-for",
            "text": "i = 0\nwhile i < 10:\n    i++\n\n# for i in ITERATABLE_OBJECT: e.g. list, tuple, set, dict\nfor i in range(5): # 0,1,2,3,4\n    pass\n\nfor i in range(1, 10, 2): # 1,3,5,7,9\n    pass\n\nfor i in range(1, 10, 2): # 1\n    break # break the loop",
            "title": "while / for"
        },
        {
            "location": "/python3/#function-and-lambda-express",
            "text": "# function declaration\ndef add(a,b):\n    return a + b\n\n# call a function\nprint(add(3,7))\nprint(add(b=3, a=7))\n\nprint((lambda a, b: a+b)(3, 7))",
            "title": "function and lambda express"
        },
        {
            "location": "/python3/#built-in-functions",
            "text": "a = [6,2,3,4,5]\nsum(a) # \ud569\nmin(a) # \uc791\uc740 \uc218 \uc120\ud0dd\nmax(a) # \ud070 \uc218 \uc120\ud0dd\neval(\"(3+3) * 10\") # \ubb38\uc790 \uc218\uc2dd \uacc4\uc0b0\nsorted(a) # \uc624\ub984\ucc28\uc21c \uc815\ub82c\nsorted(a, reverse=True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\na.sort() # \uc815\ub82c\nb = [('A', 1),('D', 0),('B', 2)]\nsorted(jobs, key = lambda x: x[0]) # \uccab\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c\nsorted(b, key = lambda x: x[1], reverse=True) # \ub450\ubc88\uc9f8\uac12\uc73c\ub85c \uc815\ub82c\nb.sort(key = lambda x: x[1], reverse=True)\n\n# sort \ucc38\uace0: https://docs.python.org/ko/3/howto/sorting.html#sortinghowto  # ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\n# map(FUNC, ITERABLE)\na = [1.2, 2.5, 3.7, 4.6]\nfor i in range(len(a)):\n    a[i] = int(a[i])\na = [1.2, 2.5, 3.7, 4.6]\na = list(map(int, a))\na # [1, 2, 3, 4]\n\n\n# ITERABLE \uc21c\ud68c\ud558\uba70 FUNC\ud638\ucd9c\ud558\uace0, \uacb0\uacfc\ub97c \ubcd1\ud569\n# reduce(FUNC, ITERABLE)\nfrom functools import reduce \ndata = [1, 2, 3, 4, 5]\ndef sum(a, b):\n    return a + b\nreduce(sum, data) # 15",
            "title": "built-in functions"
        },
        {
            "location": "/python3/#input",
            "text": "# Example1\n>>> a = input().split()\n10 20 (\uc785\ub825) # a=['10', '20']\n\n>>> a = map(int, input().split())\n10 20 (\uc785\ub825)\n>>> a\n<map object at 0x03DFB0D0>\n>>> list(a)\n[10, 20]\n\n# Example2\nimport sys \nsys.stdin.readline().rstrip()",
            "title": "Input"
        },
        {
            "location": "/python3/#math",
            "text": "a = 7 b = 3\na / b # \ub098\ub204\uae30\na % b # \ub098\uba38\uc9c0\na // b # \ubaab\na ** b # \uac70\ub4ed\uc81c\uacf1; a\uc758 b\uc2b9  import math\n\nmath.log10(5) # log10\nmath.log2(5) # log2\nmath.log(2) # log e \uc790\uc5f0\ub85c\uadf8 \ubc11\nmath.ceil(3.1) # \uc62c\ub9bc\ud568\uc218\nmath.floor(2.5) # \ub0b4\ub9bc\ud568\uc218\nmath.factorial(a) # !a\nmath.sqrt(a) # \uc81c\uacf1\uadfc\nmath.pow(a) # a\uc758 \uc81c\uacf1\nmath.trunc(f) # \uc18c\uc218\uc810\uc744 \uc790\ub974\ub294 \ud568\uc218\nmath.gcd(a, b) # a, b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218\nmath.radians(t) # \uac01\ub3c4 -> \ub77c\ub514\uc548\nmath.degrees(t) # \ub77c\ub514\uc548 -> \uac01\ub3c4\nmath.fabs(x) # x\uc758 \uc808\ub300\uac12; \ub0b4\uc7a5\ud568\uc218 abs\uc640 \ub2ec\ub9ac \uc2e4\uc218 \uac00\ub2a5\nmath.exp(x) # e\uc758 x\uc2b9\nround(a,4) # \ubc18\uc62c\ub9bc",
            "title": "Math"
        },
        {
            "location": "/python3/#list",
            "text": "a = [1,2,3,4,5,6]\na[-1] # 6\na[-3] # 4\na[1:4] # [2,3,4]\n\n# \ucd08\uae30\ud654\narray = [i for i in range(20) if i % 2 == 1] # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nm = 3\nn = 4\narray = [[0] * m for _ in range(n) ] # [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\narray[2][0] = 1 # [[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0]]s\n\na = [1,4,3]\na.append(2) \na.sort() # \uc624\ub984\ucc28\uc21c \uc815\ub82c\na.sort(reverse = True) # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\na.reverse() # \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c \ub4a4\uc9d1\uae30\na.insert(2,3) # \ud2b9\uc815 \uc778\ub371\uc2a4\uc5d0 \ub370\uc774\ud130 \ucd94\uac00\na.count(3) # \ub370\uc774\ud130 \uac1c\uc218 \na.remove(1) # \ub370\uc774\ud130 \uc0ad\uc81c # \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uace0\ub824\ud574\uc11c remove\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ucd94\ucc9c (?)\na.pop(0) # \ub370\uc774\ud130 \uc0ad\uc81c (index\uac00 \uc5c6\uc73c\uba74, \ub9c8\uc9c0\ub9c9 \ub370\uc774\ud130 \uc0ad\uc81c)\na.clear() # \ub370\uc774\ud130 \ubaa8\ub450 \uc0ad\uc81c\ndel a[1] # \ub370\uc774\ud130 \uc0ad\uc81c\ndel a[1:4] # \ubc94\uc704 \uc0ad\uc81c\ndel a[:] # \ubaa8\ub450 \uc0ad\uc81c\ndel a[::step] # step \uac04\uaca9\uc5d0 \uc788\ub294 \ub370\uc774\ud130 \uc0ad\uc81c",
            "title": "list"
        },
        {
            "location": "/python3/#tuple",
            "text": "list\uc640 \ub3d9\uc77c  immutable value: \uc218\uc815 x  \uc18c\uad04\ud638 \uc0ac\uc6a9   a = (10, 20)\na[0] = 20 # error",
            "title": "tuple"
        },
        {
            "location": "/python3/#set",
            "text": "# \ucd08\uae30\ud654\na = set([1,1,2,3,4,4,5]) \nb = {1,2,5,6}\n\na | b # {1, 2, 3, 4, 5, 6}\na & b # {1, 2, 5}\na - b # {3, 4}\n\na.add(7)\na.update([8, 9])\na.remove(7) # {1, 2, 3, 4, 5, 8, 9}",
            "title": "set (\uc9d1\ud569)"
        },
        {
            "location": "/python3/#dict-dictionary-map",
            "text": "mapping immutable key to mutable value  not duplicatable key  value access through keys   >>> a = {1: 5, 2: 3}   # int \uc0ac\uc6a9\n>>> a = {(1,5): 5, (3,3): 3} # tuple\uc0ac\uc6a9\n>>> a = { 3.6: 5, \"abc\": 3} # float \uc0ac\uc6a9\n>>> a = { True: 5, \"abc\": 3} # bool \uc0ac\uc6a9  d = dict()\nd = dict( alice = 5, bob = 20, tony= 15, suzy = 30)\n\nd = {}\nd = {'abc' : 1, 'def' : 2}\nd['abc'] = 5\n\n# nested list (tuple) to a dict\nname_and_ages = [['alice', 5], ['Bob', 13]]\nname_and_ages = [('alice', 5), ('Bob', 13)]\nname_and_ages = (('alice', 5), ('Bob', 13))\nname_and_ages = (['alice', 5], ['Bob', 13])\ndict(name_and_ages) # \uc704 \ub3d9\uc77c\ud55c \uacb0\uacfc\n\n# deepcopy\nimport copy\na = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\nb = copy.deepcopy(a)\nb['alice'].append(5)\n# b {'alice': [1, 2, 3, 5], 'bob': 20, 'tony': 15, 'suzy': 30}\n# a {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\n\n# update\na = {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30}\na.update({'bob':99, 'tony':99, 'kim': 30})\n# a {'alice': [1, 2, 3], 'bob': 99, 'tony': 99, 'suzy': 30, 'kim': 30}\n\n# loop\nfor key in a: # key loop\n    print(key, a[key])\n\nfor val in a.values(): # value loop\n    print(val)\n\nfor key, val in a.items(): # key, value loop\n    print(\"key = {key}, value={value}\".format(key=key,value=val))\n\n# check a key available\n'alice' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # True\n'teacher' in {'alice': [1, 2, 3], 'bob': 20, 'tony': 15, 'suzy': 30} # False\n\n# delete\ndel a['alice']",
            "title": "dict (dictionary) = map"
        },
        {
            "location": "/python3/#iterable-generators-yield",
            "text": "Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:  def generater():\n   mylist = range(3)\n   for i in mylist:\n       yield i * i\n\niterable = generater() # Generater \uc0dd\uc131\nprint(iterable) # <generator object generater at 0xb7555c34>\nfor i in iterable:\n    print(i)",
            "title": "Iterable Generators (yield)"
        },
        {
            "location": "/python3/#decorator",
            "text": "",
            "title": "Decorator"
        },
        {
            "location": "/python3/#comprehesion",
            "text": "REF: https://wikidocs.net/16064   \nwords = \"\ub098\ub294 \ud30c\uc774\uc36c\uc744 \uacf5\ubd80\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubb34\ucc99 \uc2ec\ud50c\ud558\uace0 \uba85\ub8cc\ud569\ub2c8\ub2e4.\".split()\n\n# List representation\n[len(word) for word in words if len(word)> 3]\n\n# Set representation\n{len(word) for word in words if len(word)> 3}\n\n# dict (hash)\n# {key\ud45c\ud604\uc2dd : value\ud45c\ud604\uc2dd for item in iterable}\ncountry_capital = {'\ub300\ud55c\ubbfc\uad6d':'\uc11c\uc6b8', '\uc601\uad6d' :'\ub7f0\ub358', '\ubbf8\uad6d' :'\uc6cc\uc2f1\ud134', '\uc77c\ubcf8' :'\ub3c4\ucfc4'}\ncapital_country = {capital: country for country, capital in country_capital.items()}",
            "title": "Comprehesion"
        },
        {
            "location": "/python3/#useful-libraries-or-simple-implementation",
            "text": "",
            "title": "Useful libraries or simple implementation"
        },
        {
            "location": "/python3/#prefix-tree-trie",
            "text": "class Trie(object):\n    def __init__(self):\n        self.child = {}\n    def insert(self, word):\n        current = self.child\n        for l in word:\n            if l not in current:\n            current[l] = {}\n            current = current[l]\n        current['#']=1\n    def search(self, word):\n        current = self.child\n        for l in word:\n            if l not in current:\n            return False\n            current = current[l]\n        return '#' in current\n    def startsWith(self, prefix):\n        current = self.child\n        for l in prefix:\n            if l not in current:\n            return False\n            current = current[l]\n        return True\nob1 = Trie()\nob1.insert(\"apple\")\nprint(ob1.search(\"apple\"))\nprint(ob1.search(\"app\"))\nprint(ob1.startsWith(\"app\"))\nob1.insert(\"app\")\nprint(ob1.search(\"app\"))",
            "title": "Prefix Tree (Trie)"
        },
        {
            "location": "/python3/#itertools",
            "text": "https://docs.python.org/ko/3/library/itertools.html    permutations (\uc21c\uc5f4)  combinations (\uc870\ud569)  product (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \uc21c\uc5f4)  combinations_with_replacement (\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc870\ud569)   from itertools import permutations, combinations, product, combinations_with_replacement\n\n# \ub370\uce74\ub974\ud2b8 \uacf1(cartesian product) - \uc911\ubcf5\ud5c8\uc6a9 \uc21c\uc5f4\nproduct('ABCD', repeat=2) # AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD\n\n# \uc21c\uc5f4\npermutations('ABCD', 2) # AB AC AD BA BC BD CA CB CD DA DB DC\n\n# \uc870\ud569 (\uc911\ubcf5X)\ncombinations('ABCD', 2) # AB AC AD BC BD CD\n\n# \uc870\ud569 (\uc911\ubcf5\ud5c8\uc6a9)\ncombinations_with_replacement('ABCD', 2) # AA AB AC AD BB BC BD CC CD DD",
            "title": "itertools"
        },
        {
            "location": "/python3/#functools",
            "text": "https://docs.python.org/ko/3/library/functools.html",
            "title": "functools"
        },
        {
            "location": "/python3/#lru-least-recently-used-caching-for-memoization-dynamic-programming",
            "text": "functools\uc758 lru_cache decorator\ub97c \uc0ac\uc6a9\ud574 memoization \uad6c\ud604  from functools import lru_cache\n# \ub3d9\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(dynamic programming) \uae30\ubc95\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 \n# \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud53c\ubcf4\ub098\uce58 \uc218\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \uc608:\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n>>> [fib(n) for n in range(16)]\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\n>>> fib.cache_info()\nCacheInfo(hits=28, misses=16, maxsize=None, currsize=16)\n#\ubc84\uc804 3.2\uc5d0 \ucd94\uac00.",
            "title": "LRU (least recently used) caching for memoization (dynamic programming)"
        },
        {
            "location": "/python3/#reduce",
            "text": "\uc704\uc5d0\uc11c \uc5b8\uae09\ud568.",
            "title": "reduce"
        },
        {
            "location": "/python3/#heapq-min-heap",
            "text": "\ucd5c\uc18c \ud799  PriorityQueue  O(NlogN)   import heapq\nheaplist = []\nheapq.heappush(heaplist, 4)\nheapq.heappush(heaplist, 1)\nheapq.heappush(heaplist, 7)\nheapq.heappush(heaplist, 3) # [1, 3, 7, 4]\na = heapq.heappop(heaplist) # [3, 4, 7]\nprint(a) # 1\nprint(heaplist) # [3, 4, 7]\n\n# list -> priority queue\na = [10, 4, 111, 40]\nheapq.heapify(a) # min heap order\ub85c \uc815\ub82c\n# [4, 10, 111, 40]\n\n# max heap\nnums = [4, 1, 7, 3, 8, 5]\nheap = []\n\nfor num in nums:\n  heapq.heappush(heap, (-num, num))  # (\uc6b0\uc120 \uc21c\uc704, \uac12)\n\nwhile heap:\n  print(heapq.heappop(heap)[1])  # index 1",
            "title": "heapq (Min heap)"
        },
        {
            "location": "/python3/#collections",
            "text": "",
            "title": "collections"
        },
        {
            "location": "/python3/#deque",
            "text": "from collections import deque\n\nq = deque()\nq.append('a')\nq.append('b')\nq.append('c')\nprint(\"Initial queue\")\nprint(q)\nprint(\"\\nElements dequeued from the queue\")\nprint(q.popleft())\nprint(q.popleft())\nprint(q.popleft())\nprint(\"\\nQueue after removing elements\")\nprint(q)\n\n# Uncommenting q.popleft()\n# will raise an IndexError\n# as queue is now empty",
            "title": "deque"
        },
        {
            "location": "/python3/#counter",
            "text": "A Counter is a dict subclass for counting hashable objects (e.g. dict).  \n# A Python program to show different ways to create\n# Counter\nfrom collections import Counter\n\n# With sequence of items \nprint(Counter(['B','B','A','B','C','A','B','B','A','C']))\n# with dictionary\nprint(Counter({'A':3, 'B':5, 'C':2}))\n# with keyword arguments\nprint(Counter(A=3, B=5, C=2))\n\n# output\n# Counter({'B': 5, 'A': 3, 'C': 2})\n# Counter({'B': 5, 'A': 3, 'C': 2})\n# Counter({'B': 5, 'A': 3, 'C': 2})\n\ncoun = Counter()\ncoun.update([1, 2, 3, 1, 2, 1, 1, 2]) # Counter({1: 4, 2: 3, 3: 1})\ncoun.update([1, 2, 4]) # Counter({1: 5, 2: 4, 3: 1, 4: 1})\n\n# Python program to demonstrate that counts in \n# Counter can be 0 and negative\nc1 = Counter(A=4,  B=3, C=10)\nc2 = Counter(A=10, B=3, C=4)\nc1.subtract(c2) #  Counter({'c': 6, 'B': 0, 'A': -6})\nc1 - c2 ##  Counter({'c': 6, 'B': 0, 'A': -6})",
            "title": "Counter"
        },
        {
            "location": "/python3/#type-hint-type-annotation",
            "text": "REF: https://www.daleseo.com/python-type-annotations/   def greeting(name: str) -> str:\n    return 'Hello ' + name",
            "title": "Type Hint (Type Annotation)"
        },
        {
            "location": "/python3/#variable-type-annotation",
            "text": "name: str = \"John Doe\"\nage: int = 25\nemails: list: [\"john1@doe.com\", \"john2@doe.com\"]\naddress: dict = {\n  \"state\": \"NM\",\n  \"zip\": \"80556\"\n}",
            "title": "Variable Type Annotation"
        },
        {
            "location": "/python3/#function-type-annotation",
            "text": "def stringify(num: int) -> str:\n    return str(num)\n\ndef plus(num1: int, num2: float = 3.5) -> float:\n    return num1 + num2\n\ndef greet(name: str) -> None:\n    return \"Hi! \" + str\n\ndef repeat(message: str, times: int = 2) -> list:\n    return [message] * times",
            "title": "Function Type Annotation"
        },
        {
            "location": "/python3/#type-module",
            "text": "from typing import List, Set, Dict, Tuple\n\nnums: List[int] = [1]\nunique_nums: Set[int] = {6, 7}\nvision: Dict[str, float] = {'left': 1.0, 'right': 0.9}\njohn: Tuple[int, str, List[float]] = (25, \"John Doe\", [1.0, 0.9])",
            "title": "Type Module"
        },
        {
            "location": "/python3/#final-constraint-union-multiple-types",
            "text": "from typing import Final, Union\n\nTIME_OUT: Final[int] = 10\n\ndef toString(num: Union[int, float]) -> str:\n    return str(num)\n\ntoString(1)\ntoString(1.5)",
            "title": "Final (Constraint), Union (Multiple Types)"
        },
        {
            "location": "/python3/#optional",
            "text": "Optional\uc740 None\uc774 \ud5c8\uc6a9\ub418\ub294 \ud568\uc218\uc758 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0c0\uc785\uc744 \uba85\uc2dc\ud560 \ub54c \uc720\uc6a9  from typing import Optional\n\ndef repeat(message: str, times: Optional[int] = None) -> list:\n    if times:\n        return [message] * times\n    else:\n        return [message]",
            "title": "Optional"
        },
        {
            "location": "/python3/#callable-function-type-annotation",
            "text": "from typing import Callable\n\ndef repeat(greet: Callable[[str], str], name: str, times: int = 2) -> None:\n    for _ in range(times):\n        print(greet(name))\n\n# Lamda\ngreet: Callable[[str], str] = lambda name: f\"Hi, {name}!\"",
            "title": "Callable (Function Type Annotation)"
        },
        {
            "location": "/python3/#abstraction-type-annotation",
            "text": "from typing import Iterable, List\n\ndef toStrings(nums: Iterable[int]) -> List[str]:\n    return [str(x) for x in nums]   Other types:  Sequence ,  Mapping ,  MutableMapping",
            "title": "Abstraction Type Annotation"
        },
        {
            "location": "/python3/#user-type-annotation",
            "text": "class User:\n    ...\n\ndef find_user(id: str) -> User:\n    ...\n\ndef create_user(user: User) -> User:\n    ...",
            "title": "User Type Annotation"
        },
        {
            "location": "/python3/#type-check",
            "text": "pip install mypy\nmypy our_file.py our_directory",
            "title": "Type Check"
        },
        {
            "location": "/python3/#environment-variables",
            "text": ">>> import os\n>>> user = os.environ['USER']\n>>> user\n'willing'",
            "title": "Environment Variables"
        },
        {
            "location": "/python3/#file",
            "text": "",
            "title": "File"
        },
        {
            "location": "/python3/#create-write",
            "text": "try:\n    #  w: write, +: newly\n    with open('docs/readme.txt', 'w+') as f:\n        f.write('Create a new text file!')\nexcept FileNotFoundError:\n    print(\"The 'docs' directory does not exist\")  f = open('docs/readme.txt', 'w+')\nf.write(\"write data\")\nf.close()",
            "title": "Create, Write"
        },
        {
            "location": "/python3/#exist",
            "text": "import os.path\nfrom os import path\npath.exists(\"guru99.txt\")",
            "title": "Exist"
        },
        {
            "location": "/python3/#copy",
            "text": "shutil.copyfile(original, target) # copy a file to a target file.\nshutil.copy(src, dest) # copy a file to a directory.",
            "title": "Copy"
        },
        {
            "location": "/python3/#get-files",
            "text": "import os\nimport glob\nfrom pprint import pprint as pp\nfile_info = {os.path.realpath(p) : os.stat(p).st_size for p in glob.glob('*.*')}\npp(file_info)\n{'/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.log': 68,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/a.txt': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.log': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/b.txt': 0,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/c.log': 68,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/err.log': 13,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/exceptional.py': 566,\n '/Users/Blidkaga/Documents/CodeLab/Python_Basic/words.py': 910}",
            "title": "Get files"
        },
        {
            "location": "/python3/#exception",
            "text": "https://docs.python.org/3/library/exceptions.html",
            "title": "Exception"
        },
        {
            "location": "/rust/",
            "text": "Rust\n\n\nA language empowering everyone to build reliable and efficient software.\n\n\n\n\nNote\n\n\n\uc774 \ubb38\uc11c\ub294 \nrust-first-steps\n, \nrust-lang.org\n, \nrust-doc\n \uc744 \ubcf4\uace0 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nRust\n\n\nWhy Rust?\n\n\nPerformance\n\n\nReliability\n\n\nProductivity\n\n\n\n\n\n\nRoadamp to improve\n\n\nRust \ud2b9\uc131\n\n\n\ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131\n\n\nRust module system\n\n\nRust standard libary and useful crates\n\n\nHow to use crates?\n\n\n\n\n\n\nTerms\n\n\nLatest version\n\n\nRust installation\n\n\nCargo\n\n\nCargo versioning\n\n\nCargo.toml (TOML file for cargo config)\n\n\nCargo.lock\n\n\nUseful development tool\n\n\nRust build tools\n\n\nRustup & cargo command completion\n\n\nRust Cookbook\n\n\n\n\n\n\nHelloworld with cargo\n\n\nHow to add external crates\n\n\nEnabling rust backtrace\n\n\nRust macro\n\n\nprintln!\n, \nprint!\n\n\ntodo!\n\n\npanic!\n\n\ndbg!\n\n\n\n\n\n\nPrelude (imported std libraries)\n\n\nRust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c)\n\n\nReferences and Borrowing\n\n\nRust Syntax\n\n\nComments\n\n\nDocument comments\n\n\nConstants and Variables\n\n\nBuilt-in scalar data types\n\n\nChar type\n\n\nCompound Types\n\n\nTuple Type\n\n\nArray Type\n\n\n&str\uacfc String Type\n\n\nFunctions\n\n\nDiverging functions\n\n\nAssociated function indication \n::\n\n\nclosure\n\n\nCall chaining using closure\n\n\nStatements and expressions\n\n\nControl flow\n\n\nif..else\n:\n\n\nloop\n, \nwhile\n and \nfor\n\n\nmatch\n\n\nResult type\n\n\nReference\n\n\nmethods\n\n\nField Init Shorthand\n\n\nStruct Update Syntax\n\n\nTuple Structs\n\n\n\n\n\n\nGenerics\n\n\nGeneric Type\n\n\nGeneric functions\n\n\nGeneric Implementations (Generic methods)\n\n\nBounds\n\n\nWhere clause\n\n\nAssociated types\n\n\nPhantom type parameters\n\n\n\n\n\n\nTraits\n\n\nTo be considered\n\n\ncollections\n\n\nBox, stack and heap\n\n\nString\n\n\nhash map\n\n\n\n\n\n\nUseful code or crates\n\n\nRead stdin\n\n\n\n\n\n\nModules\n\n\nMacro\n\n\nTesting\n\n\nRust Attributes\n\n\nScope\n\n\nAttribute arguments\n\n\nFrequently Used Attributes\n\n\nCustom cfg\n\n\nderive\n attribute\n\n\n\n\n\n\nKeywords\n\n\ncrate\n\n\n\n\n\n\nGood answer to understand\n\n\nAssociated items\n\n\nRust RFC\n\n\n\n\nWhy Rust?\n\n\n\n\nPerformance\n\n\nReliability\n\n\nProductivity\n\n\n\n\nPerformance\n\n\nRust is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages.\n\n\nReliability\n\n\nRust\u2019s rich type system and ownership model guarantee memory-safety and thread-safety \u2014 enabling you to eliminate many classes of bugs at compile-time.\n\n\nProductivity\n\n\nRust has great documentation, a friendly compiler with useful error messages, and top-notch tooling \u2014 an integrated package manager and build tool, smart multi-editor support with auto-completion and type inspections, an auto-formatter, and more.\n\n\nRoadamp to improve\n\n\n\n\nBuilding tools; \uc9c1\uad00\uc801\uc774\uace0 \uac04\ub2e8\ud55c building, packaging tool \uc9c0\uc6d0\n\n\nWeb\u00adAssembly (Writing Web Apps); Binary instruction set in web browsers\n\n\nWorking with servers (server-side code) \n\n\nEmbedded system\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \ud5a5\uc0c1\n\n\n\n\nRust \ud2b9\uc131\n\n\nOpen-source high-level and low-level system programming language\n\n\n\n\nType safe\n: The compiler assures that no operation will be applied to a variable of a wrong type.\n\n\nMemory safe\n: Rust pointers (known as references) always refer to valid memory.\n\n\nData race free\n: Rust's borrow checker guarantees thread-safety by ensuring that multiple parts of a program can't mutate the same value at the same time.\n\n\nZero-cost abstractions\n: Rust allows the use of high-level concepts, like iteration, interfaces, and functional programming, with minimal to no performance costs. The abstractions perform as well, as if you wrote the underlying code by hand.\n\n\nMinimal runtime\n: Rust has a very minimal and optional runtime. The language also has \nno garbage collector\n to manage memory efficiently. In this way Rust is most similar to languages like C and C++.\n\n\nTargets bare metal\n: Rust can target embedded and \"bare metal\" programming, making it suitable to write an operating system kernel or device drivers.\n\n\n\n\n\ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131\n\n\n\n\nVariable\uacfc function type\uc744 \uadf9\ub3c4\ub85c \uc81c\uc5b4\ud558\uc5ec gabage collection\uc774 \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e6\n\n\n\n\nRust module system\n\n\n\n\nCrates\n: It's the smallest piece of code the Rust compiler can run.\n\n\nModules\n: A number of modules become a crate; Related code items or items that are used together\n\n\nPath\n: Paths to access and use the code or items in Rust\n\n\nThird-party crate registry: \ncrates.io\n\n\n\n\nRust standard libary and useful crates\n\n\n\n\nstd\n - The Rust standard library. In the Rust exercises, you'll notice the following modules:\n\n\nstd::collections\n - Definitions for collection types, such as HashMap.\n\n\nstd::env\n - Functions for working with your environment.\n\n\nstd::fmt\n - Functionality to control output format.\n\n\nstd::fs\n - Functions for working with the file system.\n\n\nstd::io\n - Definitions and functionality for working with input/output.\n\n\nstd::path\n - Definitions and functions that support working with file system path data.\n\n\nstructopt\n - A third-party crate for easily parsing command-line arguments.\n\n\nchrono\n - A third-party crate to handle date and time data.\n\n\nregex\n - A third-party crate to work with regular expressions.\n\n\nserde\n - A third-party crate of serialization and deserialization operations for Rust data structures.\n\n\n\n\nHow to use crates?\n\n\nuse std::fmt\n\n\n\n\nTerms\n\n\n\n\nWasm (WebAssembly)\n\n\n\n\nWebAssembly\n (abbreviated \nWasm\n) is a binary instruction format for a stack-based virtual machine. \nWasm\n is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\n\n\nWebAssembly\n is a new type of code that can be run in modern web browsers \u2014 it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together.\n\n\n\n\n\n\nEmscripten SDK\n - compile wasm code and generate javascript stub and wasm binary.  \n\n\nDoc\n: \n\ud83d\udd17 WebAssembly\n\n\n\n\n\n\nLatest version\n\n\nVersion 1.60.0\n\n\nRust installation\n\n\n# Install rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Update rust\nrustup update\n\n# Uninstall rust\nrustup self uninstall\n\n\n\n\n\n\nvscode\n: \n\ud83d\udd17 ext install matklad.rust-analyzer\n\n\nvim\n: \n\ud83d\udd17 rust.vim\n\n\n\n\n\n\nAll tools including \nrustc\n, \ncargo\n, and \nrustup\n are installed to the \n~/.cargo/bin\n directory.\n\n\n\n\nCargo\n\n\ncargo\n is the rust build tool and package manager.\n\n\n\n\ncargo --version\n: check the rust version\n\n\ncargo new --vcs=git\n: create new project with \ngit init\n\n\ncargo new\n\n\ncargo build\n: build your project with\n\n\ncargo run\n: run your project with\n\n\ncargo test\n: test your project with\n\n\ncargo check\n: checks your code to make sure it compiles but doesn\u2019t produce an executable\n\n\ncargo doc\n: build documentation for your project with\n\n\ncargo doc --open\n: \ud604\uc7ac crate\uc758 html \ubb38\uc11c \uc0dd\uc131\n\n\ncargo publish\n: publish a library to \ncrates.io\n with\n\n\nAdd dependent crates to a project by adding the crate name to the Cargo.toml file.\n\n\ncargo fmt\n: reformats your code according to the community code style.\n\n\ncargo fix\n: Automatically fix lint warnings reported by rustc\n\n\n\n\n\n\nmanual\n: \n\ud83d\udd17 cargo doc\n\n\n\n\nCargo versioning\n\n\nCargo\ub294 \ubc84\uc804\uc744 \uba85\uc2dc\ud558\ub294 \ud45c\uc900\uc5d0 \ud574\ub2f9\ud558\ub294 \nSemantic Versioning(semver)\n\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4.\n\n\n# Example\nrand = \"0.8.3\"\n\n\n\n\nThe number 0.8.3 is actually shorthand for ^0.8.3, which means any version that is at least 0.8.3 but below 0.9.0. \n\n\nCargo.toml (TOML file for cargo config)\n\n\nCargo.toml\n: TOML\ub85c \uc815\uc758\ub41c cargo configuration file\n\n\nTOML's syntax primarily consists of key = \"value\" pairs, [section names], and # comments. TOML's syntax somewhat resembles that of .INI files, but it includes a formal specification, whereas the INI file format suffers from many competing variants.\n\n\nIts specification includes a list of supported data types: String, Integer, Float, Boolean, Datetime, Array, and Table.\n\n\n# This is a TOML document.\n\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00 # First class dates\n\n[database]\nserver = \"192.168.1.1\"\nports = [ 8000, 8001, 8002 ]\nconnection_max = 5000\nenabled = true\n\n[servers]\n\n  # Indentation (tabs and/or spaces) is allowed but not required\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"eqdc10\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ]\n\n# Line breaks are OK when inside arrays\nhosts = [\n  \"alpha\",\n  \"omega\"\n]\n\n\n\n\nCargo.lock\n\n\n\n\ngo.sum\n\uacfc \uac19\uc774 \ub2e4\uc6b4\ub85c\ub4dc\ud55c crate (package)\uc5d0 \ub300\ud55c version\uacfc \uc815\ubcf4\ub97c \uba85\uc138\ud558\uc5ec, \uc774\ud6c4 \ub3d9\uc77c\ud55c crate version\uc73c\ub85c build\uc758 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud568.\n\n\ncargo update\n: crate\uc758 minor version\ub9cc \uc5c5\ub370\uc774\ud2b8\ud568; major version\uc744 \ubcc0\uacbd\ud558\ub824\uba74, Cargo.toml\uc758 major version\uc744 \uc5c5\ub370\uc774\ud2b8\ud574\uc57c \ud55c\ub2e4.\n\n\n\n\nUseful development tool\n\n\nrustup component add rustfmt\nrustup component add clippy\n\n\n\n\n\n\ncargo fmt\n: \nrustfmt\n; Automatic Formatting development tool\n\n\ncargo fix\n: Automatically fix lint warnings reported by rustc\n\n\ncargo clippy\n: \nclippy\n; A collection of lints to analyze your code to catch common mistakes and improve your code.\n\n\n\n\nRust build tools\n\n\n\n\nrustc\n: Rust compiler\n\n\nrustup\n: Rust toolchain installer; Rust tool manager\n\n\nrustc --version\n: check rust version\n\n\nrustc RUST_FILE.rs\n: build the rust binary\n\n\n\n\n\n\n\ub2e4\uc74c tool \ud655\uc778 \ud544\uc694\n\n\nrustc\n, \nrustdoc\n, \nrustfmt\n, \nrust-gdb\n, \nrust-lldb\n, \nrustup\n\n\n\n\nRustup & cargo command completion\n\n\nRust build tool\uc5d0 \ub300\ud55c tab completion\n\n\nmkdir -p ~/.local/share/bash-completion/completions\nrustup completions bash rustup >> ~/.local/share/bash-completion/completions/rustup\nrustup completions bash cargo >> ~/.local/share/bash-completion/completions/cargo\nsource ~/.local/share/bash-completion/completions/rustup\nsource ~/.local/share/bash-completion/completions/cargo\n\n\n\n\nRust Cookbook\n\n\nRust crate\uc758 \uc885\ub958\ub97c \ubd84\ub958\ud55c cookbook\uc5d0\uc11c \ud544\uc694\ud55c library\ub97c \uac00\uc7a5 \uba3c\uc800 \ucc3e\uc790!\n\n\n\n\n\ud83d\udd17 \nRust Cookbook\n\n\n\n\nHelloworld with cargo\n\n\n# create new project\ncargo new hello-rust\ncd hello-rust\ntree\n#.\n#\u251c\u2500\u2500 Cargo.toml # for the metadata and dependencies of the project\n#\u2514\u2500\u2500 src # rust code\n#    \u2514\u2500\u2500 main.rs\n\n# fn main() is the starting point of all rust appliciations.\ncat src/main.rs \n# fn main() {\n#     println!(\"Hello, world!\");\n# }\n\n# Building and running\ncargo run\n#    Compiling hello-rust v0.1.0 (/home/neoul/projects/programming-note/rust/hello-rust)\n#     Finished dev [unoptimized + debuginfo] target(s) in 0.54s\n#      Running `target/debug/hello-rust`\n# Hello, world!\n\ntree\n#.\n#\u251c\u2500\u2500 Cargo.lock # [FIXME] what is it?\n#\u251c\u2500\u2500 Cargo.toml\n#\u251c\u2500\u2500 src\n#\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n#\u2514\u2500\u2500 target\n#    \u251c\u2500\u2500 CACHEDIR.TAG # \n#    \u2514\u2500\u2500 debug\n#        \u251c\u2500\u2500 build\n#        \u251c\u2500\u2500 deps\n#        \u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_rust-542ed0184760343f\n#        \u2502\u00a0\u00a0 \u2514\u2500\u2500 hello_rust-542ed0184760343f.d\n#        \u251c\u2500\u2500 examples\n#        \u251c\u2500\u2500 hello-rust\n#        \u251c\u2500\u2500 hello-rust.d\n#        \u2514\u2500\u2500 incremental\n\n\n\n\nHow to add external crates\n\n\n\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec \uc0ac\uc6a9\ubc95\n\n\n# Edit Cargo.toml\n[dependencies]\nferris-says = \"0.2\"\n\n\n\n\n// in rust code\nuse ferris_says::say;\n\n\n\n\ncargo build\n: Cargo will install our dependency for us.\n\n\nEnabling rust backtrace\n\n\nRust display the backtrace if running with \nRUST_BACKTRACE=1\n.\n\n\n$ ./main \n..\n$ RUST_BACKTRACE=1 ./main \nthread 'main' panicked at 'not yet implemented: To Do!', main.rs:2:5\nstack backtrace:\n   0: rust_begin_unwind\n...\n   2: main::main\n   3: core::ops::function::FnOnce::call_once\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\n\n\n\nRust macro\n\n\nRust macro\ub294 \uac1c\uc218\uac00 \uac00\ubcc0\uc801\uc778 \uc785\ub825 \uc778\uc218\ub97c \ucde8\ud558\ub294 \ud568\uc218\n\n\n\n\nprintln!\n, \nprint!\n\n\ntodo!\n\n\npanic!\n\n\ndbg!\n\n\n\n\nprintln!\n, \nprint!\n\n\n\uac00\ubcc0 \uc778\uc218\ub97c \ubc1b\uc544 \nstdout\n\uc5d0 \ucd9c\ub825\n\n\n// - If it called a function instead, it would be entered as println (without the `!`).\n// - \"Hello, world!\": string representation of the string\n// - {}\uc5d0 \uc778\uc218\uc758 \uac12 \ub300\uccb4 \uc0bd\uc785; placeholder\ub77c \ubd80\ub984\nprintln!(\"Hello, {}!\", \"world\");\n\n\n\n\ntodo!\n\n\n\uc644\uc131\ub418\uc9c0 \uc54a\uc740 \ud568\uc218\uc758 prototype \uc810\uac80 \ubc0f \uc120\uc5b8, \ud638\ucd9c\uc2dc exception \ubc1c\uc0dd\n\n\n// todo! - Display \"Hello, world!\" with an exception.\nfn main() {\n  todo!(\"Display the message by using the println!() macro\");\n}\n\n\n\n\npanic!\n\n\nThe call to \npanic!\n causes the error message contained in the last two lines.\n\n\nfn main() {\n    panic!(\"crash and burn\");\n}\n\n\n\n\ndbg!\n\n\nAnother way to print out a value using the Debug format is to use the \ndbg!\n macro, which takes ownership of an expression, prints the file and line number of where that dbg! macro call occurs in your code along with the resulting value of that expression, and returns ownership of the value.\n\n\n\n\nNote: print message to \nstderr\n.\n\n\n\n\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\nfn main() {\n    let scale = 2;\n    let rect = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n    let rect = dbg!(rect);\n    println!(\n        \"The area of the rectangle {:?} is {} square pixels.\",\n        rect,\n        area(&rect)\n    );\n}\nfn area(rect :&Rectangle) -> u32 {\n    return rect.width * rect.height;\n}\n// [src/main.rs:16] 30 * scale = 60\n// [src/main.rs:20] rect = Rectangle {\n//     width: 60,\n//     height: 50,\n// }\n// The area of the rectangle Rectangle { width: 60, height: 50 } is 3000 square pixels.\n\n\n\n\nPrelude (imported std libraries)\n\n\nThe prelude is the list of things that Rust automatically imports into every Rust program. \n\n\n\ud83d\udd17 Module std::prelude\n\n\nFor example ... \n\n\n\n\nstd::result::Result::{self, Ok, Err}\n, a type for functions that may succeed or fail. Like Option, its variants are exported as well.\n\n\nstd::string::{String, ToString}\n, heap-allocated strings.\n\n\nstd::vec::Vec\n, a growable, heap-allocated vector.\n\n\n\n\nRust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c)\n\n\n\n\nRust\uc758 \ubaa8\ub4e0 \uac12\uc740 owner\ub77c\ub294 \ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \ud558\ub098\uc758 \uac12\uc740 \ud558\ub098\uc758 owner \ubcc0\uc218\uc5d0\ub9cc \uc885\uc18d\ub420 \uc218 \uc788\uc74c\n\n\n\ub9cc\uc57d, copy trait\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba74, deep copy\ub97c \uc218\ud589\ud558\ub098 \uc544\ub2cc \uacbd\uc6b0 ownership move\uac00 \uc77c\uc5b4\ub0a8(?)\n\n\nownership move: \ub2e4\uc218\uc758 \ubcc0\uc218\uac00 \ud558\ub098\uc758 \uac12\uc744 \uac00\ub9ac\ud0ac \uc218 \uc5c6\uc73c\uba70, ownership move (\uc18c\uc720\uad8c \uc774\uc804)\uac00 \uc218\ud589\ub428\n\n\nowner\uac00 \uc885\uc18d \ubc94\uc704 (curly bracket)\uc744 \ubc97\uc5b4\ub098\uba74, drop (free)\ub428 (C++ RAII \ud328\ud134)\n\n\n\n\nlet s1 = String::from(\"hello\");\nlet s2 = s1;\n\n// String\uc740 copy trait\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc544 ownership move\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774\ud6c4 s1\uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc624\ub958 \ubc1c\uc0dd\n// error[E0382]: use of moved value: `rect` \ubc1c\uc0dd\n\n\n\n\n\n\n\ud568\uc218\uc5d0 \uac12\uc744 \uc778\uc790\ub85c \ub118\uae38 \uacbd\uc6b0 ownership\ub3c4 \ubcc0\uacbd\ub428\n\n\ndeep copy: copy trait\uc774 \uad6c\ud604\ub41c structure\ub098 built-in scalar\ub294 deep copy\ub97c \uc218\ud589\ud568\n\n\nshallow copy: rust\uc5d0\uc11c\ub294 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc74c\n\n\nheap\uc5d0 \ud560\ub2f9\ub418\ub294 \uac00\ubcc0 (mutable)\uc758 structure\ub294 \ubcf4\ud1b5 reference\ub85c ownership \uad00\ub9ac\ub97c \ud68c\ud53c\n\n\n\n\nHere are some of the types that implement Copy:\n\n\n\n\nAll the integer types, such as \nu32\n.\n\n\nThe Boolean type, \nbool\n, with values true and false.\n\n\nAll the floating point types, such as \nf64\n.\n\n\nThe character type, \nchar\n.\n\n\nTuples\n, if they only contain types that also implement Copy. For example, \n(i32, i32)\n implements Copy, but \n(i32, String)\n does not.\n\n\n\n\n\n\n\n\nhttps://velog.io/@timothy160620/Learning-Rust\n\n\nhttps://showx123.tistory.com/81\n\n\n\n\n\n\nReferences and Borrowing\n\n\n\n\nfn main() {\n    let mut s = String::from(\"hello\");\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n}\n\n\n\n\n\n\nNote: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, \n*\n. We\u2019ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.\n\n\n\n\nRust Syntax\n\n\nComments\n\n\nIn Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line.\n\n\n// Hello, world.\n\n\n\n\nDocument comments\n\n\nRust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. Documentation comments use three slashes, \n///\n, instead of two and support Markdown notation for formatting the text.\n\n\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n\n\n\nAnother style of doc comment, \n//!\n, is used to describe the crate introduction.\n\n\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n\n\n\n\n\n[FIXME] document comments \ub2e4\uc2dc \uc77d\uae30\n\n\n\n\nConstants and Variables\n\n\n\n\nA value is not assigned, it is binded to a variable. python\uacfc \uac19\uc740 bind \uac1c\ub150\uc744 \ucc28\uc6a9\ud568\n\n\nConstants must be computed at compile time.\n\n\nThe equal sign (\n=\n) tells Rust we want to bind something to the variable now. \n\n\n\n\n// \ud568\uc218 \uc120\uc5b8\nfn func()\n\n// \ubcc0\uc218 \uc120\uc5b8\nlet a_number;\n\n// \ubcc0\uc218\uc5d0 \uac12 \ubc14\uc778\ub529; variable binding to a value\n// variable binding == value assginment (\uac12\ud560\ub2f9)\nlet a_number = 10;\n\n// \uac12\uc774 \ubc14\uc778\ub529\ub41c \ubcc0\uc218\ub294 \uac12 re-\ubc14\uc778\ub529 \ubd88\uac00\ub2a5!!\na_number = 11;\n\n// mut (mutable, \ubcc0\ud560 \uc218 \uc788\ub294)\ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0\nlet mut b_number = 10;\n// variable binding \ubcc0\uacbd \uac00\ub2a5\nb_number = 11;\n\n// variable shadowing (\ubcc0\uc218 \uc100\ub3c4\uc789)\n// let\uc73c\ub85c \ub3d9\uc77c\uba85\uc758 \ubcc0\uc218\ub97c \uacc4\uc18d \uc120\uc5b8\ud560 \uc218 \uc788\uc74c\n// \uc774\uac83\uc73c\ub85c \ubcc0\uc218\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uacfc \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c\nlet x = 5;\nlet x = x + 1;\nlet x = x * 2;\nprintln!(\"The value of x is: {}\", x); // The value of x is: 12\n\n// shardowing\uc73c\ub85c \ubcc0\uc218\uc758 type\uc774 \ubcc0\uacbd\ub418\ub294 \uac83\ucc98\ub7fc \ub3d9\uc791\uc2dc\ud0ac \uc218 \uc788\ub2e4.\nlet spaces = \"   \";\nlet spaces = spaces.len(); // space\ub294 interger\uac00 \ub428\n\n// \ub9cc\uc57d, mut\ub97c \uc0ac\uc6a9\ud558\uac8c\ub418\uba74, type \ubcc0\uacbd\uc740 \ubd88\ud5c8\nlet mut spaces = \"   \";\nspaces = spaces.len(); // cause an error\n\n// constant (\uc0c1\uc218)\n// - constants use uppercase with underscores.\n// - constants must be computed at compile time.\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n\n\n\n\nBuilt-in scalar data types\n\n\nRust\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 scalar data type\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\ni8, i16, i32, i64 // signed integer number (default: i32)\nu8, u16, u32, u64 // unsigned integer number\nisize, usize // architecture-dependent number\nf32, f64 // floating point number (default f64)\nbool // true, false boolean value\nchar // A 21-bit integer represent a character \n     // that's padded to be 32 bits wide for unicode\n&str // a string slice consists of characters.\n     // This is immutable string data! (Read-only)\nString // It is mutable string data allocated to the heap area.\n\n\n\n\n\n\nRust is a statically typed language. \ub530\ub77c\uc11c compiler\uac00 \ubaa8\ub4e0 \ubcc0\uc218\uc758 \uc815\ud655\ud55c data type\uc744 \uc54c\uc544\uc57c \ud568\n\n\nlet VAR: TYPE\n\uc73c\ub85c variable\uc758 type\uc744 \uba85\uc2dc\n\n\nprintln!\n \uc0ac\uc6a9\uc2dc data type suffix\ub97c \ucd94\uac00\ud574 compiler\uac00 type\uc744 \uc778\uc9c0\ud558\ub3c4\ub85d \uc785\ub825\ud574\uc57c \ud568.\n\n\nString\n is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text. This is not a built-in type.\n\n\n\n\n// Integer literal\nlet _i = 1000; // i32 assigned by default\nlet _i: i32 = 1000i32; // suffix for type direction\nlet _i: i32 = 98_222; // = 98222 Decimal for visual separation\nlet _i: i32 = 0xff; // Hex\nlet _i: i32 = 0o77; // Octal\nlet _i: i32 = 0b1111_0000; // Binary\nlet _i: u8 = b'A'; // Byte (u8 only)\n\n// Float literal\nlet _number_64 = 4.0;      // compiler infers the value to use the default type f64\nlet _number_32: f32 = 5.0; // type f32 specified via annotation\n\n// All of the primitive number types in Rust support mathematical operations\n// like addition, subtraction, multiplication, and division.\n// When we call the println macro, we add the data type suffix \n// to each literal number to inform Rust about the data type. \n\n// Addition, Subtraction, and Multiplication\nprintln!(\"1 + 2 = {} and 8 - 5 = {} and 15 * 3 = {}\", 1u32 + 2, 8i32 - 5, 15 * 3);\n\n// Integer and Floating point division\nprintln!(\"9 / 2 = {} but 9.0 / 2.0 = {}\", 9u32 / 2, 9.0 / 2.0);\n\n// integer types\nlet sum = 5 + 10; // addition\nlet difference = 95.5 - 4.3; // subtraction\nlet product = 4 * 30; // multiplication\nlet quotient = 56.7 / 32.2; // division\nlet remainder = 43 % 5; // remainder\n\n// floating point types\nlet x = 2.0; // f64\nlet y: f32 = 3.0; // f32\n\n// boolean type\nlet t = true;\nlet f: bool = false; // with explicit type annotation\n\n// character\nlet c = 'z';\nlet z = '\u2124';\nlet heart_eyed_cat = '\ud83d\ude3b';\n\n\n\n\nChar type\n\n\n\n\nRust\u2019s \nchar\n type is four bytes in size and represents a Unicode Scalar Value.\n\n\nUnicode Scalar Values range from \nU+0000\n to \nU+D7FF\n and \nU+E000\n to \nU+10FFFF\n inclusive.\n\n\nchar\n type is a 21-bit integer represent a character that's padded to be 32 bits wide for unicode.\n\n\nChar literals use single quotes.\n'C'\n\n\nStoring UTF-8 Encoded Text with Strings\n\n\n\n\nCompound Types\n\n\nCompound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\n\n\nTuple Type\n\n\nTuples have a fixed length: once declared, they cannot grow or shrink in size.\n\n\nlet tup: (i32, f64, u8) = (500, 6.4, 1);\n\n// [Tuple destructuring]\n// To get the individual values out of a tuple ...\nlet tup = (500, 6.4, 1);\nlet (x, y, z) = tup;\nprintln!(\"The value of y is: {}\", y); // The value of y is: 6.4\n\n// [Access a tuple element directly]\nlet x: (i32, f64, u8) = (500, 6.4, 1);\nlet five_hundred = x.0;\nlet six_point_four = x.1;\nlet one = x.2;\n\n\n\n\n\n\n\u2753 The tuple without any values, (), is a special type that has only one value, also written (). The type is called the unit type and the value is called the unit value. Expressions implicitly return the unit value if they don\u2019t return any other value.\n\n\n\n\nArray Type\n\n\n\n\nUnlike a tuple, every element of an array must have the same type.\n\n\nUnlike arrays in some other languages, arrays in Rust have a fixed length.\n\n\nArrays are useful when you want your data allocated on the stack rather than the heap.\n\n\nFlexible size array\uac00 \ud544\uc694\ud558\ub2e4\uba74 \nVec<T>\n\ub97c \uc0ac\uc6a9\n\n\n\n\nlet a = [1, 2, 3, 4, 5];\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\nlet a: [i32; 5] = [1, 2, 3, 4, 5]; // [Type; Length]\nlet a = [3; 5]; // [3, 3, 3, 3, 3]\uc73c\ub85c \ucd08\uae30\ud654\n\n// [Access an array element]\nlet first = a[0];\nlet second = a[1];\n\n// mutable\ud574\uc57c Arrary element \ubcc0\uacbd \uac00\ub2a5\ud568\nlet mut a = [1, 2, 3, 4, 5];\na[1] = 100;\n\n\n\n\n&str\uacfc String Type\n\n\n\n\n&str as a pointer to immutable string data. String literals are all of type &str.\n\n\n\n\nFunctions\n\n\n\n\nfn\n keyward\ub97c \uc0ac\uc6a9\n\n\nAll letters of function names and variables are lowercase and underscores (\n_\n) separate words.\n\n\nA set of parentheses and curly brackets are followed to the function name.\n\n\nIn function signatures, you must declare the type of each parameter that you want to input.\n\n\nThe function returns a concrete type: The Rust compiler needs to know how much space every function's return type requires.\n\n\n\n\nfn main() {\n  another_function(5);\n  print_labeled_measurement(5, 'h');\n}\n\nfn another_function(x: i32) {\n  println!(\"The value of x is: {}\", x);\n}\n\nfn print_labeled_measurement(value: i32, unit_label: char) {\n  println!(\"The measurement is: {}{}\", value, unit_label);\n}\n\nfn four() -> i32 {\n  4; // error because it becomes a statement\n}\n\nfn five() -> i32 {\n  5 // no semicolon; return the value as an expression\n}\n\nfn six() -> i32 { // \uba85\uc2dc\uc801 \ubc18\ud658\n  return 6; // ok\n}\n\nfn seven() -> i32 {\n  return 7 // ok\n}\n\nfn main() {\n  let x = five();\n  println!(\"The value of x is: {}\", x);\n}\n\n\n\n\nDiverging functions\n\n\nDiverging functions never return. They are marked using \n!\n, which is an empty type.\n\n\n\n\nserver\ub4f1\uc758 non-terminated app\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub420 \ub4ef ...\n\n\n\n\nfn foo() -> ! {\n  panic!(\"This call never returns.\");\n}\n\n\n\n\nAssociated function indication \n::\n\n\nlet mut guess = String::new();\n\n\n\n\nThe \n::\n syntax in the \n::new\n line indicates that new is an associated function of the String type. An associated function is a function that\u2019s implemented on a type, in this case String.\n\n\nclosure\n\n\nClosures are functions that can capture the enclosing environment. For example, a closure that captures the x variable:\n\n\n|val| val + x\n\n\n\n\ncapturing\n and \nbollowing\n: closure \ud568\uc218\uac00 variable\uc5d0 \ud560\ub2f9\ub420 \ub54c \ub3d9\uc77c namespace\uc5d0 \uc788\ub294 \ubcc0\uc218\ub97c capture\ud558\uc5ec \uc0ac\uc6a9\ud568\n\n\nby reference: \n&T\n\n\nby mutable reference: \n&mut T\n\n\nby value: \nT\n\n\nmove\n \uc0ac\uc6a9\uc2dc variable\uc758 ownership\uc744 \uac00\uc838\uac10 \n\n\ne.g. \nlet contains = move |needle| haystack.contains(needle);\n\n\ninput & output parameter\ub85c \uc0ac\uc6a9\uac00\ub2a5\n\n\ntype bound\uc5d0 \uc544\ub798\uc640 \uac19\uc740 argument function\uc758 trait\uc744 \uc9c0\uc815\ud574\uc57c \ud568\n\n\nFn\n: the closure uses the captured value by reference (\n&T\n)\n\n\nFnMut\n: the closure uses the captured value by mutable reference (\n&mut T\n)\n\n\nFnOnce\n: the closure uses the captured value by value (\nT\n)\n\n\n\n\n\n\niterator \ub3d9\uc791\uc744 \uad6c\ud604\ud560 \ub54c \uc0ac\uc6a9 e.g. \nIterator::any\n\n\n\n\n// Increment via closures and functions.\nfn function(i: i32) -> i32 {\n    i + 1\n}\n\n// Closures are anonymous, here we are binding them to references\n// Annotation is identical to function annotation but is optional\n// as are the `{}` wrapping the body. These nameless functions\n// are assigned to appropriately named variables.\nlet closure_annotated = |i: i32| -> i32 { i + 1 };\nlet closure_inferred = |i| i + 1;\n\nlet mut i = 1;\ni = function(i); // 2\ni = closure_annotated(i); // 3\ni = closure_inferred(i); // 4\nprintln!(\"closure example i: {}\", i);\n// let i = 1;\n// Call the function and closures.\nprintln!(\"function: {}\", function(i)); // 5\nprintln!(\"closure_annotated: {}\", closure_annotated(i)); // 5\nprintln!(\"closure_inferred: {}\", closure_inferred(i)); // 5\n\n// A closure taking no arguments which returns an `i32`.\n// The return type is inferred.\nlet one = || 1;\nprintln!(\"closure returning one: {}\", one());\n\nuse std::mem;\nlet color = String::from(\"green\");\n\n// bollow immutable reference of the color variable.\nlet print = || println!(\"`color`: {}\", color);\nprint();\n\nlet _reborrow = &color;\nprint();\n\n// A move or reborrow is allowed after the final use of `print`\nlet _color_moved = color;\n// print(); // \ud638\ucd9c \ubd88\uac00; color already moved to _color_moved\n\n\nlet mut count = 0;\n// bollow mutable count reference.\nlet mut inc = || {\n    count += 1;\n    println!(\"`count`: {}\", count);\n};\n\n// Call the closure using a mutable borrow.\ninc();\n\n// The closure no longer needs to borrow `&mut count`. Therefore, it is\n// possible to reborrow without an error\nlet _count_reborrowed = &mut count; \n\n// `consume` consumes the variable so this can only be called once.\nlet movable = Box::new(3);\nlet consume = || {\n    println!(\"`movable`: {:?}\", movable);\n    mem::drop(movable);\n};\nconsume();\n// consume(); // \ud638\ucd9c \ubd88\uac00; The bollowed variable is not available.\n// ^ TODO: Try uncommenting this line.\n\n// move \uc0ac\uc6a9\uc2dc ownership\uc744 \uac00\uc838\uac10\nlet haystack = vec![1, 2, 3];\nlet contains = move |needle| haystack.contains(needle);\nprintln!(\"{}\", contains(&1));\n\n// Functional approach\nlet sum_of_squared_odd_numbers: u32 =\n    (0..).map(|n| n * n)                             // All natural numbers squared\n          .take_while(|&n_squared| n_squared < upper) // Below upper limit\n          .filter(|&n_squared| is_odd(n_squared))     // That are odd\n          .fold(0, |acc, n_squared| acc + n_squared); // Sum them\nprintln!(\"functional Approach: {}\", sum_of_squared_odd_numbers);\n\n\n\n\nCall chaining using closure\n\n\n// call chaining using closure\nfn is_odd(n: u32) -> bool {\n    n % 2 == 1\n}\nlet upper = 1000;\nlet sum_of_squared_odd_numbers: u32 = (0..)\n    .map(|n| n * n) // All natural numbers squared\n    .take_while(|&n_squared| n_squared < upper) // Below upper limit\n    .filter(|&n_squared| is_odd(n_squared)) // That are odd\n    .fold(0, |acc, n_squared| acc + n_squared); // Sum them\nprintln!(\"functional Approach: {}\", sum_of_squared_odd_numbers);\n\n\n\n\nStatements and expressions\n\n\nRust\ub294 Statement\uc640 expression\uc758 \uad6c\ubd84\uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ud655\ud568.\n\n\n\n\nStatements are instructions that perform some action and do not return a value.\n\n\nExpressions evaluate to a resulting value and return the result value.\n\n\nExpressions do not include ending semicolons.\n\n\nIf you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value.\n\n\njavascript\uc640 \uc720\uc0ac\ud558\uac8c \uc138\ubbf8\ucf5c\ub860(\n;\n) \uc5c6\uc774 function \ub9c8\uc9c0\ub9c9 \ubb38\uc7a5\uc774 \ub05d\ub098\uba74, \uadf8 \ub9c8\uc9c0\ub9c9 \uacb0\uacfc\ub97c \ubc18\ud658\ud568 (as an expression)\n\n\n\n\n\n\nExpressions in rust: function call, value, {} (\ube14\ub85d)\n\n\n\n\nfn main() {\n  // error \ubc1c\uc0dd let y\ub294 return value \uc5c6\uc74c\n  // expression\uc774 \uc544\ub2c8\ubbc0\ub85c x\uc5d0 binding \ubd88\uac00\n  let x = (let y = 6);\n\n  // 4\ub85c \ud310\uc815\ub41c {} \uc548\uc758 \uac12\uc774 y\uc5d0 \ud560\ub2f9\n  // x + 1\uc5d0\ub294 \uc138\ubbf8\ucf5c\ub860(;) \uc774 \uc5c6\uc73c\uba70 expression\uc73c\ub85c \ud310\uc815, \uac12\uc744 \ubc18\ud658\n  let y = {\n    let x = 3;\n    x + 1\n  };\n  println!(\"The value of y is: {}\", y);\n}\n\n\n\n\nControl flow\n\n\nif..else\n:\n\n\n\n\ncondition\uc740 \ubc18\ub4dc\uc2dc boolean\uc744 \ubc18\ud658\ud574\uc57c \ud568\n\n\nparenthesis \n()\n \ub294 \uc0ac\uc6a9\uc548\ud568\n\n\narms\n: \uac08\ub798?; condition\uc5d0 \ub530\ub77c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ube14\ub85d\uc744 \ub9d0\ud568\n\n\nlet\n \ud560\ub2f9 \uc5f0\uc0b0 (\n=\n)\uc5d0 \nif..else\n \uc0ac\uc6a9 \uac00\ub2a5\n\n\n\n\nlet number = 6;\nif number % 4 == 0 {\n  println!(\"number is divisible by 4\");\n} else if number % 3 == 0 {\n  println!(\"number is divisible by 3\");\n} else if number % 2 == 0 {\n  println!(\"number is divisible by 2\");\n} else {\n  println!(\"number is not divisible by 4, 3, or 2\");\n}\n\nif number { // error - expected bool, found integral variable\n  println!(\"number was three\");\n}\n\n// \nlet number = if condition > 4 {\n  if condition > 8 {\n    11\n  } else {\n    5\n  }\n} else {\n  3\n};\n\nprintln!(\"The value of number is: {}\", number); // 5\n\n\n\n\nloop\n, \nwhile\n and \nfor\n\n\nloop {\n  println!(\"again!\");\n  // ...\n  break;\n}\n\nlet mut number = 3;\nwhile number != 0 {\n  println!(\"{}!\", number);\n  number = number - 1;\n  println!(\"LIFTOFF!!!\");\n}\n\n\nlet a = [10, 20, 30, 40, 50];\nfor element in a.iter() {\n  // for\ubb38 \ub0b4\uc5d0\uc11c element \uc0ad\uc81c\ud574\ub3c4 panic X\n  println!(\"the value is: {}\", element);\n}\n\n// range\nfor number in (1..4).rev() {\n  println!(\"{}!\", number);\n}\nprintln!(\"LIFTOFF!!!\");\n\n\n\n\nmatch\n\n\nfn main() {\n  // Destructuring values in match\n  // - rust\ub294 \ubcf5\uc7a1\ud55c type\uc744 match\ub85c wrapping structure\ub97c \ubc97\uaca8\ub0b4\uc5b4 \ucc98\ub9ac\ud568\n  // - destructuring type\uc774 \ub2e4\ub97c \uacbd\uc6b0 match, if let \ud560\ub2f9 \ubd88\uac00\n  // - destructuring \n  let member = 13;\n  match member {\n      1 => println!(\"1\"),\n      2 | 3 | 4 => println!(\"2,3,4\"),\n      5..=10 => println!(\"5..10\"),\n      _ => println!(\"_\")\n  }\n\n  // tuple\n  let triple = (0, 1, -3);\n  match triple {\n      (0, y, z) => println!(\"{},{}\", y, z),\n      (1, ..) => println!(\"first is 1\"), // .. ignore the rest\n      _ => println!(\"??\")\n  }\n\n  // arrays/slices\n  let array = [3, -2, 6];\n  match array {\n      [0, second, third] => {\n          println!(\"second {}, thrid {}\", second, third);\n      }\n      [1, _, third] => println!(\"thrid {}\", third), // ignore a value with _\n      // The code below would not compile\n      // [-1, second] => println!(\"compile error\"),\n      // store middle values to another array/slice\n      [3, middle @.., last] => println!(\"{:?} {:?}\", middle, last),\n      _ => ()\n  }\n\n  // enums\n  #[allow(dead_code)]\n  #[derive(Debug)]\n  enum Color {\n      Red,\n      Blue,\n      Green,\n      RGB(u32, u32, u32),\n      CMYK(u32, u32, u32, u32)\n  }\n  let color = Color::RGB(122, 17, 40);\n  match color {\n      Color::Red   => println!(\"The color is Red!\"),\n      Color::Blue  => println!(\"The color is Blue!\"),\n      Color::Green => println!(\"The color is Green!\"),\n      Color::RGB(r, g, b) =>\n          println!(\"Red: {}, green: {}, and blue: {}!\", r, g, b),\n      Color::CMYK(c, m, y, k) =>\n          println!(\"Cyan: {}, magenta: {}, yellow: {}, key (black): {}!\",\n              c, m, y, k),\n      // all matching case must be in the scope.\n  }\n\n  // pointers/ref\n  // dereference in matching\n  let reference: &u32 = &4;\n  match reference {\n      &val => println!(\"{:?}\", val) // if matched, it drops `&`\n  }\n  // To avoid the `&`, you dereference before matching.\n  match *reference {\n      val => println!(\"{:?}\", val)\n  }\n\n  let _not_a_reference = 3;\n  let ref _is_a_reference = 3; // &i32; explicit reference\n  let value = 5;\n  let mut mut_value = 6;\n\n  let rr = match value { // create the reference of r\n      ref r => r\n  };\n  println!(\"{:?}, {:?}\", value, rr);\n  match mut_value {\n      ref mut m => {\n          // Got a reference. Gotta dereference it before we can add anything to it.\n          *m += 10;\n          println!(\"We added 10. `mut_value`: {:?}\", m);\n      },\n  }\n\n  // structs\n  #[allow(dead_code)]\n  struct Foo {\n      x: (u32, u32),\n      y: u32\n  }\n  let foo = Foo {x: (10, 20), y: 30};\n  match foo { \n      Foo { x: (1, b), y: c } => println!(\"b={:?} c={:?}\", b, c),\n      Foo {y, ..} => println!(\"y={:?}, others=Don't Care\", y) // match any values\n  }\n\n  // Guards\n  let pair = (3, 1);\n  match pair {\n      (x, y) if x == y => println!(\"Twins!\"),\n      (x, _) if x%2 == 1 => println!(\"The first odd!\"),\n      _ => println!(\"no correlation ...\")\n  }\n\n  // binding to a value with inclusive range\n  let num = 3;\n  // @1..=10 inclusive range \uc0ac\uc6a9\ud574\uc57c \ud568\n  // exclusive range = @1..10\n  match num {\n      n @1..=10 => println!(\"num in 1..10 {}\", n),\n      n => println!(\"num {}\", n)\n  }\n\n  // binding to an enum variant value\n  #[allow(dead_code)]\n  fn some_number() -> Option<u32> {\n      Some(42)\n  }\n  match some_number() {\n      Some(n @ 42) => println!(\"Binding to an enum variant with value {:?}\", n),\n      Some(n) => println!(\"Binding to an enum variant {:?}\", n),\n      _ => ()\n  }\n\n  // match assign\n  let option = Some(10);\n  let i = match option {\n      Some(i) => i,\n      _ => panic!(\"?\"),\n  };\n  println!(\"{}\", i);\n\n  // if let\n  let num = Some(7);\n  let letter: Option<i32> = None;\n  // let emotion: Option<i32> = None;\n  if let Some(i) = num {\n      println!(\"i = {}\", i);\n  } else {\n      println!(\"destructuring failed ...\");\n  }\n\n  // match any enum value using if let\n  if let None = letter {\n      println!(\"letter is None\");\n  }\n\n  if let Color::Blue = color {\n      println!(\"Blue\");\n  } else if let Color::RGB(x, _, z @1..=100) = color {\n      println!(\"x={}, z={}\", x, z);\n  } else {\n      println!(\"{:?}\", color);\n  }\n\n  // while let\n  let mut optional = Some(0);\n  while let Some(i) = optional {\n      if i > 9 {\n          optional = None;\n      } else {\n          optional = Some(i+ 1);\n      }\n  }\n  optional = Some(0);\n  loop { // while let\uacfc \ub3d9\uc77c \ub3d9\uc791\n      match optional {\n          Some(i) => {\n              if i > 9 {\n                  optional = None;\n              } else {\n                  optional = Some(i+1);\n              }\n          },\n          _ => break\n      }\n  }\n}\n\n\n\n\nResult type\n\n\nRust\ub294 result type\uc740 \uc5f4\uac70\ud615(enumerations)\uc758 \uc5d0\ub7ec\ucc98\ub9ac \uc815\ubcf4\n\n\nvariants: enumeration data\n\n\n// io::Result\npub type Result<T> = Result<T, Error>;\n\n// std::result::Result\nEnum std::result::Result\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\n\n\n\nReference\n\n\nmethods\n\n\nRust\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 struct\uc640 method\ub97c \uc815\uc758\ud55c\ub2e4.\n\n\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    // method definition in implement block\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    // Associated Functions\n    fn square(size: u32) -> Rectangle {\n        Rectangle{\n            width: size,\n            height: size,\n        }\n    }\n}\n\nfn main() {\n    let scale = 2;\n    let rect = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n\n    // dbg! return the ownership of the input object\n    let rect = dbg!(rect);\n\n    println!(\n        \"The area of the rectangle {:?} is {} square pixels.\",\n        rect,\n        rect.area()\n    );\n\n    let square = Rectangle::square(100);\n    let rect1 = Rectangle { height: 50, width: 30 };\n    let rect2 = Rectangle { height: 40, width: 10 };\n    let rect3 = Rectangle { height: 45, width: 60 };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n    println!(\"Can square hold rect1? {}\", square.can_hold(&rect1));\n}\n\n\n\n\n\n\nThe \n&self\n is actually short for \nself: &Self\n.\n\n\nmutable \uc120\uc5b8\uc2dc, \n&mut self\n, field \uc218\uc815 \uac00\ub2a5\n\n\nNote that the entire instance must be mutable; Rust doesn\u2019t allow us to mark only certain fields as mutable.\n\n\nAssociated Function\uc740 self\uac00 \uc5c6\ub294 \uad00\ub828 \ud568\uc218 (class \ud568\uc218\uc640 \uc720\uc0ac), \uc0dd\uc131\uc790 \ud568\uc218\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\n\n\nAssociated Function\uc740 struct\uc5d0 \ub300\ud55c namespace syntax(\n::\n)\ub85c \uc811\uadfc/\uc0ac\uc6a9 \uac00\ub2a5\n\n\n\ub2e4\uc218\uc758 impl block \uc0ac\uc6a9 \uac00\ub2a5\n\n\n\n\nField Init Shorthand\n\n\n\uc0dd\uc131\ud568\uc218\uc5d0\uc11c field name\uacfc function argument\uc744 \ub3d9\uc77c\ud558\uac8c \uc785\ub825\ud558\uc5ec \uc9e7\uac8c \uc4f0\ub294 \ubc29\ubc95\n\n\nfn build_user(email: String, username: String) -> User {\n  User {\n    email, // field init shorthand\n    username,\n    active: true,\n    sign_in_count: 1,\n  }\n}\n\n\n\n\nStruct Update Syntax\n\n\n\uc55e\uc11c \uc0ac\uc6a9\ud55c \uc778\uc2a4\ud134\uc2a4\uc758 \uac12\uc744 \uc0ac\uc6a9\ud574 \uad6c\uc870\uccb4 \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ubc29\ubc95\n\n\nfn main() {\n  // --snip--\n  let user1 = User {\n      // init ...\n  };\n\n  let user2 = User {\n      email: String::from(\"another@example.com\"),\n      ..user1 // user1\uc758 \uac12\uc73c\ub85c structure update\n  };\n}\n\n\n\n\n\n\nNote that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the \n\u201cWays Variables and Data Interact: Move\u201d\n section. In this example, we can no longer use user1 after creating user2 because the String in the username field of user1 was moved into user2. The types of active and sign_in_count are types that implement the Copy trait, so the behavior we discussed in the \n\u201cStack-Only Data: Copy\u201d\n section would apply.\n\n\n\n\nTuple Structs\n\n\n\n\nTuple\uacfc \uc720\uc0ac\ud55c \uad6c\uc870\uccb4\ub85c filed name\uc774 \uc5c6\uc774 field type\ub9cc\uc744 \uc815\uc758\ud55c \uad6c\uc870\uccb4\n\n\nNamed tuple\n\n\n\n\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n\n\n\n\nGenerics\n\n\nGenerics is the topic of generalizing types and functionalities to broader cases. This is extremely useful for reducing code duplication in many ways, but can call for rather involved syntax. \n\n\n\n\nGeneric type\n: Generic type parameter \n<T>\n\uac00 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 type\n\n\nConcrete type\n: generic type parameter\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 (type\uc774 \uba85\uc2dc\ub41c) \ubaa8\ub4e0 type\n\n\nGeneric bounds\n: Generic type\uc774 \uac00\uc838\uc57c \ud560 type\uc758 \ud2b9\uc131\uc744 \uaddc\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9 \n<T: Bounds>\n; \uc8fc\ub85c trait\uc774 bound\ub85c \uc4f0\uc784 e.g. \nfn printme<T: std::fmt::Debug> (x: T)\n\n\nIt places further constraints on the kind of the Generic types.\n\n\nwhere\n can also be used to apply bounds in some cases to be more expressive.\n\n\nMultiple generic bounds\n: Multiple bounds for a single type can be applied with a \n+\n. Like normal, different types are separated with \n,\n. e.g. \nfn compare_prints<T: Debug + Display>(t: &T)\n\n\nAssociated types\n: trait generics\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 type\uc744 \uc815\uc758\ud558\uc5ec \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95\n\n\n\n\n\n\nGood Aricle: \nUsing Generic Types in Rust\n\nThe combination of generics and traits in Rust gives us the same kind of flexibility that we are seeking in a dynamically typed language, but without any of the runtime tradeoffs. \n\n\n\n\nGeneric Type\n\n\nstruct A; // A concrete type\nstruct Single(A); // A concrete type; a tuple structure\nstruct SingleGen<T>(T); // A generic type\nlet _char: SingleGen<char> = SingleGen('a');\nlet _t    = SingleGen(A); // Uses `A` defined at the top.\nlet _i32  = SingleGen(6); // Uses `i32`.\nlet _char = SingleGen('a'); // Uses `char`.\n\n\n\n\nGeneric functions\n\n\nfn foo<T>(arg: T) { ... }\nfn bar(s: SGen<A>) { ... } // not a generic function\n\ngeneric::<char>(SGen('a')); // call with explicitly specified type parameters\ngeneric(SGen('c')); // call with implicitly specified type parameters\n\n\n\n\nGeneric Implementations (Generic methods)\n\n\nstruct S; // Concrete type `S`\nstruct GenericVal<T>(T); // Generic type `GenericVal`\n\n// implementation \uc120\uc5b8\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 type\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc74c\nimpl GenericVal<f32> {} // Specify `f32`\nimpl GenericVal<S> {} // Specify `S` as defined above\n\n// `<T>` Must precede the type to remain generic\nimpl<T> GenericVal<T> {}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\n// NewStruct doesn't use any generic types,\n// so we don't need to specify any here.\nstruct NewStruct {}\nimpl NewStruct {\n    // We can still, however, define our own generic parameters\n    // on an individual method as desired\n    fn x<T>(&self, foo: T) -> T {\n        foo\n    }\n}\n\n\n\n\nBounds\n\n\nWhere clause\n\n\nWhere clause\ub294 generic bound\uc5d0\uc11c \uc120\ud589 \ud45c\ud604\ub418\ub294 \ubcf5\uc7a1\ud55c type \uc815\uc758\ub97c \ud6c4\uc704\uc5d0 \ud45c\ud604\ud558\uc5ec \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95\n\n\n// \uc120\ud589 \ud45c\ud604\nimpl<K:Hash+Eq,V> HashMap<K, V> {}\n\n// \ud6c4\uc704 \ud45c\ud604 with where\nimpl<K,V> HashMap<K, V>\n    where K : Hash + Eq {}\n\nimpl <A: TraitB + TraitC, D: TraitE + TraitF> MyTrait<A, D> for YourType {}\n\n// Expressing bounds with a `where` clause\nimpl <A, D> MyTrait<A, D> for YourType where\n    A: TraitB + TraitC,\n    D: TraitE + TraitF {}\n\n\n\n\n\n\nRust RFC for \nwhere\n\n\n\n\nAssociated types\n\n\nThe use of \"Associated types\" improves the overall readability of code by moving inner types locally into a trait as output types. Syntax for the trait definition is as follows:\n\n\n// TRAIT = TRAIT_HEADER '{' TRAIT_ITEM* '}'\n// TRAIT_ITEM =\n//   ... <existing productions>\n//   | 'const' IDENT ':' TYPE [ '=' CONST_EXP ] ';'\n//   | 'type' IDENT [ ':' BOUNDS ] [ WHERE_CLAUSE ] [ '=' TYPE ] ';'\n//   | 'lifetime' LIFETIME_IDENT ';'\n\ntrait Graph {\n    type N: Show + Hash;\n    type E: Show + Hash;\n    ...\n}\n\nimpl Graph for MyGraph {\n    // Both MyNode and MyEdge must implement Show and Hash\n    type N = MyNode;\n    type E = MyEdge;\n    ...\n}\n\nfn print_nodes<G: Graph>(g: &G) {\n    // here, can assume G::N implements Show\n    ...\n}\n\n\n\n\nhttps://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n\n\nPhantom type parameters\n\n\n\n\nphantom-data\n\n\nPhantom type parameters\n\n\n\n\nTraits\n\n\nA \ntrait\n is a collection of methods defined for an unknown type: \nSelf\n. They can access other methods declared in the same trait. Traits can be implemented for any data type.\n\n\n\n\nDerive: \n\n\nOperation overloading\n\n\nFn\n, \nFnMut\n, and \nFnOnce\n traits for types that can be invoked like functions\n\n\n+\n, \n+=\n, \n-\n, \n*\n, \n/\n ... for operator traits\n\n\nDrop\n: The \nDrop\n trait only has one method: \ndrop\n, which is called automatically when an object goes out of scope.\n\n\nThe main use of the Drop trait is to free the resources that the implementor instance owns.\n\n\nBox\n, \nVec\n, \nString\n, \nFile\n, and \nProcess\n: the types implemented the \nDrop\n trait\n\n\nIterators\n: The Iterator trait is used to implement iterators over collections such as arrays.\n\n\nfn next(&mut self) -> Option<Self::Item>\n \uad6c\ud604\ud574\uc57c \ud568\n\n\ndyn Trait: https://doc.rust-lang.org/rust-by-example/trait/dyn.html\n\n\nimpl Trait: https://doc.rust-lang.org/rust-by-example/trait/impl_trait.html\n\n\nCopy Trait: \ud560\ub2f9\uc2dc resource move\uac00 \uc544\ub2cc copy\n\n\nClone Trait: \n.clone()\n\uc73c\ub85c \uba85\uc2dc\uc801\uc73c\ub85c copy\n\n\nSupertraits: Rust doesn't have \"inheritance\", but you can define a trait as being a superset of another trait.\n\n\nDisambiguating overlapping traits\n\n\nhttps://cotigao.medium.com/dyn-impl-and-trait-objects-rust-fd7280521bea\n\n\nhttps://modoocode.com/334\n\n\n\n\nTo be considered\n\n\n\n\nInteger Overflow: https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow\n\n\n\uc5ed\ucc38\uc870 \uac15\uc81c(deref coercion)\n\n\n\n\ncollections\n\n\nBox, stack and heap\n\n\nAll values in Rust are stack allocated by default. Values can be boxed (allocated on the heap) by creating a \nBox<T>\n. A box is a smart pointer to a heap allocated value of type \nT\n. When a box goes out of scope, its destructor is called, the inner object is destroyed, and the memory on the heap is freed.\n\n\nuse std::mem;\n\n#[derive(Debug)]\n#[allow(dead_code)]\nstruct Point {\n    x: f64,\n    y: f64,\n}\n#[derive(Debug)]\n#[allow(dead_code)]\nstruct Rectangle {\n    top_left: Point,\n    bottom_right: Point,\n}\n\nfn origin() -> Point {\n    Point { x: 0f64, y: 0f64 }\n}\nfn boxed_origin() -> Box<Point> {\n    // allocate a point to heap\n    return Box::new(Point { x: 0.0, y: 0.0 });\n}\n\n// stack allocated variables\nlet point: Point = origin();\nlet rectangle: Rectangle = Rectangle {\n    top_left: origin(),\n    bottom_right: Point { x: 100.0, y: 100.0 },\n};\n// heap allocated variables\nlet box_point: Box<Point> = Box::new(origin());\nlet box_rectangle: Box<Rectangle> = Box::new(Rectangle {\n    top_left: origin(),\n    bottom_right: Point { x: 200.0, y: 200.0 },\n});\n\n// inner box in stack\nlet doubleIndirectBox: Box<Box<Point>> = Box::new(boxed_origin());\n\nprintln!(\"{point:?}\");\nprintln!(\n    \"Point occupies {} bytes on the stack\",\n    mem::size_of_val(&point)\n);\nprintln!(\n    \"Rectangle occupies {} bytes on the stack\",\n    mem::size_of_val(&rectangle)\n);\n\n// box size == pointer size\nprintln!(\n    \"Boxed point occupies {} bytes on the stack\",\n    mem::size_of_val(&box_point)\n);\nprintln!(\n    \"Boxed rectangle occupies {} bytes on the stack\",\n    mem::size_of_val(&box_rectangle)\n);\nprintln!(\n    \"Boxed box occupies {} bytes on the stack\",\n    mem::size_of_val(&doubleIndirectBox)\n);\n\n// Copy the data contained in `boxed_point` into `unboxed_point`\nlet unboxed_point: Point = *box_point;\nprintln!(\n    \"Unboxed point occupies {} bytes on the stack\",\n    mem::size_of_val(&unboxed_point)\n);\n\n\n\n\nString\n\n\n\n\nto_string()\n: Display trait\uc774 \uad6c\ud604\ub41c \ubaa8\ub4e0 type\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5\n\n\n+\n \uc5f0\uc0b0\ub3d9\uc791 \ucd94\ucc9c X\n\n\nString\uc758 index \uc811\uadfc \uae08\uc9c0\ub428\n\n\n\"\u0928\u092e\u0938\u094d\u0924\u0947\".chars()\n\uacfc \uac19\uc774 \ubb38\uc790\uc18c(grapheme)\ub85c \uc811\uadfc\ud574\uc57c \ud568\n\n\n\n\nlet data = \"initial contents\";\nlet s = data.to_string();\n// the method also works on a literal directly:\nlet s = \"initial contents\".to_string();\nlet s = String::from(\"initial contents\"); // \uc704\uc640 \ub3d9\uc77c\n\nlet mut s = String::from(\"foo\");\ns.push_str(\"bar\");\n\nlet mut s = String::from(\"lo\");\ns.push('l');\n\nlet s1 = String::from(\"Hello, \");\nlet s2 = String::from(\"world!\");\nlet s3 = s1 + &s2; // s1\uc740 \uc5ec\uae30\uc11c \uc774\ub3d9\ub418\uc5b4 \ub354\uc774\uc0c1 \uc4f8 \uc218 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\uc138\uc694\n\nlet s1 = String::from(\"tic\");\nlet s2 = String::from(\"tac\");\nlet s3 = String::from(\"toe\");\nlet s = format!(\"{}-{}-{}\", s1, s2, s3);\n\nfor c in \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() { // \ubb38\uc790\uc18c \ubc18\ud658\n    println!(\"{}\", c);\n}\nfor b in \"\u0928\u092e\u0938\u094d\u0924\u0947\".bytes() { // byte \ubc18\ud658\n    println!(\"{}\", b);\n}\n\n\n\n\nhash map\n\n\nUseful code or crates\n\n\nRead stdin\n\n\nuse std::io;\n// ...\n// Read a string from stdin\nlet mut index = String::new();\nio::stdin()\n    .read_line(&mut index)\n    .expect(\"Failed to read line\");\nlet index: usize = index\n    .trim()\n    .parse()\n    .expect(\"Index entered was not a number\");\n\n\n\n\n\nModules\n\n\nRust provides a powerful module system that can be used to hierarchically split code in logical units (modules), and manage visibility (public/private) between them.\n\n\nA module is a collection of items: functions, structs, traits, impl blocks, and even other modules.\n\n\n\n\nRust\uc758 module\uc774\ub780 \ucf54\ub4dc\ub97c \uacc4\uce35\ud654/\uc870\uc9c1\ud654 (namespace)\ud558\uace0, pub(public) \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc811\uadfc\uc131 \uc81c\uc5b4\ud558\uc5ec, \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \ubc29\ubc95\n\n\n\n\nmod my_mod { // module my_mod\n  pub fn public_func() {\n    // ... \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \uac00\ub2a5\n  }\n  fn private_func() {\n    // ... module \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \ubd88\uac00\n    // ... \uac19\uc740 module \ub0b4\uc5d0\uc120 \uc811\uadfc \uac00\ub2a5\n  }\n\n  pub mod nested_mod { // module nested_mod\n    pub(in crate::my_mod) fn nested_ {\n      // ... crate::my_mode\uc5d0\uc11c\ub9cc public function\n    }\n    pub(self) fn fname {\n      // ... pub(self) == private\n    }\n    pub(super) fn fname {\n      // ... parent module\uc5d0\uc11c\ub9cc \ubcf4\uc784\n    }\n  }\n\n  pub(crate) fn public_function_in_crate() {\n    // ... \uc18d\ud55c crate\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5\n  }\n}\n\n\n\n\nMacro\n\n\n\n\nmacro_rules\n allows users to define syntax extension in a declarative way.\n\n\nMacroRule\n = \nMacroMatcher => MacroTranscriber\n\ub85c \uad6c\uc131, \nMacroRule\n\uc740 \n;\n\uc73c\ub85c \uad6c\ubd84\n\n\nEach macro by example has a name, and one or more rules. Each rule has two parts: a matcher, describing the syntax that it matches, and a transcriber, describing the syntax that will replace a successfully matched invocation.\n\n\nBoth the matcher and the transcriber must be surrounded by delimiters. Macros can expand to expressions, statements, items (including traits, impls, and foreign items), types, or patterns.\n\n\nTranscribing\n: \ucc98\uc74c match\ub41c MacroMatcher\uc758 MacroTranscriber\ub85c code \ubcc0\ud658\ud558\uace0 \ubabb\ucc3e\uac70\ub098 \uc624\ub958 \ubc1c\uc0dd\uc2dc \uc911\ub2e8\n\n\n()\n, \n[]\n, \n{}\n \ubaa8\ub4e0 \uad04\ud638\ub294 MacroMatch, MacroRule\uc5d0\uc11c \ubaa8\ub450 \uc0ac\uc6a9\uac00\ub2a5\n\n\n\n\n\n\n\n\nmacros-by-example\n\n\nRust by example\n\n\n\n\n\n\nTesting\n\n\n\n\n#[test]\n \ud568\uc218\uac00 test\ud568\uc218\uc784\uc744 \uc120\uc5b8\n\n\ncargo test -- --nocapture --test-threads=1\n\n\ncargo test -- -h\n\uc73c\ub85c testing option \ud655\uc778\ud574\ubcf4\uae30\n\n\ncargo test TESTNAME\n: \ub2e8\uc77c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \uc2e4\ud589\n\n\ncargo test -- --ignored\n: \n#[ignore]\n\ub85c \uc124\uc815\ub41c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \ud14c\uc2a4\ud2b8\n\n\nunit test\ub294 mod test \ub9cc\ub4e4\uace0, \n#[cfg(test)]\n cfg attribute\ub97c \uc124\uc815\ud558\uc5ec \uad6c\uc131; \ncargo test\n\uc2dc\uc5d0\ub9cc \ucef4\ud30c\uc77c/\uc2e4\ud589\n\n\n\n\n#[derive(Debug, PartialEq, Eq)]\npub struct Rectangle {\n  length: u32,\n  width: u32,\n}\n\nimpl Rectangle {\n  pub fn can_hold(&self, other: &Rectangle) -> bool {\n      self.length > other.length && self.width > other.width\n  }\n}\n\n#[allow(dead_code)]\nfn add_two(a: i32) -> i32 {\n  if a > 100 {\n      panic!(\"value must be less than or equal to 100.\");\n  }\n  a + 2\n}\n\n#[cfg(test)]\nmod tests {\n  use super::*;\n\n  #[test]\n  fn larger_can_hold_smaller() {\n      let larger = Rectangle { length: 8, width: 7 };\n      let smaller = Rectangle { length: 5, width: 1 };\n\n      assert!(larger.can_hold(&smaller), \"{:?}\", larger);\n  }\n\n  #[test]\n  fn smaller_cannot_hold_larger() {\n      let larger = Rectangle { length: 8, width: 7 };\n      let smaller = Rectangle { length: 5, width: 1 };\n\n      assert!(!smaller.can_hold(&larger), \"{:?}\", smaller);\n  }\n\n  #[test]\n  fn it_adds_two() {\n      // assert_eq!\uc640 assert_ne!\ub294 \n      // \uac01\uac01 ==\uacfc != \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud558\ubbc0\ub85c\n      // PartialEq\uc640 Debug \ud2b8\ub808\uc787\uc744 \uad6c\ud604\ud574 \ud568\n      assert_eq!(4, add_two(2));\n      assert_ne!(4, add_two(3));\n  }\n\n  #[test]\n  #[should_panic]\n  fn greater_than_100() {\n      add_two(200);\n  }\n\n  #[test]\n  #[should_panic(expected = \"value must be less than or equal to 100\")]\n  fn greater_than_100_2() {\n      add_two(200);\n  }\n}\n\n\n\n\nRust Attributes\n\n\n\n\n\n\nrust-by-example\n\n\nsjquant.tistory.com\n\n\n\n\n\n\nAn attribute is \nmetadata\n applied to some \nmodule\n, \ncrate\n or \nitem\n. This metadata can be used to/for:\n\n\n\n\nconditional compilation of code\n\n\nset crate name, version and type (binary or library)\n\n\ndisable lints (warnings)\n\n\nenable compiler features (macros, glob imports, etc.)\n\n\nlink to a foreign library\n\n\nmark functions as unit tests\n\n\nmark functions that will be part of a benchmark\n\n\n\n\nScope\n\n\n\n\n#![crate_attribute]\n for a whole crate\n\n\n#[item_attribute]\n: for a module or item\n\n\n\n\n\ub2e4\ub978 \ubb38\uc11c\uc5d0\uc11c\ub294 \n\n\n\n\n#![Attr]\n: InnerAttribute\ub85c \uc120\uc5b8\ub41c \ubc94\uc704 \ub0b4\uc5d0 \uc801\uc6a9\n\n\n#[Attr]\n: OuterAttribute\ub85c \uc120\uc5b8\uc774\ud6c4 \uc624\ub294 module, item\uc5d0 \uc801\uc6a9\n\n\n\n\nAttribute arguments\n\n\nAttribute\ub294 Argument\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c\n\n\n\n\n#[attribute = \"value\"]\n\n\n#[attribute(key = \"value\")]\n\n\n#[attribute(value)]\n\n\n#[attribute(value, value2, value3, value4, value5)]\n\n\n\n\nFrequently Used Attributes\n\n\n\n\n#[allow(dead_code)]\n: used to disable linting of the following code block; the compiler option?\n\n\n#![crate_name = \"rary\"]\n: The library is named \"rary\"\n\n\n#![crate_type = \"lib\"]\n: This crate is a library; When the crate_type attribute is used, we no longer need to pass the \n--crate-type\n flag to rustc.\n\n\n#[cfg(target_os = \"linux\")]\n This function only gets compiled if the target OS is linux\n\n\n#[cfg(not(target_os = \"linux\"))]\n: And this function only gets compiled if the target OS is \nnot\n linux\n\n\n\n\n\n\n\u2757\ncfg!\n, unlike \n#[cfg]\n, it is a \nmacro\n that does not remove any code and only evaluates to true or false.\n\nif cfg!(target_os = \"linux\") {\n  println!(\"Yes. It's definitely linux!\");\n} else {\n  println!(\"Yes. It's definitely *not* linux!\");\n}\n\n\n\n\n\n\n#[test]\n: used for functional test\n\n\n#[cfg_attr(a, b)]\n: \ub9cc\uc57d #[cfg(a)]\ub97c \ub9cc\uc871\ud558\uba74 #[b] attribute\ub97c \uc801\uc6a9\n\n\n\n\nCustom cfg\n\n\n\uc0ac\uc6a9\uc790 \ncfg\n\ub3c4 \ub9cc\ub4e4 \uc218 \uc788\uc74c!\n\n\n#[cfg(mine)]\nfn cond_function() {\n    println!(\"mine cond!!!\");\n}\n\n#[cfg(not(mine))]\nfn cond_function() {\n    println!(\"not mine cond!!!\");\n}\n\nfn main() {\n   cond_function();\n}\n\n\n\n\nrustc --cfg mine main.rs && ./main\nRUSTFLAGS='--cfg mine' cargo run\n\n\n\n\nderive\n attribute\n\n\n\n\n\ud2b9\uc815\ud55c Trait\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uad6c\ud604(impl)\uc744 \uac04\ud3b8\ud558\uac8c \uc81c\uacf5\n\n\n\uae30\ubcf8\uc801\uc778 \uad6c\ud604\uc740 \uc774\ubbf8 \uc815\ud574\uc838 \uc788\uc73c\uba70, \uc774\ub7f0 Trait\uc744 derivable \ud558\ub2e4\uace0 \ud568\n\n\nderivable Trait: \nEq\n, \nPartialEq\n, \nCopy\n, \nClone\n, \nDebug\n ...?\n\n\n\n\n#[derive(PartialEq, Clone)]\nstruct Foo<T> {\n    a: i32,\n    b: T,\n}\n\n\n\n\nThe following is a list of derivable traits:\n\n\n\n\nComparison traits: \nEq\n, \nPartialEq\n, \nOrd\n, \nPartialOrd\n.\n\n\nClone\n, to create \nT\n from \n&T\n via a copy.\n\n\nCopy\n, to give a type 'copy semantics' instead of 'move semantics'.\n\n\nHash\n, to compute a hash from \n&T\n.\n\n\nDefault\n, to create an empty instance of a data type.\n\n\nDebug\n, to format a value using the \n{:?}\n formatter.\n\n\n\n\nKeywords\n\n\ncrate\n\n\n\n// \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 crate \uc120\uc5b8\nextern crate rand;\nextern crate my_crate as thing; // the alias of my_crate in my project\nextern crate std; // implicitly added to the root of every Rust project\n\n// item\uc758 visibility\ub97c \ud604\uc7ac crate\uc5d0 \ud3ec\ud568\ub41c module\ub85c\ub9cc \ud55c\uc815\npub(crate) enum CoolMarkerType { }\n\n// The root of the current crate\ncrate::foo::bar\n\n\n\n\nGood answer to understand\n\n\n\n\nwhats-the-difference-between-self-and-self\n\n\nWhy is the \nSized\n bound necessary in this trait?\n\n\n\n\nAssociated items\n\n\nThis following RFC extends traits with associated items, which make generic programming more convenient, scalable, and powerful. In particular, traits will consist of a set of methods, together with:\n\n\n\n\nhttps://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n\n\n\n\n\n\nAssociated functions (already present as \"static\" functions)\n\n\nAssociated consts\n\n\nAssociated types\n\n\nAssociated lifetimes\n\n\n\n\nRust RFC\n\n\nhttps://github.com/rust-lang/rfcs/tree/master/text",
            "title": "Rust"
        },
        {
            "location": "/rust/#rust",
            "text": "A language empowering everyone to build reliable and efficient software.   Note  \uc774 \ubb38\uc11c\ub294  rust-first-steps ,  rust-lang.org ,  rust-doc  \uc744 \ubcf4\uace0 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4.    Rust  Why Rust?  Performance  Reliability  Productivity    Roadamp to improve  Rust \ud2b9\uc131  \ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131  Rust module system  Rust standard libary and useful crates  How to use crates?    Terms  Latest version  Rust installation  Cargo  Cargo versioning  Cargo.toml (TOML file for cargo config)  Cargo.lock  Useful development tool  Rust build tools  Rustup & cargo command completion  Rust Cookbook    Helloworld with cargo  How to add external crates  Enabling rust backtrace  Rust macro  println! ,  print!  todo!  panic!  dbg!    Prelude (imported std libraries)  Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c)  References and Borrowing  Rust Syntax  Comments  Document comments  Constants and Variables  Built-in scalar data types  Char type  Compound Types  Tuple Type  Array Type  &str\uacfc String Type  Functions  Diverging functions  Associated function indication  ::  closure  Call chaining using closure  Statements and expressions  Control flow  if..else :  loop ,  while  and  for  match  Result type  Reference  methods  Field Init Shorthand  Struct Update Syntax  Tuple Structs    Generics  Generic Type  Generic functions  Generic Implementations (Generic methods)  Bounds  Where clause  Associated types  Phantom type parameters    Traits  To be considered  collections  Box, stack and heap  String  hash map    Useful code or crates  Read stdin    Modules  Macro  Testing  Rust Attributes  Scope  Attribute arguments  Frequently Used Attributes  Custom cfg  derive  attribute    Keywords  crate    Good answer to understand  Associated items  Rust RFC",
            "title": "Rust"
        },
        {
            "location": "/rust/#why-rust",
            "text": "Performance  Reliability  Productivity",
            "title": "Why Rust?"
        },
        {
            "location": "/rust/#performance",
            "text": "Rust is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages.",
            "title": "Performance"
        },
        {
            "location": "/rust/#reliability",
            "text": "Rust\u2019s rich type system and ownership model guarantee memory-safety and thread-safety \u2014 enabling you to eliminate many classes of bugs at compile-time.",
            "title": "Reliability"
        },
        {
            "location": "/rust/#productivity",
            "text": "Rust has great documentation, a friendly compiler with useful error messages, and top-notch tooling \u2014 an integrated package manager and build tool, smart multi-editor support with auto-completion and type inspections, an auto-formatter, and more.",
            "title": "Productivity"
        },
        {
            "location": "/rust/#roadamp-to-improve",
            "text": "Building tools; \uc9c1\uad00\uc801\uc774\uace0 \uac04\ub2e8\ud55c building, packaging tool \uc9c0\uc6d0  Web\u00adAssembly (Writing Web Apps); Binary instruction set in web browsers  Working with servers (server-side code)   Embedded system\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \ud5a5\uc0c1",
            "title": "Roadamp to improve"
        },
        {
            "location": "/rust/#rust_1",
            "text": "Open-source high-level and low-level system programming language   Type safe : The compiler assures that no operation will be applied to a variable of a wrong type.  Memory safe : Rust pointers (known as references) always refer to valid memory.  Data race free : Rust's borrow checker guarantees thread-safety by ensuring that multiple parts of a program can't mutate the same value at the same time.  Zero-cost abstractions : Rust allows the use of high-level concepts, like iteration, interfaces, and functional programming, with minimal to no performance costs. The abstractions perform as well, as if you wrote the underlying code by hand.  Minimal runtime : Rust has a very minimal and optional runtime. The language also has  no garbage collector  to manage memory efficiently. In this way Rust is most similar to languages like C and C++.  Targets bare metal : Rust can target embedded and \"bare metal\" programming, making it suitable to write an operating system kernel or device drivers.",
            "title": "Rust \ud2b9\uc131"
        },
        {
            "location": "/rust/#rust_2",
            "text": "Variable\uacfc function type\uc744 \uadf9\ub3c4\ub85c \uc81c\uc5b4\ud558\uc5ec gabage collection\uc774 \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e6",
            "title": "\ub0b4\uac00 \uc0dd\uac01\ud558\ub294 rust \ud2b9\uc131"
        },
        {
            "location": "/rust/#rust-module-system",
            "text": "Crates : It's the smallest piece of code the Rust compiler can run.  Modules : A number of modules become a crate; Related code items or items that are used together  Path : Paths to access and use the code or items in Rust  Third-party crate registry:  crates.io",
            "title": "Rust module system"
        },
        {
            "location": "/rust/#rust-standard-libary-and-useful-crates",
            "text": "std  - The Rust standard library. In the Rust exercises, you'll notice the following modules:  std::collections  - Definitions for collection types, such as HashMap.  std::env  - Functions for working with your environment.  std::fmt  - Functionality to control output format.  std::fs  - Functions for working with the file system.  std::io  - Definitions and functionality for working with input/output.  std::path  - Definitions and functions that support working with file system path data.  structopt  - A third-party crate for easily parsing command-line arguments.  chrono  - A third-party crate to handle date and time data.  regex  - A third-party crate to work with regular expressions.  serde  - A third-party crate of serialization and deserialization operations for Rust data structures.",
            "title": "Rust standard libary and useful crates"
        },
        {
            "location": "/rust/#how-to-use-crates",
            "text": "use std::fmt",
            "title": "How to use crates?"
        },
        {
            "location": "/rust/#terms",
            "text": "Wasm (WebAssembly)   WebAssembly  (abbreviated  Wasm ) is a binary instruction format for a stack-based virtual machine.  Wasm  is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.  WebAssembly  is a new type of code that can be run in modern web browsers \u2014 it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together.    Emscripten SDK  - compile wasm code and generate javascript stub and wasm binary.    Doc :  \ud83d\udd17 WebAssembly",
            "title": "Terms"
        },
        {
            "location": "/rust/#latest-version",
            "text": "Version 1.60.0",
            "title": "Latest version"
        },
        {
            "location": "/rust/#rust-installation",
            "text": "# Install rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Update rust\nrustup update\n\n# Uninstall rust\nrustup self uninstall   vscode :  \ud83d\udd17 ext install matklad.rust-analyzer  vim :  \ud83d\udd17 rust.vim    All tools including  rustc ,  cargo , and  rustup  are installed to the  ~/.cargo/bin  directory.",
            "title": "Rust installation"
        },
        {
            "location": "/rust/#cargo",
            "text": "cargo  is the rust build tool and package manager.   cargo --version : check the rust version  cargo new --vcs=git : create new project with  git init  cargo new  cargo build : build your project with  cargo run : run your project with  cargo test : test your project with  cargo check : checks your code to make sure it compiles but doesn\u2019t produce an executable  cargo doc : build documentation for your project with  cargo doc --open : \ud604\uc7ac crate\uc758 html \ubb38\uc11c \uc0dd\uc131  cargo publish : publish a library to  crates.io  with  Add dependent crates to a project by adding the crate name to the Cargo.toml file.  cargo fmt : reformats your code according to the community code style.  cargo fix : Automatically fix lint warnings reported by rustc    manual :  \ud83d\udd17 cargo doc",
            "title": "Cargo"
        },
        {
            "location": "/rust/#cargo-versioning",
            "text": "Cargo\ub294 \ubc84\uc804\uc744 \uba85\uc2dc\ud558\ub294 \ud45c\uc900\uc5d0 \ud574\ub2f9\ud558\ub294  Semantic Versioning(semver) \uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4.  # Example\nrand = \"0.8.3\"  The number 0.8.3 is actually shorthand for ^0.8.3, which means any version that is at least 0.8.3 but below 0.9.0.",
            "title": "Cargo versioning"
        },
        {
            "location": "/rust/#cargotoml-toml-file-for-cargo-config",
            "text": "Cargo.toml : TOML\ub85c \uc815\uc758\ub41c cargo configuration file  TOML's syntax primarily consists of key = \"value\" pairs, [section names], and # comments. TOML's syntax somewhat resembles that of .INI files, but it includes a formal specification, whereas the INI file format suffers from many competing variants.  Its specification includes a list of supported data types: String, Integer, Float, Boolean, Datetime, Array, and Table.  # This is a TOML document.\n\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00 # First class dates\n\n[database]\nserver = \"192.168.1.1\"\nports = [ 8000, 8001, 8002 ]\nconnection_max = 5000\nenabled = true\n\n[servers]\n\n  # Indentation (tabs and/or spaces) is allowed but not required\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"eqdc10\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ]\n\n# Line breaks are OK when inside arrays\nhosts = [\n  \"alpha\",\n  \"omega\"\n]",
            "title": "Cargo.toml (TOML file for cargo config)"
        },
        {
            "location": "/rust/#cargolock",
            "text": "go.sum \uacfc \uac19\uc774 \ub2e4\uc6b4\ub85c\ub4dc\ud55c crate (package)\uc5d0 \ub300\ud55c version\uacfc \uc815\ubcf4\ub97c \uba85\uc138\ud558\uc5ec, \uc774\ud6c4 \ub3d9\uc77c\ud55c crate version\uc73c\ub85c build\uc758 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud568.  cargo update : crate\uc758 minor version\ub9cc \uc5c5\ub370\uc774\ud2b8\ud568; major version\uc744 \ubcc0\uacbd\ud558\ub824\uba74, Cargo.toml\uc758 major version\uc744 \uc5c5\ub370\uc774\ud2b8\ud574\uc57c \ud55c\ub2e4.",
            "title": "Cargo.lock"
        },
        {
            "location": "/rust/#useful-development-tool",
            "text": "rustup component add rustfmt\nrustup component add clippy   cargo fmt :  rustfmt ; Automatic Formatting development tool  cargo fix : Automatically fix lint warnings reported by rustc  cargo clippy :  clippy ; A collection of lints to analyze your code to catch common mistakes and improve your code.",
            "title": "Useful development tool"
        },
        {
            "location": "/rust/#rust-build-tools",
            "text": "rustc : Rust compiler  rustup : Rust toolchain installer; Rust tool manager  rustc --version : check rust version  rustc RUST_FILE.rs : build the rust binary    \ub2e4\uc74c tool \ud655\uc778 \ud544\uc694  rustc ,  rustdoc ,  rustfmt ,  rust-gdb ,  rust-lldb ,  rustup",
            "title": "Rust build tools"
        },
        {
            "location": "/rust/#rustup-cargo-command-completion",
            "text": "Rust build tool\uc5d0 \ub300\ud55c tab completion  mkdir -p ~/.local/share/bash-completion/completions\nrustup completions bash rustup >> ~/.local/share/bash-completion/completions/rustup\nrustup completions bash cargo >> ~/.local/share/bash-completion/completions/cargo\nsource ~/.local/share/bash-completion/completions/rustup\nsource ~/.local/share/bash-completion/completions/cargo",
            "title": "Rustup &amp; cargo command completion"
        },
        {
            "location": "/rust/#rust-cookbook",
            "text": "Rust crate\uc758 \uc885\ub958\ub97c \ubd84\ub958\ud55c cookbook\uc5d0\uc11c \ud544\uc694\ud55c library\ub97c \uac00\uc7a5 \uba3c\uc800 \ucc3e\uc790!   \ud83d\udd17  Rust Cookbook",
            "title": "Rust Cookbook"
        },
        {
            "location": "/rust/#helloworld-with-cargo",
            "text": "# create new project\ncargo new hello-rust\ncd hello-rust\ntree\n#.\n#\u251c\u2500\u2500 Cargo.toml # for the metadata and dependencies of the project\n#\u2514\u2500\u2500 src # rust code\n#    \u2514\u2500\u2500 main.rs\n\n# fn main() is the starting point of all rust appliciations.\ncat src/main.rs \n# fn main() {\n#     println!(\"Hello, world!\");\n# }\n\n# Building and running\ncargo run\n#    Compiling hello-rust v0.1.0 (/home/neoul/projects/programming-note/rust/hello-rust)\n#     Finished dev [unoptimized + debuginfo] target(s) in 0.54s\n#      Running `target/debug/hello-rust`\n# Hello, world!\n\ntree\n#.\n#\u251c\u2500\u2500 Cargo.lock # [FIXME] what is it?\n#\u251c\u2500\u2500 Cargo.toml\n#\u251c\u2500\u2500 src\n#\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n#\u2514\u2500\u2500 target\n#    \u251c\u2500\u2500 CACHEDIR.TAG # \n#    \u2514\u2500\u2500 debug\n#        \u251c\u2500\u2500 build\n#        \u251c\u2500\u2500 deps\n#        \u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_rust-542ed0184760343f\n#        \u2502\u00a0\u00a0 \u2514\u2500\u2500 hello_rust-542ed0184760343f.d\n#        \u251c\u2500\u2500 examples\n#        \u251c\u2500\u2500 hello-rust\n#        \u251c\u2500\u2500 hello-rust.d\n#        \u2514\u2500\u2500 incremental",
            "title": "Helloworld with cargo"
        },
        {
            "location": "/rust/#how-to-add-external-crates",
            "text": "\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec \uc0ac\uc6a9\ubc95  # Edit Cargo.toml\n[dependencies]\nferris-says = \"0.2\"  // in rust code\nuse ferris_says::say;  cargo build : Cargo will install our dependency for us.",
            "title": "How to add external crates"
        },
        {
            "location": "/rust/#enabling-rust-backtrace",
            "text": "Rust display the backtrace if running with  RUST_BACKTRACE=1 .  $ ./main \n..\n$ RUST_BACKTRACE=1 ./main \nthread 'main' panicked at 'not yet implemented: To Do!', main.rs:2:5\nstack backtrace:\n   0: rust_begin_unwind\n...\n   2: main::main\n   3: core::ops::function::FnOnce::call_once\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.",
            "title": "Enabling rust backtrace"
        },
        {
            "location": "/rust/#rust-macro",
            "text": "Rust macro\ub294 \uac1c\uc218\uac00 \uac00\ubcc0\uc801\uc778 \uc785\ub825 \uc778\uc218\ub97c \ucde8\ud558\ub294 \ud568\uc218   println! ,  print!  todo!  panic!  dbg!",
            "title": "Rust macro"
        },
        {
            "location": "/rust/#println-print",
            "text": "\uac00\ubcc0 \uc778\uc218\ub97c \ubc1b\uc544  stdout \uc5d0 \ucd9c\ub825  // - If it called a function instead, it would be entered as println (without the `!`).\n// - \"Hello, world!\": string representation of the string\n// - {}\uc5d0 \uc778\uc218\uc758 \uac12 \ub300\uccb4 \uc0bd\uc785; placeholder\ub77c \ubd80\ub984\nprintln!(\"Hello, {}!\", \"world\");",
            "title": "println!, print!"
        },
        {
            "location": "/rust/#todo",
            "text": "\uc644\uc131\ub418\uc9c0 \uc54a\uc740 \ud568\uc218\uc758 prototype \uc810\uac80 \ubc0f \uc120\uc5b8, \ud638\ucd9c\uc2dc exception \ubc1c\uc0dd  // todo! - Display \"Hello, world!\" with an exception.\nfn main() {\n  todo!(\"Display the message by using the println!() macro\");\n}",
            "title": "todo!"
        },
        {
            "location": "/rust/#panic",
            "text": "The call to  panic!  causes the error message contained in the last two lines.  fn main() {\n    panic!(\"crash and burn\");\n}",
            "title": "panic!"
        },
        {
            "location": "/rust/#dbg",
            "text": "Another way to print out a value using the Debug format is to use the  dbg!  macro, which takes ownership of an expression, prints the file and line number of where that dbg! macro call occurs in your code along with the resulting value of that expression, and returns ownership of the value.   Note: print message to  stderr .   #[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\nfn main() {\n    let scale = 2;\n    let rect = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n    let rect = dbg!(rect);\n    println!(\n        \"The area of the rectangle {:?} is {} square pixels.\",\n        rect,\n        area(&rect)\n    );\n}\nfn area(rect :&Rectangle) -> u32 {\n    return rect.width * rect.height;\n}\n// [src/main.rs:16] 30 * scale = 60\n// [src/main.rs:20] rect = Rectangle {\n//     width: 60,\n//     height: 50,\n// }\n// The area of the rectangle Rectangle { width: 60, height: 50 } is 3000 square pixels.",
            "title": "dbg!"
        },
        {
            "location": "/rust/#prelude-imported-std-libraries",
            "text": "The prelude is the list of things that Rust automatically imports into every Rust program.   \ud83d\udd17 Module std::prelude  For example ...    std::result::Result::{self, Ok, Err} , a type for functions that may succeed or fail. Like Option, its variants are exported as well.  std::string::{String, ToString} , heap-allocated strings.  std::vec::Vec , a growable, heap-allocated vector.",
            "title": "Prelude (imported std libraries)"
        },
        {
            "location": "/rust/#rust-ownership",
            "text": "Rust\uc758 \ubaa8\ub4e0 \uac12\uc740 owner\ub77c\ub294 \ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \ud558\ub098\uc758 \uac12\uc740 \ud558\ub098\uc758 owner \ubcc0\uc218\uc5d0\ub9cc \uc885\uc18d\ub420 \uc218 \uc788\uc74c  \ub9cc\uc57d, copy trait\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba74, deep copy\ub97c \uc218\ud589\ud558\ub098 \uc544\ub2cc \uacbd\uc6b0 ownership move\uac00 \uc77c\uc5b4\ub0a8(?)  ownership move: \ub2e4\uc218\uc758 \ubcc0\uc218\uac00 \ud558\ub098\uc758 \uac12\uc744 \uac00\ub9ac\ud0ac \uc218 \uc5c6\uc73c\uba70, ownership move (\uc18c\uc720\uad8c \uc774\uc804)\uac00 \uc218\ud589\ub428  owner\uac00 \uc885\uc18d \ubc94\uc704 (curly bracket)\uc744 \ubc97\uc5b4\ub098\uba74, drop (free)\ub428 (C++ RAII \ud328\ud134)   let s1 = String::from(\"hello\");\nlet s2 = s1;\n\n// String\uc740 copy trait\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc544 ownership move\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774\ud6c4 s1\uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc624\ub958 \ubc1c\uc0dd\n// error[E0382]: use of moved value: `rect` \ubc1c\uc0dd   \ud568\uc218\uc5d0 \uac12\uc744 \uc778\uc790\ub85c \ub118\uae38 \uacbd\uc6b0 ownership\ub3c4 \ubcc0\uacbd\ub428  deep copy: copy trait\uc774 \uad6c\ud604\ub41c structure\ub098 built-in scalar\ub294 deep copy\ub97c \uc218\ud589\ud568  shallow copy: rust\uc5d0\uc11c\ub294 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc74c  heap\uc5d0 \ud560\ub2f9\ub418\ub294 \uac00\ubcc0 (mutable)\uc758 structure\ub294 \ubcf4\ud1b5 reference\ub85c ownership \uad00\ub9ac\ub97c \ud68c\ud53c   Here are some of the types that implement Copy:   All the integer types, such as  u32 .  The Boolean type,  bool , with values true and false.  All the floating point types, such as  f64 .  The character type,  char .  Tuples , if they only contain types that also implement Copy. For example,  (i32, i32)  implements Copy, but  (i32, String)  does not.     https://velog.io/@timothy160620/Learning-Rust  https://showx123.tistory.com/81",
            "title": "Rust ownership (\uac12\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c)"
        },
        {
            "location": "/rust/#references-and-borrowing",
            "text": "fn main() {\n    let mut s = String::from(\"hello\");\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n}   Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator,  * . We\u2019ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.",
            "title": "References and Borrowing"
        },
        {
            "location": "/rust/#rust-syntax",
            "text": "",
            "title": "Rust Syntax"
        },
        {
            "location": "/rust/#comments",
            "text": "In Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line.  // Hello, world.",
            "title": "Comments"
        },
        {
            "location": "/rust/#document-comments",
            "text": "Rust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. Documentation comments use three slashes,  /// , instead of two and support Markdown notation for formatting the text.  /// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}  Another style of doc comment,  //! , is used to describe the crate introduction.  //! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.   [FIXME] document comments \ub2e4\uc2dc \uc77d\uae30",
            "title": "Document comments"
        },
        {
            "location": "/rust/#constants-and-variables",
            "text": "A value is not assigned, it is binded to a variable. python\uacfc \uac19\uc740 bind \uac1c\ub150\uc744 \ucc28\uc6a9\ud568  Constants must be computed at compile time.  The equal sign ( = ) tells Rust we want to bind something to the variable now.    // \ud568\uc218 \uc120\uc5b8\nfn func()\n\n// \ubcc0\uc218 \uc120\uc5b8\nlet a_number;\n\n// \ubcc0\uc218\uc5d0 \uac12 \ubc14\uc778\ub529; variable binding to a value\n// variable binding == value assginment (\uac12\ud560\ub2f9)\nlet a_number = 10;\n\n// \uac12\uc774 \ubc14\uc778\ub529\ub41c \ubcc0\uc218\ub294 \uac12 re-\ubc14\uc778\ub529 \ubd88\uac00\ub2a5!!\na_number = 11;\n\n// mut (mutable, \ubcc0\ud560 \uc218 \uc788\ub294)\ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0\nlet mut b_number = 10;\n// variable binding \ubcc0\uacbd \uac00\ub2a5\nb_number = 11;\n\n// variable shadowing (\ubcc0\uc218 \uc100\ub3c4\uc789)\n// let\uc73c\ub85c \ub3d9\uc77c\uba85\uc758 \ubcc0\uc218\ub97c \uacc4\uc18d \uc120\uc5b8\ud560 \uc218 \uc788\uc74c\n// \uc774\uac83\uc73c\ub85c \ubcc0\uc218\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uacfc \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c\nlet x = 5;\nlet x = x + 1;\nlet x = x * 2;\nprintln!(\"The value of x is: {}\", x); // The value of x is: 12\n\n// shardowing\uc73c\ub85c \ubcc0\uc218\uc758 type\uc774 \ubcc0\uacbd\ub418\ub294 \uac83\ucc98\ub7fc \ub3d9\uc791\uc2dc\ud0ac \uc218 \uc788\ub2e4.\nlet spaces = \"   \";\nlet spaces = spaces.len(); // space\ub294 interger\uac00 \ub428\n\n// \ub9cc\uc57d, mut\ub97c \uc0ac\uc6a9\ud558\uac8c\ub418\uba74, type \ubcc0\uacbd\uc740 \ubd88\ud5c8\nlet mut spaces = \"   \";\nspaces = spaces.len(); // cause an error\n\n// constant (\uc0c1\uc218)\n// - constants use uppercase with underscores.\n// - constants must be computed at compile time.\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;",
            "title": "Constants and Variables"
        },
        {
            "location": "/rust/#built-in-scalar-data-types",
            "text": "Rust\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 scalar data type\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.  i8, i16, i32, i64 // signed integer number (default: i32)\nu8, u16, u32, u64 // unsigned integer number\nisize, usize // architecture-dependent number\nf32, f64 // floating point number (default f64)\nbool // true, false boolean value\nchar // A 21-bit integer represent a character \n     // that's padded to be 32 bits wide for unicode\n&str // a string slice consists of characters.\n     // This is immutable string data! (Read-only)\nString // It is mutable string data allocated to the heap area.   Rust is a statically typed language. \ub530\ub77c\uc11c compiler\uac00 \ubaa8\ub4e0 \ubcc0\uc218\uc758 \uc815\ud655\ud55c data type\uc744 \uc54c\uc544\uc57c \ud568  let VAR: TYPE \uc73c\ub85c variable\uc758 type\uc744 \uba85\uc2dc  println!  \uc0ac\uc6a9\uc2dc data type suffix\ub97c \ucd94\uac00\ud574 compiler\uac00 type\uc744 \uc778\uc9c0\ud558\ub3c4\ub85d \uc785\ub825\ud574\uc57c \ud568.  String  is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text. This is not a built-in type.   // Integer literal\nlet _i = 1000; // i32 assigned by default\nlet _i: i32 = 1000i32; // suffix for type direction\nlet _i: i32 = 98_222; // = 98222 Decimal for visual separation\nlet _i: i32 = 0xff; // Hex\nlet _i: i32 = 0o77; // Octal\nlet _i: i32 = 0b1111_0000; // Binary\nlet _i: u8 = b'A'; // Byte (u8 only)\n\n// Float literal\nlet _number_64 = 4.0;      // compiler infers the value to use the default type f64\nlet _number_32: f32 = 5.0; // type f32 specified via annotation\n\n// All of the primitive number types in Rust support mathematical operations\n// like addition, subtraction, multiplication, and division.\n// When we call the println macro, we add the data type suffix \n// to each literal number to inform Rust about the data type. \n\n// Addition, Subtraction, and Multiplication\nprintln!(\"1 + 2 = {} and 8 - 5 = {} and 15 * 3 = {}\", 1u32 + 2, 8i32 - 5, 15 * 3);\n\n// Integer and Floating point division\nprintln!(\"9 / 2 = {} but 9.0 / 2.0 = {}\", 9u32 / 2, 9.0 / 2.0);\n\n// integer types\nlet sum = 5 + 10; // addition\nlet difference = 95.5 - 4.3; // subtraction\nlet product = 4 * 30; // multiplication\nlet quotient = 56.7 / 32.2; // division\nlet remainder = 43 % 5; // remainder\n\n// floating point types\nlet x = 2.0; // f64\nlet y: f32 = 3.0; // f32\n\n// boolean type\nlet t = true;\nlet f: bool = false; // with explicit type annotation\n\n// character\nlet c = 'z';\nlet z = '\u2124';\nlet heart_eyed_cat = '\ud83d\ude3b';",
            "title": "Built-in scalar data types"
        },
        {
            "location": "/rust/#char-type",
            "text": "Rust\u2019s  char  type is four bytes in size and represents a Unicode Scalar Value.  Unicode Scalar Values range from  U+0000  to  U+D7FF  and  U+E000  to  U+10FFFF  inclusive.  char  type is a 21-bit integer represent a character that's padded to be 32 bits wide for unicode.  Char literals use single quotes. 'C'  Storing UTF-8 Encoded Text with Strings",
            "title": "Char type"
        },
        {
            "location": "/rust/#compound-types",
            "text": "Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.",
            "title": "Compound Types"
        },
        {
            "location": "/rust/#tuple-type",
            "text": "Tuples have a fixed length: once declared, they cannot grow or shrink in size.  let tup: (i32, f64, u8) = (500, 6.4, 1);\n\n// [Tuple destructuring]\n// To get the individual values out of a tuple ...\nlet tup = (500, 6.4, 1);\nlet (x, y, z) = tup;\nprintln!(\"The value of y is: {}\", y); // The value of y is: 6.4\n\n// [Access a tuple element directly]\nlet x: (i32, f64, u8) = (500, 6.4, 1);\nlet five_hundred = x.0;\nlet six_point_four = x.1;\nlet one = x.2;   \u2753 The tuple without any values, (), is a special type that has only one value, also written (). The type is called the unit type and the value is called the unit value. Expressions implicitly return the unit value if they don\u2019t return any other value.",
            "title": "Tuple Type"
        },
        {
            "location": "/rust/#array-type",
            "text": "Unlike a tuple, every element of an array must have the same type.  Unlike arrays in some other languages, arrays in Rust have a fixed length.  Arrays are useful when you want your data allocated on the stack rather than the heap.  Flexible size array\uac00 \ud544\uc694\ud558\ub2e4\uba74  Vec<T> \ub97c \uc0ac\uc6a9   let a = [1, 2, 3, 4, 5];\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\nlet a: [i32; 5] = [1, 2, 3, 4, 5]; // [Type; Length]\nlet a = [3; 5]; // [3, 3, 3, 3, 3]\uc73c\ub85c \ucd08\uae30\ud654\n\n// [Access an array element]\nlet first = a[0];\nlet second = a[1];\n\n// mutable\ud574\uc57c Arrary element \ubcc0\uacbd \uac00\ub2a5\ud568\nlet mut a = [1, 2, 3, 4, 5];\na[1] = 100;",
            "title": "Array Type"
        },
        {
            "location": "/rust/#str-string-type",
            "text": "&str as a pointer to immutable string data. String literals are all of type &str.",
            "title": "&amp;str\uacfc String Type"
        },
        {
            "location": "/rust/#functions",
            "text": "fn  keyward\ub97c \uc0ac\uc6a9  All letters of function names and variables are lowercase and underscores ( _ ) separate words.  A set of parentheses and curly brackets are followed to the function name.  In function signatures, you must declare the type of each parameter that you want to input.  The function returns a concrete type: The Rust compiler needs to know how much space every function's return type requires.   fn main() {\n  another_function(5);\n  print_labeled_measurement(5, 'h');\n}\n\nfn another_function(x: i32) {\n  println!(\"The value of x is: {}\", x);\n}\n\nfn print_labeled_measurement(value: i32, unit_label: char) {\n  println!(\"The measurement is: {}{}\", value, unit_label);\n}\n\nfn four() -> i32 {\n  4; // error because it becomes a statement\n}\n\nfn five() -> i32 {\n  5 // no semicolon; return the value as an expression\n}\n\nfn six() -> i32 { // \uba85\uc2dc\uc801 \ubc18\ud658\n  return 6; // ok\n}\n\nfn seven() -> i32 {\n  return 7 // ok\n}\n\nfn main() {\n  let x = five();\n  println!(\"The value of x is: {}\", x);\n}",
            "title": "Functions"
        },
        {
            "location": "/rust/#diverging-functions",
            "text": "Diverging functions never return. They are marked using  ! , which is an empty type.   server\ub4f1\uc758 non-terminated app\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub420 \ub4ef ...   fn foo() -> ! {\n  panic!(\"This call never returns.\");\n}",
            "title": "Diverging functions"
        },
        {
            "location": "/rust/#associated-function-indication",
            "text": "let mut guess = String::new();  The  ::  syntax in the  ::new  line indicates that new is an associated function of the String type. An associated function is a function that\u2019s implemented on a type, in this case String.",
            "title": "Associated function indication ::"
        },
        {
            "location": "/rust/#closure",
            "text": "Closures are functions that can capture the enclosing environment. For example, a closure that captures the x variable:  |val| val + x   capturing  and  bollowing : closure \ud568\uc218\uac00 variable\uc5d0 \ud560\ub2f9\ub420 \ub54c \ub3d9\uc77c namespace\uc5d0 \uc788\ub294 \ubcc0\uc218\ub97c capture\ud558\uc5ec \uc0ac\uc6a9\ud568  by reference:  &T  by mutable reference:  &mut T  by value:  T  move  \uc0ac\uc6a9\uc2dc variable\uc758 ownership\uc744 \uac00\uc838\uac10   e.g.  let contains = move |needle| haystack.contains(needle);  input & output parameter\ub85c \uc0ac\uc6a9\uac00\ub2a5  type bound\uc5d0 \uc544\ub798\uc640 \uac19\uc740 argument function\uc758 trait\uc744 \uc9c0\uc815\ud574\uc57c \ud568  Fn : the closure uses the captured value by reference ( &T )  FnMut : the closure uses the captured value by mutable reference ( &mut T )  FnOnce : the closure uses the captured value by value ( T )    iterator \ub3d9\uc791\uc744 \uad6c\ud604\ud560 \ub54c \uc0ac\uc6a9 e.g.  Iterator::any   // Increment via closures and functions.\nfn function(i: i32) -> i32 {\n    i + 1\n}\n\n// Closures are anonymous, here we are binding them to references\n// Annotation is identical to function annotation but is optional\n// as are the `{}` wrapping the body. These nameless functions\n// are assigned to appropriately named variables.\nlet closure_annotated = |i: i32| -> i32 { i + 1 };\nlet closure_inferred = |i| i + 1;\n\nlet mut i = 1;\ni = function(i); // 2\ni = closure_annotated(i); // 3\ni = closure_inferred(i); // 4\nprintln!(\"closure example i: {}\", i);\n// let i = 1;\n// Call the function and closures.\nprintln!(\"function: {}\", function(i)); // 5\nprintln!(\"closure_annotated: {}\", closure_annotated(i)); // 5\nprintln!(\"closure_inferred: {}\", closure_inferred(i)); // 5\n\n// A closure taking no arguments which returns an `i32`.\n// The return type is inferred.\nlet one = || 1;\nprintln!(\"closure returning one: {}\", one());\n\nuse std::mem;\nlet color = String::from(\"green\");\n\n// bollow immutable reference of the color variable.\nlet print = || println!(\"`color`: {}\", color);\nprint();\n\nlet _reborrow = &color;\nprint();\n\n// A move or reborrow is allowed after the final use of `print`\nlet _color_moved = color;\n// print(); // \ud638\ucd9c \ubd88\uac00; color already moved to _color_moved\n\n\nlet mut count = 0;\n// bollow mutable count reference.\nlet mut inc = || {\n    count += 1;\n    println!(\"`count`: {}\", count);\n};\n\n// Call the closure using a mutable borrow.\ninc();\n\n// The closure no longer needs to borrow `&mut count`. Therefore, it is\n// possible to reborrow without an error\nlet _count_reborrowed = &mut count; \n\n// `consume` consumes the variable so this can only be called once.\nlet movable = Box::new(3);\nlet consume = || {\n    println!(\"`movable`: {:?}\", movable);\n    mem::drop(movable);\n};\nconsume();\n// consume(); // \ud638\ucd9c \ubd88\uac00; The bollowed variable is not available.\n// ^ TODO: Try uncommenting this line.\n\n// move \uc0ac\uc6a9\uc2dc ownership\uc744 \uac00\uc838\uac10\nlet haystack = vec![1, 2, 3];\nlet contains = move |needle| haystack.contains(needle);\nprintln!(\"{}\", contains(&1));\n\n// Functional approach\nlet sum_of_squared_odd_numbers: u32 =\n    (0..).map(|n| n * n)                             // All natural numbers squared\n          .take_while(|&n_squared| n_squared < upper) // Below upper limit\n          .filter(|&n_squared| is_odd(n_squared))     // That are odd\n          .fold(0, |acc, n_squared| acc + n_squared); // Sum them\nprintln!(\"functional Approach: {}\", sum_of_squared_odd_numbers);",
            "title": "closure"
        },
        {
            "location": "/rust/#call-chaining-using-closure",
            "text": "// call chaining using closure\nfn is_odd(n: u32) -> bool {\n    n % 2 == 1\n}\nlet upper = 1000;\nlet sum_of_squared_odd_numbers: u32 = (0..)\n    .map(|n| n * n) // All natural numbers squared\n    .take_while(|&n_squared| n_squared < upper) // Below upper limit\n    .filter(|&n_squared| is_odd(n_squared)) // That are odd\n    .fold(0, |acc, n_squared| acc + n_squared); // Sum them\nprintln!(\"functional Approach: {}\", sum_of_squared_odd_numbers);",
            "title": "Call chaining using closure"
        },
        {
            "location": "/rust/#statements-and-expressions",
            "text": "Rust\ub294 Statement\uc640 expression\uc758 \uad6c\ubd84\uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ud655\ud568.   Statements are instructions that perform some action and do not return a value.  Expressions evaluate to a resulting value and return the result value.  Expressions do not include ending semicolons.  If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value.  javascript\uc640 \uc720\uc0ac\ud558\uac8c \uc138\ubbf8\ucf5c\ub860( ; ) \uc5c6\uc774 function \ub9c8\uc9c0\ub9c9 \ubb38\uc7a5\uc774 \ub05d\ub098\uba74, \uadf8 \ub9c8\uc9c0\ub9c9 \uacb0\uacfc\ub97c \ubc18\ud658\ud568 (as an expression)    Expressions in rust: function call, value, {} (\ube14\ub85d)   fn main() {\n  // error \ubc1c\uc0dd let y\ub294 return value \uc5c6\uc74c\n  // expression\uc774 \uc544\ub2c8\ubbc0\ub85c x\uc5d0 binding \ubd88\uac00\n  let x = (let y = 6);\n\n  // 4\ub85c \ud310\uc815\ub41c {} \uc548\uc758 \uac12\uc774 y\uc5d0 \ud560\ub2f9\n  // x + 1\uc5d0\ub294 \uc138\ubbf8\ucf5c\ub860(;) \uc774 \uc5c6\uc73c\uba70 expression\uc73c\ub85c \ud310\uc815, \uac12\uc744 \ubc18\ud658\n  let y = {\n    let x = 3;\n    x + 1\n  };\n  println!(\"The value of y is: {}\", y);\n}",
            "title": "Statements and expressions"
        },
        {
            "location": "/rust/#control-flow",
            "text": "",
            "title": "Control flow"
        },
        {
            "location": "/rust/#ifelse",
            "text": "condition\uc740 \ubc18\ub4dc\uc2dc boolean\uc744 \ubc18\ud658\ud574\uc57c \ud568  parenthesis  ()  \ub294 \uc0ac\uc6a9\uc548\ud568  arms : \uac08\ub798?; condition\uc5d0 \ub530\ub77c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ube14\ub85d\uc744 \ub9d0\ud568  let  \ud560\ub2f9 \uc5f0\uc0b0 ( = )\uc5d0  if..else  \uc0ac\uc6a9 \uac00\ub2a5   let number = 6;\nif number % 4 == 0 {\n  println!(\"number is divisible by 4\");\n} else if number % 3 == 0 {\n  println!(\"number is divisible by 3\");\n} else if number % 2 == 0 {\n  println!(\"number is divisible by 2\");\n} else {\n  println!(\"number is not divisible by 4, 3, or 2\");\n}\n\nif number { // error - expected bool, found integral variable\n  println!(\"number was three\");\n}\n\n// \nlet number = if condition > 4 {\n  if condition > 8 {\n    11\n  } else {\n    5\n  }\n} else {\n  3\n};\n\nprintln!(\"The value of number is: {}\", number); // 5",
            "title": "if..else:"
        },
        {
            "location": "/rust/#loop-while-and-for",
            "text": "loop {\n  println!(\"again!\");\n  // ...\n  break;\n}\n\nlet mut number = 3;\nwhile number != 0 {\n  println!(\"{}!\", number);\n  number = number - 1;\n  println!(\"LIFTOFF!!!\");\n}\n\n\nlet a = [10, 20, 30, 40, 50];\nfor element in a.iter() {\n  // for\ubb38 \ub0b4\uc5d0\uc11c element \uc0ad\uc81c\ud574\ub3c4 panic X\n  println!(\"the value is: {}\", element);\n}\n\n// range\nfor number in (1..4).rev() {\n  println!(\"{}!\", number);\n}\nprintln!(\"LIFTOFF!!!\");",
            "title": "loop, while and for"
        },
        {
            "location": "/rust/#match",
            "text": "fn main() {\n  // Destructuring values in match\n  // - rust\ub294 \ubcf5\uc7a1\ud55c type\uc744 match\ub85c wrapping structure\ub97c \ubc97\uaca8\ub0b4\uc5b4 \ucc98\ub9ac\ud568\n  // - destructuring type\uc774 \ub2e4\ub97c \uacbd\uc6b0 match, if let \ud560\ub2f9 \ubd88\uac00\n  // - destructuring \n  let member = 13;\n  match member {\n      1 => println!(\"1\"),\n      2 | 3 | 4 => println!(\"2,3,4\"),\n      5..=10 => println!(\"5..10\"),\n      _ => println!(\"_\")\n  }\n\n  // tuple\n  let triple = (0, 1, -3);\n  match triple {\n      (0, y, z) => println!(\"{},{}\", y, z),\n      (1, ..) => println!(\"first is 1\"), // .. ignore the rest\n      _ => println!(\"??\")\n  }\n\n  // arrays/slices\n  let array = [3, -2, 6];\n  match array {\n      [0, second, third] => {\n          println!(\"second {}, thrid {}\", second, third);\n      }\n      [1, _, third] => println!(\"thrid {}\", third), // ignore a value with _\n      // The code below would not compile\n      // [-1, second] => println!(\"compile error\"),\n      // store middle values to another array/slice\n      [3, middle @.., last] => println!(\"{:?} {:?}\", middle, last),\n      _ => ()\n  }\n\n  // enums\n  #[allow(dead_code)]\n  #[derive(Debug)]\n  enum Color {\n      Red,\n      Blue,\n      Green,\n      RGB(u32, u32, u32),\n      CMYK(u32, u32, u32, u32)\n  }\n  let color = Color::RGB(122, 17, 40);\n  match color {\n      Color::Red   => println!(\"The color is Red!\"),\n      Color::Blue  => println!(\"The color is Blue!\"),\n      Color::Green => println!(\"The color is Green!\"),\n      Color::RGB(r, g, b) =>\n          println!(\"Red: {}, green: {}, and blue: {}!\", r, g, b),\n      Color::CMYK(c, m, y, k) =>\n          println!(\"Cyan: {}, magenta: {}, yellow: {}, key (black): {}!\",\n              c, m, y, k),\n      // all matching case must be in the scope.\n  }\n\n  // pointers/ref\n  // dereference in matching\n  let reference: &u32 = &4;\n  match reference {\n      &val => println!(\"{:?}\", val) // if matched, it drops `&`\n  }\n  // To avoid the `&`, you dereference before matching.\n  match *reference {\n      val => println!(\"{:?}\", val)\n  }\n\n  let _not_a_reference = 3;\n  let ref _is_a_reference = 3; // &i32; explicit reference\n  let value = 5;\n  let mut mut_value = 6;\n\n  let rr = match value { // create the reference of r\n      ref r => r\n  };\n  println!(\"{:?}, {:?}\", value, rr);\n  match mut_value {\n      ref mut m => {\n          // Got a reference. Gotta dereference it before we can add anything to it.\n          *m += 10;\n          println!(\"We added 10. `mut_value`: {:?}\", m);\n      },\n  }\n\n  // structs\n  #[allow(dead_code)]\n  struct Foo {\n      x: (u32, u32),\n      y: u32\n  }\n  let foo = Foo {x: (10, 20), y: 30};\n  match foo { \n      Foo { x: (1, b), y: c } => println!(\"b={:?} c={:?}\", b, c),\n      Foo {y, ..} => println!(\"y={:?}, others=Don't Care\", y) // match any values\n  }\n\n  // Guards\n  let pair = (3, 1);\n  match pair {\n      (x, y) if x == y => println!(\"Twins!\"),\n      (x, _) if x%2 == 1 => println!(\"The first odd!\"),\n      _ => println!(\"no correlation ...\")\n  }\n\n  // binding to a value with inclusive range\n  let num = 3;\n  // @1..=10 inclusive range \uc0ac\uc6a9\ud574\uc57c \ud568\n  // exclusive range = @1..10\n  match num {\n      n @1..=10 => println!(\"num in 1..10 {}\", n),\n      n => println!(\"num {}\", n)\n  }\n\n  // binding to an enum variant value\n  #[allow(dead_code)]\n  fn some_number() -> Option<u32> {\n      Some(42)\n  }\n  match some_number() {\n      Some(n @ 42) => println!(\"Binding to an enum variant with value {:?}\", n),\n      Some(n) => println!(\"Binding to an enum variant {:?}\", n),\n      _ => ()\n  }\n\n  // match assign\n  let option = Some(10);\n  let i = match option {\n      Some(i) => i,\n      _ => panic!(\"?\"),\n  };\n  println!(\"{}\", i);\n\n  // if let\n  let num = Some(7);\n  let letter: Option<i32> = None;\n  // let emotion: Option<i32> = None;\n  if let Some(i) = num {\n      println!(\"i = {}\", i);\n  } else {\n      println!(\"destructuring failed ...\");\n  }\n\n  // match any enum value using if let\n  if let None = letter {\n      println!(\"letter is None\");\n  }\n\n  if let Color::Blue = color {\n      println!(\"Blue\");\n  } else if let Color::RGB(x, _, z @1..=100) = color {\n      println!(\"x={}, z={}\", x, z);\n  } else {\n      println!(\"{:?}\", color);\n  }\n\n  // while let\n  let mut optional = Some(0);\n  while let Some(i) = optional {\n      if i > 9 {\n          optional = None;\n      } else {\n          optional = Some(i+ 1);\n      }\n  }\n  optional = Some(0);\n  loop { // while let\uacfc \ub3d9\uc77c \ub3d9\uc791\n      match optional {\n          Some(i) => {\n              if i > 9 {\n                  optional = None;\n              } else {\n                  optional = Some(i+1);\n              }\n          },\n          _ => break\n      }\n  }\n}",
            "title": "match"
        },
        {
            "location": "/rust/#result-type",
            "text": "Rust\ub294 result type\uc740 \uc5f4\uac70\ud615(enumerations)\uc758 \uc5d0\ub7ec\ucc98\ub9ac \uc815\ubcf4  variants: enumeration data  // io::Result\npub type Result<T> = Result<T, Error>;\n\n// std::result::Result\nEnum std::result::Result\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}",
            "title": "Result type"
        },
        {
            "location": "/rust/#reference",
            "text": "",
            "title": "Reference"
        },
        {
            "location": "/rust/#methods",
            "text": "Rust\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 struct\uc640 method\ub97c \uc815\uc758\ud55c\ub2e4.  #[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    // method definition in implement block\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    // Associated Functions\n    fn square(size: u32) -> Rectangle {\n        Rectangle{\n            width: size,\n            height: size,\n        }\n    }\n}\n\nfn main() {\n    let scale = 2;\n    let rect = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n\n    // dbg! return the ownership of the input object\n    let rect = dbg!(rect);\n\n    println!(\n        \"The area of the rectangle {:?} is {} square pixels.\",\n        rect,\n        rect.area()\n    );\n\n    let square = Rectangle::square(100);\n    let rect1 = Rectangle { height: 50, width: 30 };\n    let rect2 = Rectangle { height: 40, width: 10 };\n    let rect3 = Rectangle { height: 45, width: 60 };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n    println!(\"Can square hold rect1? {}\", square.can_hold(&rect1));\n}   The  &self  is actually short for  self: &Self .  mutable \uc120\uc5b8\uc2dc,  &mut self , field \uc218\uc815 \uac00\ub2a5  Note that the entire instance must be mutable; Rust doesn\u2019t allow us to mark only certain fields as mutable.  Associated Function\uc740 self\uac00 \uc5c6\ub294 \uad00\ub828 \ud568\uc218 (class \ud568\uc218\uc640 \uc720\uc0ac), \uc0dd\uc131\uc790 \ud568\uc218\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9  Associated Function\uc740 struct\uc5d0 \ub300\ud55c namespace syntax( :: )\ub85c \uc811\uadfc/\uc0ac\uc6a9 \uac00\ub2a5  \ub2e4\uc218\uc758 impl block \uc0ac\uc6a9 \uac00\ub2a5",
            "title": "methods"
        },
        {
            "location": "/rust/#field-init-shorthand",
            "text": "\uc0dd\uc131\ud568\uc218\uc5d0\uc11c field name\uacfc function argument\uc744 \ub3d9\uc77c\ud558\uac8c \uc785\ub825\ud558\uc5ec \uc9e7\uac8c \uc4f0\ub294 \ubc29\ubc95  fn build_user(email: String, username: String) -> User {\n  User {\n    email, // field init shorthand\n    username,\n    active: true,\n    sign_in_count: 1,\n  }\n}",
            "title": "Field Init Shorthand"
        },
        {
            "location": "/rust/#struct-update-syntax",
            "text": "\uc55e\uc11c \uc0ac\uc6a9\ud55c \uc778\uc2a4\ud134\uc2a4\uc758 \uac12\uc744 \uc0ac\uc6a9\ud574 \uad6c\uc870\uccb4 \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ubc29\ubc95  fn main() {\n  // --snip--\n  let user1 = User {\n      // init ...\n  };\n\n  let user2 = User {\n      email: String::from(\"another@example.com\"),\n      ..user1 // user1\uc758 \uac12\uc73c\ub85c structure update\n  };\n}   Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the  \u201cWays Variables and Data Interact: Move\u201d  section. In this example, we can no longer use user1 after creating user2 because the String in the username field of user1 was moved into user2. The types of active and sign_in_count are types that implement the Copy trait, so the behavior we discussed in the  \u201cStack-Only Data: Copy\u201d  section would apply.",
            "title": "Struct Update Syntax"
        },
        {
            "location": "/rust/#tuple-structs",
            "text": "Tuple\uacfc \uc720\uc0ac\ud55c \uad6c\uc870\uccb4\ub85c filed name\uc774 \uc5c6\uc774 field type\ub9cc\uc744 \uc815\uc758\ud55c \uad6c\uc870\uccb4  Named tuple   struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}",
            "title": "Tuple Structs"
        },
        {
            "location": "/rust/#generics",
            "text": "Generics is the topic of generalizing types and functionalities to broader cases. This is extremely useful for reducing code duplication in many ways, but can call for rather involved syntax.    Generic type : Generic type parameter  <T> \uac00 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 type  Concrete type : generic type parameter\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 (type\uc774 \uba85\uc2dc\ub41c) \ubaa8\ub4e0 type  Generic bounds : Generic type\uc774 \uac00\uc838\uc57c \ud560 type\uc758 \ud2b9\uc131\uc744 \uaddc\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9  <T: Bounds> ; \uc8fc\ub85c trait\uc774 bound\ub85c \uc4f0\uc784 e.g.  fn printme<T: std::fmt::Debug> (x: T)  It places further constraints on the kind of the Generic types.  where  can also be used to apply bounds in some cases to be more expressive.  Multiple generic bounds : Multiple bounds for a single type can be applied with a  + . Like normal, different types are separated with  , . e.g.  fn compare_prints<T: Debug + Display>(t: &T)  Associated types : trait generics\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 type\uc744 \uc815\uc758\ud558\uc5ec \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95    Good Aricle:  Using Generic Types in Rust \nThe combination of generics and traits in Rust gives us the same kind of flexibility that we are seeking in a dynamically typed language, but without any of the runtime tradeoffs.",
            "title": "Generics"
        },
        {
            "location": "/rust/#generic-type",
            "text": "struct A; // A concrete type\nstruct Single(A); // A concrete type; a tuple structure\nstruct SingleGen<T>(T); // A generic type\nlet _char: SingleGen<char> = SingleGen('a');\nlet _t    = SingleGen(A); // Uses `A` defined at the top.\nlet _i32  = SingleGen(6); // Uses `i32`.\nlet _char = SingleGen('a'); // Uses `char`.",
            "title": "Generic Type"
        },
        {
            "location": "/rust/#generic-functions",
            "text": "fn foo<T>(arg: T) { ... }\nfn bar(s: SGen<A>) { ... } // not a generic function\n\ngeneric::<char>(SGen('a')); // call with explicitly specified type parameters\ngeneric(SGen('c')); // call with implicitly specified type parameters",
            "title": "Generic functions"
        },
        {
            "location": "/rust/#generic-implementations-generic-methods",
            "text": "struct S; // Concrete type `S`\nstruct GenericVal<T>(T); // Generic type `GenericVal`\n\n// implementation \uc120\uc5b8\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 type\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc74c\nimpl GenericVal<f32> {} // Specify `f32`\nimpl GenericVal<S> {} // Specify `S` as defined above\n\n// `<T>` Must precede the type to remain generic\nimpl<T> GenericVal<T> {}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\n// NewStruct doesn't use any generic types,\n// so we don't need to specify any here.\nstruct NewStruct {}\nimpl NewStruct {\n    // We can still, however, define our own generic parameters\n    // on an individual method as desired\n    fn x<T>(&self, foo: T) -> T {\n        foo\n    }\n}",
            "title": "Generic Implementations (Generic methods)"
        },
        {
            "location": "/rust/#bounds",
            "text": "",
            "title": "Bounds"
        },
        {
            "location": "/rust/#where-clause",
            "text": "Where clause\ub294 generic bound\uc5d0\uc11c \uc120\ud589 \ud45c\ud604\ub418\ub294 \ubcf5\uc7a1\ud55c type \uc815\uc758\ub97c \ud6c4\uc704\uc5d0 \ud45c\ud604\ud558\uc5ec \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ubc29\ubc95  // \uc120\ud589 \ud45c\ud604\nimpl<K:Hash+Eq,V> HashMap<K, V> {}\n\n// \ud6c4\uc704 \ud45c\ud604 with where\nimpl<K,V> HashMap<K, V>\n    where K : Hash + Eq {}\n\nimpl <A: TraitB + TraitC, D: TraitE + TraitF> MyTrait<A, D> for YourType {}\n\n// Expressing bounds with a `where` clause\nimpl <A, D> MyTrait<A, D> for YourType where\n    A: TraitB + TraitC,\n    D: TraitE + TraitF {}   Rust RFC for  where",
            "title": "Where clause"
        },
        {
            "location": "/rust/#associated-types",
            "text": "The use of \"Associated types\" improves the overall readability of code by moving inner types locally into a trait as output types. Syntax for the trait definition is as follows:  // TRAIT = TRAIT_HEADER '{' TRAIT_ITEM* '}'\n// TRAIT_ITEM =\n//   ... <existing productions>\n//   | 'const' IDENT ':' TYPE [ '=' CONST_EXP ] ';'\n//   | 'type' IDENT [ ':' BOUNDS ] [ WHERE_CLAUSE ] [ '=' TYPE ] ';'\n//   | 'lifetime' LIFETIME_IDENT ';'\n\ntrait Graph {\n    type N: Show + Hash;\n    type E: Show + Hash;\n    ...\n}\n\nimpl Graph for MyGraph {\n    // Both MyNode and MyEdge must implement Show and Hash\n    type N = MyNode;\n    type E = MyEdge;\n    ...\n}\n\nfn print_nodes<G: Graph>(g: &G) {\n    // here, can assume G::N implements Show\n    ...\n}  https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md",
            "title": "Associated types"
        },
        {
            "location": "/rust/#phantom-type-parameters",
            "text": "phantom-data  Phantom type parameters",
            "title": "Phantom type parameters"
        },
        {
            "location": "/rust/#traits",
            "text": "A  trait  is a collection of methods defined for an unknown type:  Self . They can access other methods declared in the same trait. Traits can be implemented for any data type.   Derive:   Operation overloading  Fn ,  FnMut , and  FnOnce  traits for types that can be invoked like functions  + ,  += ,  - ,  * ,  /  ... for operator traits  Drop : The  Drop  trait only has one method:  drop , which is called automatically when an object goes out of scope.  The main use of the Drop trait is to free the resources that the implementor instance owns.  Box ,  Vec ,  String ,  File , and  Process : the types implemented the  Drop  trait  Iterators : The Iterator trait is used to implement iterators over collections such as arrays.  fn next(&mut self) -> Option<Self::Item>  \uad6c\ud604\ud574\uc57c \ud568  dyn Trait: https://doc.rust-lang.org/rust-by-example/trait/dyn.html  impl Trait: https://doc.rust-lang.org/rust-by-example/trait/impl_trait.html  Copy Trait: \ud560\ub2f9\uc2dc resource move\uac00 \uc544\ub2cc copy  Clone Trait:  .clone() \uc73c\ub85c \uba85\uc2dc\uc801\uc73c\ub85c copy  Supertraits: Rust doesn't have \"inheritance\", but you can define a trait as being a superset of another trait.  Disambiguating overlapping traits  https://cotigao.medium.com/dyn-impl-and-trait-objects-rust-fd7280521bea  https://modoocode.com/334",
            "title": "Traits"
        },
        {
            "location": "/rust/#to-be-considered",
            "text": "Integer Overflow: https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow  \uc5ed\ucc38\uc870 \uac15\uc81c(deref coercion)",
            "title": "To be considered"
        },
        {
            "location": "/rust/#collections",
            "text": "",
            "title": "collections"
        },
        {
            "location": "/rust/#box-stack-and-heap",
            "text": "All values in Rust are stack allocated by default. Values can be boxed (allocated on the heap) by creating a  Box<T> . A box is a smart pointer to a heap allocated value of type  T . When a box goes out of scope, its destructor is called, the inner object is destroyed, and the memory on the heap is freed.  use std::mem;\n\n#[derive(Debug)]\n#[allow(dead_code)]\nstruct Point {\n    x: f64,\n    y: f64,\n}\n#[derive(Debug)]\n#[allow(dead_code)]\nstruct Rectangle {\n    top_left: Point,\n    bottom_right: Point,\n}\n\nfn origin() -> Point {\n    Point { x: 0f64, y: 0f64 }\n}\nfn boxed_origin() -> Box<Point> {\n    // allocate a point to heap\n    return Box::new(Point { x: 0.0, y: 0.0 });\n}\n\n// stack allocated variables\nlet point: Point = origin();\nlet rectangle: Rectangle = Rectangle {\n    top_left: origin(),\n    bottom_right: Point { x: 100.0, y: 100.0 },\n};\n// heap allocated variables\nlet box_point: Box<Point> = Box::new(origin());\nlet box_rectangle: Box<Rectangle> = Box::new(Rectangle {\n    top_left: origin(),\n    bottom_right: Point { x: 200.0, y: 200.0 },\n});\n\n// inner box in stack\nlet doubleIndirectBox: Box<Box<Point>> = Box::new(boxed_origin());\n\nprintln!(\"{point:?}\");\nprintln!(\n    \"Point occupies {} bytes on the stack\",\n    mem::size_of_val(&point)\n);\nprintln!(\n    \"Rectangle occupies {} bytes on the stack\",\n    mem::size_of_val(&rectangle)\n);\n\n// box size == pointer size\nprintln!(\n    \"Boxed point occupies {} bytes on the stack\",\n    mem::size_of_val(&box_point)\n);\nprintln!(\n    \"Boxed rectangle occupies {} bytes on the stack\",\n    mem::size_of_val(&box_rectangle)\n);\nprintln!(\n    \"Boxed box occupies {} bytes on the stack\",\n    mem::size_of_val(&doubleIndirectBox)\n);\n\n// Copy the data contained in `boxed_point` into `unboxed_point`\nlet unboxed_point: Point = *box_point;\nprintln!(\n    \"Unboxed point occupies {} bytes on the stack\",\n    mem::size_of_val(&unboxed_point)\n);",
            "title": "Box, stack and heap"
        },
        {
            "location": "/rust/#string",
            "text": "to_string() : Display trait\uc774 \uad6c\ud604\ub41c \ubaa8\ub4e0 type\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5  +  \uc5f0\uc0b0\ub3d9\uc791 \ucd94\ucc9c X  String\uc758 index \uc811\uadfc \uae08\uc9c0\ub428  \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() \uacfc \uac19\uc774 \ubb38\uc790\uc18c(grapheme)\ub85c \uc811\uadfc\ud574\uc57c \ud568   let data = \"initial contents\";\nlet s = data.to_string();\n// the method also works on a literal directly:\nlet s = \"initial contents\".to_string();\nlet s = String::from(\"initial contents\"); // \uc704\uc640 \ub3d9\uc77c\n\nlet mut s = String::from(\"foo\");\ns.push_str(\"bar\");\n\nlet mut s = String::from(\"lo\");\ns.push('l');\n\nlet s1 = String::from(\"Hello, \");\nlet s2 = String::from(\"world!\");\nlet s3 = s1 + &s2; // s1\uc740 \uc5ec\uae30\uc11c \uc774\ub3d9\ub418\uc5b4 \ub354\uc774\uc0c1 \uc4f8 \uc218 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\uc138\uc694\n\nlet s1 = String::from(\"tic\");\nlet s2 = String::from(\"tac\");\nlet s3 = String::from(\"toe\");\nlet s = format!(\"{}-{}-{}\", s1, s2, s3);\n\nfor c in \"\u0928\u092e\u0938\u094d\u0924\u0947\".chars() { // \ubb38\uc790\uc18c \ubc18\ud658\n    println!(\"{}\", c);\n}\nfor b in \"\u0928\u092e\u0938\u094d\u0924\u0947\".bytes() { // byte \ubc18\ud658\n    println!(\"{}\", b);\n}",
            "title": "String"
        },
        {
            "location": "/rust/#hash-map",
            "text": "",
            "title": "hash map"
        },
        {
            "location": "/rust/#useful-code-or-crates",
            "text": "",
            "title": "Useful code or crates"
        },
        {
            "location": "/rust/#read-stdin",
            "text": "use std::io;\n// ...\n// Read a string from stdin\nlet mut index = String::new();\nio::stdin()\n    .read_line(&mut index)\n    .expect(\"Failed to read line\");\nlet index: usize = index\n    .trim()\n    .parse()\n    .expect(\"Index entered was not a number\");",
            "title": "Read stdin"
        },
        {
            "location": "/rust/#modules",
            "text": "Rust provides a powerful module system that can be used to hierarchically split code in logical units (modules), and manage visibility (public/private) between them.  A module is a collection of items: functions, structs, traits, impl blocks, and even other modules.   Rust\uc758 module\uc774\ub780 \ucf54\ub4dc\ub97c \uacc4\uce35\ud654/\uc870\uc9c1\ud654 (namespace)\ud558\uace0, pub(public) \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc811\uadfc\uc131 \uc81c\uc5b4\ud558\uc5ec, \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \ubc29\ubc95   mod my_mod { // module my_mod\n  pub fn public_func() {\n    // ... \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \uac00\ub2a5\n  }\n  fn private_func() {\n    // ... module \uc678\ubd80\uc5d0\uc11c \ud638\ucd9c \ubd88\uac00\n    // ... \uac19\uc740 module \ub0b4\uc5d0\uc120 \uc811\uadfc \uac00\ub2a5\n  }\n\n  pub mod nested_mod { // module nested_mod\n    pub(in crate::my_mod) fn nested_ {\n      // ... crate::my_mode\uc5d0\uc11c\ub9cc public function\n    }\n    pub(self) fn fname {\n      // ... pub(self) == private\n    }\n    pub(super) fn fname {\n      // ... parent module\uc5d0\uc11c\ub9cc \ubcf4\uc784\n    }\n  }\n\n  pub(crate) fn public_function_in_crate() {\n    // ... \uc18d\ud55c crate\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5\n  }\n}",
            "title": "Modules"
        },
        {
            "location": "/rust/#macro",
            "text": "macro_rules  allows users to define syntax extension in a declarative way.  MacroRule  =  MacroMatcher => MacroTranscriber \ub85c \uad6c\uc131,  MacroRule \uc740  ; \uc73c\ub85c \uad6c\ubd84  Each macro by example has a name, and one or more rules. Each rule has two parts: a matcher, describing the syntax that it matches, and a transcriber, describing the syntax that will replace a successfully matched invocation.  Both the matcher and the transcriber must be surrounded by delimiters. Macros can expand to expressions, statements, items (including traits, impls, and foreign items), types, or patterns.  Transcribing : \ucc98\uc74c match\ub41c MacroMatcher\uc758 MacroTranscriber\ub85c code \ubcc0\ud658\ud558\uace0 \ubabb\ucc3e\uac70\ub098 \uc624\ub958 \ubc1c\uc0dd\uc2dc \uc911\ub2e8  () ,  [] ,  {}  \ubaa8\ub4e0 \uad04\ud638\ub294 MacroMatch, MacroRule\uc5d0\uc11c \ubaa8\ub450 \uc0ac\uc6a9\uac00\ub2a5     macros-by-example  Rust by example",
            "title": "Macro"
        },
        {
            "location": "/rust/#testing",
            "text": "#[test]  \ud568\uc218\uac00 test\ud568\uc218\uc784\uc744 \uc120\uc5b8  cargo test -- --nocapture --test-threads=1  cargo test -- -h \uc73c\ub85c testing option \ud655\uc778\ud574\ubcf4\uae30  cargo test TESTNAME : \ub2e8\uc77c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \uc2e4\ud589  cargo test -- --ignored :  #[ignore] \ub85c \uc124\uc815\ub41c \ud14c\uc2a4\ud2b8 \ud56d\ubaa9 \ud14c\uc2a4\ud2b8  unit test\ub294 mod test \ub9cc\ub4e4\uace0,  #[cfg(test)]  cfg attribute\ub97c \uc124\uc815\ud558\uc5ec \uad6c\uc131;  cargo test \uc2dc\uc5d0\ub9cc \ucef4\ud30c\uc77c/\uc2e4\ud589   #[derive(Debug, PartialEq, Eq)]\npub struct Rectangle {\n  length: u32,\n  width: u32,\n}\n\nimpl Rectangle {\n  pub fn can_hold(&self, other: &Rectangle) -> bool {\n      self.length > other.length && self.width > other.width\n  }\n}\n\n#[allow(dead_code)]\nfn add_two(a: i32) -> i32 {\n  if a > 100 {\n      panic!(\"value must be less than or equal to 100.\");\n  }\n  a + 2\n}\n\n#[cfg(test)]\nmod tests {\n  use super::*;\n\n  #[test]\n  fn larger_can_hold_smaller() {\n      let larger = Rectangle { length: 8, width: 7 };\n      let smaller = Rectangle { length: 5, width: 1 };\n\n      assert!(larger.can_hold(&smaller), \"{:?}\", larger);\n  }\n\n  #[test]\n  fn smaller_cannot_hold_larger() {\n      let larger = Rectangle { length: 8, width: 7 };\n      let smaller = Rectangle { length: 5, width: 1 };\n\n      assert!(!smaller.can_hold(&larger), \"{:?}\", smaller);\n  }\n\n  #[test]\n  fn it_adds_two() {\n      // assert_eq!\uc640 assert_ne!\ub294 \n      // \uac01\uac01 ==\uacfc != \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ud558\ubbc0\ub85c\n      // PartialEq\uc640 Debug \ud2b8\ub808\uc787\uc744 \uad6c\ud604\ud574 \ud568\n      assert_eq!(4, add_two(2));\n      assert_ne!(4, add_two(3));\n  }\n\n  #[test]\n  #[should_panic]\n  fn greater_than_100() {\n      add_two(200);\n  }\n\n  #[test]\n  #[should_panic(expected = \"value must be less than or equal to 100\")]\n  fn greater_than_100_2() {\n      add_two(200);\n  }\n}",
            "title": "Testing"
        },
        {
            "location": "/rust/#rust-attributes",
            "text": "rust-by-example  sjquant.tistory.com    An attribute is  metadata  applied to some  module ,  crate  or  item . This metadata can be used to/for:   conditional compilation of code  set crate name, version and type (binary or library)  disable lints (warnings)  enable compiler features (macros, glob imports, etc.)  link to a foreign library  mark functions as unit tests  mark functions that will be part of a benchmark",
            "title": "Rust Attributes"
        },
        {
            "location": "/rust/#scope",
            "text": "#![crate_attribute]  for a whole crate  #[item_attribute] : for a module or item   \ub2e4\ub978 \ubb38\uc11c\uc5d0\uc11c\ub294    #![Attr] : InnerAttribute\ub85c \uc120\uc5b8\ub41c \ubc94\uc704 \ub0b4\uc5d0 \uc801\uc6a9  #[Attr] : OuterAttribute\ub85c \uc120\uc5b8\uc774\ud6c4 \uc624\ub294 module, item\uc5d0 \uc801\uc6a9",
            "title": "Scope"
        },
        {
            "location": "/rust/#attribute-arguments",
            "text": "Attribute\ub294 Argument\ub97c \uac00\uc9c8 \uc218 \uc788\uc74c   #[attribute = \"value\"]  #[attribute(key = \"value\")]  #[attribute(value)]  #[attribute(value, value2, value3, value4, value5)]",
            "title": "Attribute arguments"
        },
        {
            "location": "/rust/#frequently-used-attributes",
            "text": "#[allow(dead_code)] : used to disable linting of the following code block; the compiler option?  #![crate_name = \"rary\"] : The library is named \"rary\"  #![crate_type = \"lib\"] : This crate is a library; When the crate_type attribute is used, we no longer need to pass the  --crate-type  flag to rustc.  #[cfg(target_os = \"linux\")]  This function only gets compiled if the target OS is linux  #[cfg(not(target_os = \"linux\"))] : And this function only gets compiled if the target OS is  not  linux    \u2757 cfg! , unlike  #[cfg] , it is a  macro  that does not remove any code and only evaluates to true or false. if cfg!(target_os = \"linux\") {\n  println!(\"Yes. It's definitely linux!\");\n} else {\n  println!(\"Yes. It's definitely *not* linux!\");\n}    #[test] : used for functional test  #[cfg_attr(a, b)] : \ub9cc\uc57d #[cfg(a)]\ub97c \ub9cc\uc871\ud558\uba74 #[b] attribute\ub97c \uc801\uc6a9",
            "title": "Frequently Used Attributes"
        },
        {
            "location": "/rust/#custom-cfg",
            "text": "\uc0ac\uc6a9\uc790  cfg \ub3c4 \ub9cc\ub4e4 \uc218 \uc788\uc74c!  #[cfg(mine)]\nfn cond_function() {\n    println!(\"mine cond!!!\");\n}\n\n#[cfg(not(mine))]\nfn cond_function() {\n    println!(\"not mine cond!!!\");\n}\n\nfn main() {\n   cond_function();\n}  rustc --cfg mine main.rs && ./main\nRUSTFLAGS='--cfg mine' cargo run",
            "title": "Custom cfg"
        },
        {
            "location": "/rust/#derive-attribute",
            "text": "\ud2b9\uc815\ud55c Trait\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uad6c\ud604(impl)\uc744 \uac04\ud3b8\ud558\uac8c \uc81c\uacf5  \uae30\ubcf8\uc801\uc778 \uad6c\ud604\uc740 \uc774\ubbf8 \uc815\ud574\uc838 \uc788\uc73c\uba70, \uc774\ub7f0 Trait\uc744 derivable \ud558\ub2e4\uace0 \ud568  derivable Trait:  Eq ,  PartialEq ,  Copy ,  Clone ,  Debug  ...?   #[derive(PartialEq, Clone)]\nstruct Foo<T> {\n    a: i32,\n    b: T,\n}  The following is a list of derivable traits:   Comparison traits:  Eq ,  PartialEq ,  Ord ,  PartialOrd .  Clone , to create  T  from  &T  via a copy.  Copy , to give a type 'copy semantics' instead of 'move semantics'.  Hash , to compute a hash from  &T .  Default , to create an empty instance of a data type.  Debug , to format a value using the  {:?}  formatter.",
            "title": "derive attribute"
        },
        {
            "location": "/rust/#keywords",
            "text": "",
            "title": "Keywords"
        },
        {
            "location": "/rust/#crate",
            "text": "// \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 crate \uc120\uc5b8\nextern crate rand;\nextern crate my_crate as thing; // the alias of my_crate in my project\nextern crate std; // implicitly added to the root of every Rust project\n\n// item\uc758 visibility\ub97c \ud604\uc7ac crate\uc5d0 \ud3ec\ud568\ub41c module\ub85c\ub9cc \ud55c\uc815\npub(crate) enum CoolMarkerType { }\n\n// The root of the current crate\ncrate::foo::bar",
            "title": "crate"
        },
        {
            "location": "/rust/#good-answer-to-understand",
            "text": "whats-the-difference-between-self-and-self  Why is the  Sized  bound necessary in this trait?",
            "title": "Good answer to understand"
        },
        {
            "location": "/rust/#associated-items",
            "text": "This following RFC extends traits with associated items, which make generic programming more convenient, scalable, and powerful. In particular, traits will consist of a set of methods, together with:   https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md    Associated functions (already present as \"static\" functions)  Associated consts  Associated types  Associated lifetimes",
            "title": "Associated items"
        },
        {
            "location": "/rust/#rust-rfc",
            "text": "https://github.com/rust-lang/rfcs/tree/master/text",
            "title": "Rust RFC"
        }
    ]
}